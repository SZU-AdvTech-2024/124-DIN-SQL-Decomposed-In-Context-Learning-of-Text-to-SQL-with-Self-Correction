Number of data samples 1034
index is 0
SELECT count(*) FROM singer
How many singers do we have?
The SQL query for the question "How many singers do we have?" needs the table = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT count(*) FROM singer
SELECT count(DISTINCT Singer_ID) FROM singer
index is 1
SELECT count(*) FROM singer
What is the total number of singers?
The SQL query for the question "What is the total number of singers?" only needs the table [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Singer_ID) FROM singer
SELECT  COUNT(DISTINCT Singer_ID) FROM singer
index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
The SQL query for the question "Show name, country, age for all singers ordered by age from the oldest to the youngest." needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name, Country, Age"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT  Name, Country, Age  FROM singer  ORDER BY Age DESC
index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
The SQL query for the question "What are the names, countries, and ages for every singer in descending order of age?" needs the table = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names, countries, and ages"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT  Name, Country, Age FROM singer ORDER BY Age DESC
index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
The SQL query for the question "What is the average, minimum, and maximum age of all singers from France?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average age", "minimum age", "maximum age"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT  AVG(Age), MIN(Age), MAX(Age)  FROM singer  WHERE Country = 'France'
index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
 The SQL query for the question "What is the average, minimum, and maximum age for all French singers?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average, minimum, and maximum age for French singers"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'French'
SELECT  AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'French' GROUP BY Country
index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
The SQL query for the question "Show the name and the release year of the song by the youngest singer." needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
SELECT  Song_Name, Song_release_year  FROM singer  ORDER BY Age ASC  LIMIT 1
index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
The SQL query for the question "What are the names and release years for all the songs of the youngest singer?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names and release years for all the songs"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)
SELECT  Song_Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer)
index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
The SQL query for the question "What are all distinct countries where singers above age 20 are from?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT DISTINCT Country FROM singer WHERE Age  >  20
SELECT  DISTINCT Country FROM singer WHERE Age > 20
index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
 The SQL query for the question "What are the different countries with singers above age 20?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country  FROM singer  WHERE Age > 20
index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
The SQL query for the question "Show all countries and the number of singers in each country." needs the tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country, COUNT(*) as num_singers FROM singer GROUP BY Country
SELECT Country, COUNT(Singer_ID) as num_singers FROM singer GROUP BY Country
index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
 The SQL query for the question "How many singers are from each country?" needs the tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many"]
So, we don't need JOIN and don't need nested queries, thus the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
SELECT  Country, COUNT(Singer_ID)  FROM singer  GROUP BY Country
index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
The SQL query for the question "List all song names by singers above the average age." needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT  Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
The SQL query for the question "What are all the song names by singers who are older than average?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT  Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
The SQL query for the question "Show location and name for all stadiums with a capacity between 5000 and 10000." needs these tables = [stadium], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT  Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
The SQL query for the question "What are the locations and names of all stations with capacity between 5000 and 10000?" needs these tables = [stadium], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Locations and names of stations"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT  Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
The SQL query for the question "What is the maximum capacity and the average of all stadiums?" needs these tables = [stadium], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT  MAX(Capacity), AVG(Capacity) FROM stadium
index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
The SQL query for the question "What is the average and maximum capacities for all stadiums?" needs the table = [stadium], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average capacity", "maximum capacity"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Capacity), MAX(Highest) FROM stadium
SELECT  AVG(Capacity), MAX(Capacity) FROM stadium
index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
The SQL query for the question "What is the name and capacity for the stadium with the highest average attendance?" only needs the table [stadium]. There is no need for JOIN as the query does not require data from multiple tables.
Additionally, it does not require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name, capacity for the stadium with the highest average attendance"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT  Name, Capacity  FROM stadium  WHERE Stadium_ID = (SELECT Stadium_ID FROM (                       SELECT Stadium_ID                       FROM stadium                       ORDER BY Average DESC                       LIMIT 1                     ))
index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
The SQL query for the question "What is the name and capacity for the stadium with the highest average attendance?" needs these tables = [stadium], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name and capacity of the stadium"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT  Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1
index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
The SQL query for the question "How many concerts are there in year 2014 or 2015?" needs the table = [concert], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)
SELECT  COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)
index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
 The SQL query for the question "How many concerts occurred in 2014 or 2015?" needs these tables = [concert], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)
SELECT  COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)
index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
The SQL query for the question "Show the stadium name and the number of concerts in each stadium." needs these tables = [stadium, concert, singer_in_concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["stadium.Name, COUNT(concert.concert_ID)"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , COUNT(T3.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID GROUP BY T1.Name
SELECT  T1.Name , COUNT(T3.concert_ID)  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID  GROUP BY T1.Name
index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
 The SQL query for the question "For each stadium, how many concerts play there?" needs these tables = [stadium, concert], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , COUNT(*) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name
SELECT  T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1  INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Name
index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
The SQL query for the question "Show the stadium name and capacity with the most number of concerts in year 2014 or after." needs these tables = [stadium,concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the stadium name and capacity"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Name, s.Capacity ORDER BY count(*) DESC LIMIT 1
SELECT  s.Name, s.Capacity  FROM stadium AS s  JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID  WHERE c.Year >= 2014  GROUP BY s.Name, s.Capacity  ORDER BY COUNT(c.concert_ID) DESC  LIMIT 1
index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
The SQL query for the question "What is the name and capacity of the stadium with the most concerts after 2013?" needs these tables = [stadium, concert], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name and capacity of the stadium with the most concerts after 2013"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name ,  Capacity FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE Year > 2013 GROUP BY Name ORDER BY COUNT(concert_ID) DESC LIMIT 1
SELECT  stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1
index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
The SQL query for the question "Which year has the most number of concerts?" needs the table [concert], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the year that has the most number of concerts?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Year FROM concert GROUP BY Year ORDER BY count(concert_ID) DESC LIMIT 1
SELECT  Year, COUNT(*) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC LIMIT 1
index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
The SQL query for the question "What is the year that had the most concerts?" needs the table = [concert], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Year FROM concert  GROUP BY Year  ORDER BY COUNT(*) DESC  LIMIT 1
index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
 The SQL query for the question "Show the stadium names without any concert." needs the tables = [stadium, concert] with a LEFT JOIN, as we want to find stadiums without any concert. This includes using a nested query with NOT IN or an equivalent condition.
Plus, we need the answer to the questions = ["stadium names"], and we need the JOIN operation.
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)
index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
 The SQL query for the question "What are the names of the stadiums without any concerts?" needs these tables = [stadium, concert], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which stadiums have concerts?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM stadium WHERE NOT EXISTS (SELECT * FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID)
SELECT  Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)
index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
The SQL query for the question "Show countries where a singer above age 40 and a singer below 30 are from." needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show countries where singers above age 40 are from", "Show countries where singers below age 30 are from"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Country FROM singer WHERE Age > 40 OR Age < 30
SELECT  DISTINCT Country  FROM singer  WHERE Age > 40 OR Age < 30
index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
 The SQL query for the question "Show names for all stadiums except for stadiums having a concert in year 2014." needs these tables = [stadium,concert], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which stadiums have concerts in year 2014?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT  Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
 The SQL query for the question "What are the names of all stadiums that did not have a concert in 2014?" needs these tables = [stadium, concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM stadium WHERE NOT EXISTS (SELECT * FROM concert WHERE Year = 2014 AND stadium.Stadium_ID = concert.Stadium_ID)
SELECT  Name  FROM stadium  WHERE stadium.Stadium_ID NOT IN (SELECT stadium.Stadium_ID FROM concert WHERE Year = 2014)
index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
The SQL query for the question "Show the name and theme for all concerts and the number of singers in each concert." needs these tables = [concert, singer_in_concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name and theme of concert, number of singers in each concert"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT concert_Name ,  Theme , COUNT(Singer_ID) as num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID
SELECT  concert_Name ,  Theme , COUNT(Singer_ID) as num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme
index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
The SQL query for the question "What are the names, themes, and number of singers for every concert?" needs these tables = [concert, singer_in_concert], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT concert_Name , Theme , COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert_ID = concert_ID GROUP BY concert_Name , Theme
SELECT  concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_Name, concert.Theme
index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
The SQL query for the question "List singer names and number of concerts for each singer." needs these tables = [singer, singer_in_concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["singer names and number of concerts for each singer"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name ,  COUNT(T2.concert_ID) AS number_of_concerts FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT  T1.Name, COUNT(T2.concert_ID) AS number_of_concerts  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
The SQL query for the question "What are the names of the singers and number of concerts for each person?" needs these tables = [singer, singer_in_concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["singer.Name","COUNT(singer_in_concert.concert_ID)"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name, COUNT(concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name
SELECT  Name, COUNT(concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name
index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
The SQL query for the question "List all singer names in concerts in year 2014" needs these tables = [singer, singer_in_concert, concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [singer.Name].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
SELECT  T1.Name  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  WHERE T3.Year = 2014 GROUP BY T1.Name
index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
The SQL query for the question "What are the names of the singers who performed in a concert in 2014?" needs these tables = [singer,concert], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["singer.Name"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE Year = 2014
SELECT  singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
The SQL query for the question "What is the name and nation of the singer who have a song having 'Hey' in its name?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the singers who have a song with 'Hey' in its name."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT  Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%'
index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
The SQL query for the question "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with the condition on the Song_Name column, and we need the answer to the questions = ["What is the name and country of origin of the singer."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT  Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%'
index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
The SQL query for the question "Find the name and location of the stadiums where some concerts happened in the years of both 2014 and 2015" needs these tables = [stadium, concert], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the stadiums where concerts happened in 2014", "Find the stadiums where concerts happened in 2015"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND EXISTS (SELECT 1 FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID AND concert.Year = 2015)
SELECT  stadium.Name, stadium.Location  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year = 2014  AND EXISTS (SELECT 1 FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID AND concert.Year = 2015)
index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
The SQL query for the question "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?" needs these tables = [stadium, concert], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the stadiums that had concerts in 2014", "Find the stadiums that had concerts in 2015"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name ,  Location FROM stadium WHERE Stadium_ID IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year  =  2014) AND Stadium_ID IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year  =  2015)
SELECT  Name, Location  FROM stadium  WHERE Stadium_ID IN (     SELECT DISTINCT Stadium_ID      FROM concert      WHERE Year = 2014 )  AND Stadium_ID IN (     SELECT DISTINCT Stadium_ID      FROM concert      WHERE Year = 2015 )
index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
 The SQL query for the question "Find the number of concerts happened in the stadium with the highest capacity." needs these tables = [concert, stadium], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM concert WHERE stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT  count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
 The SQL query for the question "What are the number of concerts that occurred in the stadium with the largest capacity?" needs these tables = [concert,stadium], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(concert_ID) FROM concert WHERE stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))
SELECT  count(concert_ID)  FROM concert  WHERE Stadium_ID IN      (SELECT Stadium_ID       FROM stadium       WHERE Capacity = (SELECT max(Capacity)                         FROM stadium))
index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
The SQL query for the question "Find the number of pets whose weight is heavier than 10." needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT  COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10
index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
The SQL query for the question "How many pets have a greater weight than 10?" needs the tables [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question, "How many pets have a greater weight than 10?"
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT  COUNT(*) FROM Pets WHERE weight > 10
index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
 The SQL query for the question "Find the weight of the youngest dog." needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT weight FROM Pets WHERE PetType  =  'dog' ORDER BY pet_age ASC LIMIT 1
SELECT  weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age DESC LIMIT 1
index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
The SQL query for the question "How much does the youngest dog weigh?" needs the tables [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT weight 
FROM Pets 
WHERE PetType = 'dog' 
ORDER BY pet_age ASC 
LIMIT 1
SELECT  weight  FROM Pets  WHERE PetType = 'dog'  ORDER BY pet_age DESC  LIMIT 1
index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
The SQL query for the question "Find the maximum weight for each type of pet. List the maximum weight and pet type." needs the tables = [Pets], so we don't need JOIN.
Plus, it requires nested queries with the MAX() function, and we need the answer to the questions = ["List the maximum weight and pet type."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT PetType ,  MAX(weight) FROM Pets GROUP BY PetType
SELECT    PetType ,  MAX(weight)  FROM Pets  GROUP BY PetType
index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
The SQL query for the question "List the maximum weight and type for each type of pet." needs these tables = [Pets], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT PetType, max(weight) FROM Pets GROUP BY PetType
SELECT  PetType, max(weight) FROM Pets GROUP BY PetType, PetID
index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
The SQL query for the question "Find number of pets owned by students who are older than 20." needs these tables = [Has_Pet,Student], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of pets owned by students"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(H.PetID) FROM Has_Pet AS H JOIN Student AS S ON H.StuID = S.StuID WHERE S.Age > 20
SELECT  count(H.PetID)  FROM Has_Pet AS H  JOIN Student AS S ON H.StuID = S.StuID  WHERE S.Age > 20
index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
The SQL query for the question "How many pets are owned by students that have an age greater than 20?" needs these tables = [Has_Pet, Student], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT  count(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
 The SQL query for the question "Find the number of dog pets that are raised by female students (with sex F)" needs these tables = [Pets,Student,Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'
SELECT  COUNT(*)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'
index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
 The SQL query for the question "How many dog pets are raised by female students?" needs these tables = [Pets,Student,Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(P.PetID) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE S.Sex = 'female' AND P.PetType = 'dog'
SELECT  COUNT(DISTINCT P.PetID)  FROM Student AS S  JOIN Has_Pet AS HP ON S.StuID = HP.StuID  JOIN Pets AS P ON HP.PetID = P.PetID  WHERE S.Sex = 'female' AND P.PetType = 'dog'
index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
The SQL query for the question "Find the number of distinct types of pets" needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of distinct types of pets"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT  COUNT(DISTINCT PetType) FROM Pets
index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
The SQL query for the question "How many different types of pets are there?" needs the table [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different types of pets are there?"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT  COUNT(DISTINCT PetType) FROM Pets
index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
 The SQL query for the question "Find the first name of students who have a cat or dog as a pet." needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat','dog')
SELECT  DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat','dog')
index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
 The SQL query for the question "What are the first names of every student who has a cat or dog as a pet?" needs these tables = [Student,Has_Pet,Pets], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' OR PetType = 'dog'
SELECT  Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType IN ('cat', 'dog')
index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
The SQL query for the question "Find the first name of students who have both cat and dog pets" needs these tables = [Student,Has_Pet,Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the first names of students who have cat pets", "Find the first names of students who have dog pets"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))
SELECT  Fname  FROM Student  WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) INTERSECT  SELECT Fname  FROM Student  WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))
index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
The SQL query for the question "What are the students' first names who have both cats and dogs as pets?" needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have cats and dogs as pets?"]
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Student.FName 
FROM Student 
JOIN Has_Pet ON Student.StuID = Has_Pet.StuID 
JOIN Pets ON Has_Pet.PetID = Pets.PetID 
WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog' 
GROUP BY Student.StuID 
HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT  Student.FName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat','dog') GROUP BY Student.FName  HAVING COUNT(DISTINCT Pets.PetType) = 2
index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
The SQL query for the question "Find the major and age of students who do not have a cat pet." needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the students with a cat pet"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Major ,  Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID  =  'cat')
SELECT  Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
The SQL query for the question "What major is every student who does not own a cat as a pet, and also how old are they?" needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the major of students who do not own a cat as a pet?","How old are they?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT  Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
 The SQL query for the question "Find the id of students who do not have a cat pet." needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.StuID FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID LEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IS NULL OR T3.PetType <> 'cat'
SELECT  DISTINCT T1.StuID  FROM Student AS T1  LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  LEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T3.PetType IS NULL OR T3.PetType <> 'cat'
index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
 The SQL query for the question "What are the ids of the students who do not own cats as pets?" needs these tables = [Student,Pets,Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T2.StuID FROM Has_Pet AS T2 WHERE T2.PetID IN (SELECT T3.PetID FROM Pets AS T3 WHERE T3.PetType = 'cat'))
SELECT  DISTINCT T1.StuID  FROM Student AS T1  WHERE T1.StuID NOT IN  (SELECT T2.StuID   FROM Has_Pet AS T2   WHERE T2.PetID IN   (SELECT T3.PetID    FROM Pets AS T3    WHERE T3.PetType = 'cat'))
index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
The SQL query for the question "Find the first name and age of students who have a dog but do not have a cat as a pet." needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have a dog as a pet?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType  =  'dog' AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType  =  'cat')
SELECT  Student.Fname, Student.Age  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'dog' AND Student.StuID NOT IN  (SELECT Has_Pet.StuID FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'cat')
index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
The SQL query for the question "What is the first name of every student who has a dog but does not have a cat?" needs these tables = [Student,Has_Pet,Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have a dog and don't have a cat?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet AS T4 JOIN Pets AS T5 ON T4.PetID = T5.PetID WHERE T4.StuID = T1.StuID AND PetType = 'cat')
SELECT  T1.Fname  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE PetType = 'dog'  AND NOT EXISTS  (SELECT 1   FROM Has_Pet AS T4   JOIN Pets AS T5 ON T4.PetID = T5.PetID   WHERE T4.StuID = T1.StuID AND PetType = 'cat')
index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
The SQL query for the question "Find the type and weight of the youngest pet." needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
SELECT  PetType, weight  FROM Pets  ORDER BY pet_age ASC  LIMIT 1
index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
The SQL query for the question "What type of pet is the youngest animal, and how much does it weigh?" needs the tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT  PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
 The SQL query for the question "Find the id and weight of all pets whose age is older than 1." needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT  PetID, weight FROM Pets WHERE pet_age > 1
index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
The SQL query for the question "What is the id and weight of every pet who is older than 1?" needs these tables = [Pets], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Pets that are older than 1"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT  Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1
index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
The SQL query for the question "Find the average and maximum age for each type of pet." needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, AVG(pet_age) as average_age, MAX(pet_age) as max_age
FROM Pets
GROUP BY PetType
SELECT  PetType, AVG(pet_age) as average_age, MAX(pet_age) as max_age FROM Pets GROUP BY PetType
index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
 The SQL query for the question "What is the average and maximum age for each pet type?" needs these tables = [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average and maximum age for each pet type"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType
SELECT  PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType 
index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
The SQL query for the question "Find the average weight for each pet type." needs the table [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT  PetType, AVG(weight) FROM Pets GROUP BY PetType
index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
 The SQL query for the question "What is the average weight for each type of pet?" needs the tables [Pets], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question as ["average weight for each type of pet"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT  PetType, AVG(weight) FROM Pets GROUP BY PetType
index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
The SQL query for the question "Find the first name and age of students who have a pet." needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["first name and age of students who have a pet."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT  Student.FName, Student.Age  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
The SQL query for the question "What are the different first names and ages of the students who do have pets?" needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Fname, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT  DISTINCT Fname, Age  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
The SQL query for the question "Find the id of the pet owned by student whose last name is ‘Smith’." needs these tables = [Student,Pets,Has_Pet], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName  =  'Smith'
SELECT  Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
 The SQL query for the question "What is the id of the pet owned by the student whose last name is 'Smith'?" needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the id of the pet owned by the student?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT  Pets.PetID  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.LName = 'Smith'
index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
 The SQL query for the question "Find the number of pets for each student who has any pet and student id." needs these tables = [Has_Pet], so we don't need JOIN.
Plus, it involves an aggregation function (COUNT) and we need to group by student ID, therefore it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN).
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT StuID, COUNT(PetID) 
FROM Has_Pet
GROUP BY StuID
SELECT  StuID, COUNT(PetID)  FROM Has_Pet GROUP BY StuID
index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
The SQL query for the question "For students who have pets, how many pets does each student have? List their IDs instead of names." needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many pets does each student have?" and "List their IDs instead of names."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.StuID , count(T2.PetID) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID
SELECT T1.StuID, count(T2.PetID)  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.StuID
index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
The SQL query for the question "Find the first name and gender of students who have more than one pet." needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Fname ,  Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)
SELECT  Fname ,  Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)
index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
The SQL query for the question "What is the first name and gender of all the students who have more than one pet?" needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it requires nested queries with (COUNT), and we need the answer to the questions = ["First name and gender of students"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Fname, Sex FROM Student join Has_Pet on Student.StuID = Has_Pet.StuID group by Student.StuID  having count(Has_Pet.PetID) > 1
SELECT  Student.Fname, Student.Sex  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
The SQL query for the question "Find the last name of the student who has a cat that is age 3." needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the last name of the student who has a cat that is age 3"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  'cat' AND pet_age  =  3))
SELECT  Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
 The SQL query for the question "What is the last name of the student who has a cat that is 3 years old?" needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3
SELECT  LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'cat' AND pet_age = 3  GROUP BY LName
index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
The SQL query for the question "Find the average age of students who do not have any pet." needs these tables = [Student, Has_Pet], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have pets?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet)
SELECT  AVG(Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IS NULL
index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
The SQL query for the question "What is the average age for all students who do not own any pets?" needs these tables = [Student, Has_Pet, Pets], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students own pets?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT  AVG(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
The SQL query for the question "How many continents are there?" needs these tables = [continents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM continents
SELECT COUNT(DISTINCT Continent) FROM continents
index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
 The SQL query for the question "What is the number of continents?" needs these tables = [continents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM continents
SELECT  COUNT(DISTINCT Continent) FROM continents
index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
The SQL query for the question "How many countries does each continent have? List the continent id, continent name and the number of countries." needs these tables = [continents, countries], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["continent id, continent name, number of countries"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT ContId, Continent, COUNT(CountryId) as Num_countries FROM continents JOIN countries ON ContId = Continent GROUP BY ContId, Continent
SELECT  ContId, Continent, COUNT(CountryId) as Num_countries FROM continents JOIN countries ON Continents.ContId = countries.Continent GROUP BY ContId, Continent
index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
 The SQL query for the question "For each continent, list its id, name, and how many countries it has" needs these tables = [continents,countries], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT ContId, Continent, COUNT(CountryName) FROM continents JOIN countries ON ContId = Continent GROUP BY Continent
SELECT  ContId, Continent, COUNT(CountryName) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY Continent 
index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
The SQL query for the question "How many countries are listed?" needs the table [countries], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM countries
SELECT  COUNT(*) FROM countries
index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
The SQL query for the question "How many countries exist?" only needs the table [countries], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM countries
SELECT  COUNT(DISTINCT CountryId) FROM countries
index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
The SQL query for the question "How many models does each car maker produce? List maker full name, id and the number." needs these tables = [car_makers, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List maker full name, id and the number"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FullName, Id, COUNT(Model) FROM car_makers JOIN car_names ON Id = MakeId GROUP BY FullName, Id
SELECT  FullName, Id, COUNT(Model) FROM car_makers JOIN car_names ON Id = MakeId GROUP BY FullName, Id
index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
The SQL query for the question "What is the full name of each car maker, along with its id and how many models it produces?" needs tables = [car_makers,model_list], so we need JOIN.
We also need to count the number of models each car maker produces, which requires an aggregate function. This means we don't need nested queries.
Therefore, we need JOIN and don't need nested queries, so the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FullName , Id , COUNT(Model) as NumberOfModels FROM car_makers JOIN model_list ON Id  =  model_list.Maker GROUP BY Id
SELECT  FullName, Id, COUNT(model_list.Model) as NumberOfModels  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.FullName
index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
The SQL query for the question "Which model of the car has the minimum horsepower?" needs these tables = [model_list,cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Model FROM model_list WHERE ModelId = (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))
SELECT  Model FROM model_list WHERE ModelId = (SELECT MakeId                  FROM car_names                  WHERE Id = (SELECT Id                              FROM cars_data                              WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)))
index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
The SQL query for the question "What is the model of the car with the smallest amount of horsepower?" needs these tables = [model_list,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Horsepower  =  (SELECT min(Horsepower) FROM cars_data)
SELECT  T1.Model  FROM model_list AS T1  JOIN car_names AS T3 ON T1.Model = T3.Model JOIN cars_data AS T2 ON T3.MakeId = T2.Id  WHERE T2.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
 The SQL query for the question "Find the model of the car whose weight is below the average weight." needs these tables = [model_list,cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))
SELECT  Model  FROM model_list  WHERE ModelId IN (SELECT MakeId                    FROM car_names                    WHERE MakeId IN (SELECT Id                                     FROM cars_data                                     WHERE Weight < (SELECT AVG(Weight)                                                    FROM cars_data)))
index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
The SQL query for the question "What is the model for the car with a weight smaller than the average?" needs these tables = [model_list, cars_data], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))
SELECT  Model  FROM model_list  WHERE ModelId IN      (SELECT MakeId       FROM cars_data       WHERE Weight < (SELECT AVG(Weight) FROM cars_data)) GROUP BY Model
index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
The SQL query for the question "Find the name of the makers that produced some cars in the year of 1970" needs these tables = [car_makers,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = 1970
SELECT  T1.Maker  FROM car_makers AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  JOIN cars_data AS T3 ON T2.Id = T3.Id  WHERE T3.Year = 1970
index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
The SQL query for the question "What is the name of the different car makers who produced a car in 1970?" needs these tables = [car_makers,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of the car makers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970
SELECT  car_makers.Maker  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.Model = cars_data.Id  WHERE cars_data.Year = 1970
index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
The SQL query for the question "Find the make and production time of the cars that were produced in the earliest year?" needs these tables = [car_names, cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Make, Year
FROM car_names
JOIN cars_data ON car_names.MakeId = cars_data.Id
WHERE Year = (SELECT MIN(Year) FROM cars_data)
SELECT  car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
The SQL query for the question "What is the maker of the car produced in the earliest year and what year was it?" needs these tables = [car_makers, cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Maker", "Year"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id ORDER BY cars_data.Year ASC LIMIT 1
SELECT  car_makers.Maker, MIN(cars_data.Year) as Earliest_Year  FROM car_makers  JOIN cars_data ON car_makers.Id = cars_data.Id  GROUP BY car_makers.Maker  ORDER BY Earliest_Year ASC  LIMIT 1
index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
The SQL query for the question "Which distinct car models are produced after 1980?" needs these tables = [car_names,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of car models produced after 1980"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980
SELECT  DISTINCT T2.Model  FROM cars_data AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  WHERE T1.Year > 1980
index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
The SQL query for the question "What are the different models for the cars produced after 1980?" needs these tables = [car_names,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Different models for the cars produced after 1980"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT  DISTINCT Model FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year > 1980
index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
The SQL query for the question "How many car makers are there in each continent? List the continent name and the count." needs these tables = [car_makers, continents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the continent name and the count"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.Continent , COUNT(T1.Id) from car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN countries AS T3 ON T1.Country  =  T3.CountryId JOIN continents AS T4 ON T3.Continent  =  T4.ContId GROUP BY T2.Continent
SELECT  T4.Continent , COUNT(T1.Id)  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id  =  T2.Maker  JOIN countries AS T3 ON T1.Country  =  T3.CountryId  JOIN continents AS T4 ON T3.Continent  =  T4.ContId  GROUP BY T4.Continent
index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
 The SQL query for the question "What is the name of each continent and how many car makers are there in each one?" needs these tables = [continents, car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of each continent and count of car makers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Continent , COUNT(T3.Id) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent
SELECT  T1.Continent, COUNT(T3.Id)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  JOIN car_makers AS T3 ON T2.CountryId = T3.Country  GROUP BY T1.Continent
index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
 The SQL query for the question "Which of the countries has the most car makers? List the country name." needs these tables = [car_makers, countries], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.CountryName ORDER BY COUNT(DISTINCT T2.Id) DESC LIMIT 1
SELECT  T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country  ORDER BY COUNT(T2.Id) DESC  LIMIT 1
index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
The SQL query for the question "What is the name of the country with the most car makers?" needs these tables = [countries,car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(T2.Id) DESC LIMIT 1
SELECT  T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  ORDER BY COUNT(T2.Id) DESC  LIMIT 1
index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
The SQL query for the question "How many car models are produced by each maker? Only list the count and the maker full name." needs these tables = [car_makers, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of car models produced by each maker and the maker full name."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(T2.Model), T1.FullName FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T1.FullName
SELECT  COUNT(T2.Model), T1.FullName  FROM car_makers AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id, T1.FullName
index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
The SQL query for the question "What is the number of car models that are produced by each maker and what is the id and full name of each maker?" needs these tables = [car_names, model_list, car_makers, countries], so we need JOIN.
Plus, it requires nested queries with COUNT function, and we need the answer to the questions = ["Number of car models per maker", "Id and full name of each maker"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT COUNT(car_names.Model), car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id
SELECT  COUNT(DISTINCT car_names.Model), car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName
index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
The SQL query for the question "What is the accelerate of the car make amc hornet sportabout (sw)?" needs these tables = [cars_data, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'amc hornet sportabout (sw)'
SELECT  Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Model = 'amc hornet sportabout (sw)'
index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
 The SQL query for the question "How much does the car accelerate that makes amc hornet sportabout (sw)?" needs these tables = [cars_data,car_names,model_list], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Accelerate FROM cars_data WHERE cars_data.Id  =  (SELECT MakeId FROM car_names WHERE Model  =  'amc hornet sportabout (sw)')
SELECT  Accelerate  FROM cars_data  WHERE Id = (SELECT MakeId              FROM car_names              WHERE Model = 'amc hornet sportabout (sw)')
index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
The SQL query for the question "How many car makers are there in France?" needs these tables = [car_makers,countries], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT Maker) FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId WHERE CountryName  =  'France'
SELECT  count(DISTINCT Maker)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE CountryName = 'France'
index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
 The SQL query for the question "What is the number of car makers in France?" needs these tables = [car_makers, countries], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of car makers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count( DISTINCT T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'France'
SELECT  count(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'
index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
The SQL query for the question "How many car models are produced in the USA?" needs these tables = [car_names, car_makers, countries], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE CountryName = 'USA'
SELECT  count(DISTINCT car_names.Model)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE CountryName = 'USA'
index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
The SQL query for the question "What is the count of the car models produced in the United States?" needs these tables = [car_makers, countries, model_list], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of car models produced in United States"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(M1.Model) FROM model_list AS M1 JOIN car_makers AS M2 ON M1.Maker = M2.Id JOIN countries AS C ON M2.Country = C.CountryId WHERE C.CountryName = 'United States'
SELECT  COUNT(M1.Model) FROM model_list AS M1 JOIN car_makers AS M2 ON M1.Maker = M2.Id JOIN countries AS C ON M2.Country = C.CountryId WHERE C.CountryName = 'United States' GROUP BY M1.Model
index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
The SQL query for the question "What is the average miles per gallon(mpg) of the cars with 4 cylinders?" requires only the table cars_data, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average miles per gallon(mpg)"].
Therefore, we don't need JOIN and don't need nested queries, so the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT  AVG(MPG)  FROM cars_data  WHERE Cylinders = 4
index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
 The SQL query for the question "What is the average miles per gallon of all the cards with 4 cylinders?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT  AVG(MPG)  FROM cars_data  WHERE Cylinders = 4
index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
The SQL query for the question "What is the smallest weight of the car produced with 8 cylinders on 1974?" needs the table [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["smallest weight of the car"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT  MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974
index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
The SQL query for the question "What is the minimum weight of the car with 8 cylinders produced in 1974?" needs the table [cars_data] so we don't need JOIN. It also does not require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN) and we need the answer to the question ["minimum weight of the car"]. 
Therefore, we don't need JOIN and don't need nested queries, so the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT Weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974
index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
 The SQL query for the question "What are all the makers and models?" needs these tables = [car_makers, model_list], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Maker ,  T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker
SELECT  T1.Maker, T2.Model  FROM car_makers AS T1  INNER JOIN model_list AS T2 ON T1.Id = T2.Maker
index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
The SQL query for the question "What are the makers and models?" needs these tables = [car_makers, model_list], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker
SELECT  T1.Maker, T2.Model  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker
index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
The SQL query for the question "What are the countries having at least one car maker? List name and id." needs these tables = [countries,car_makers], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of countries with car makers' names and ids."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country

SQL query for the given question would be:
SELECT DISTINCT CountryId, CountryName FROM countries JOIN car_makers ON CountryId = Country
SELECT  DISTINCT CountryId, CountryName FROM countries JOIN car_makers ON CountryId = car_makers.Country
index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
The SQL query for the question "What are the names and ids of all countries with at least one car maker?" needs these tables = [countries, car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["country names and ids with at least one car maker"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT CountryName ,  CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)
SELECT CountryName, CountryId  FROM countries  WHERE CountryId IN      (SELECT Country       FROM car_makers)
index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
 The SQL query for the question "What is the number of the cars with horsepower more than 150?" needs these tables = [cars_data], so we don't need JOIN. Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of cars with horsepower more than 150"]. So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY". Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT  COUNT(*) FROM cars_data WHERE Horsepower > 150
index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
The SQL query for the question "What is the number of cars with a horsepower greater than 150?" needs the table [cars_data], and we don't need JOIN for this query.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["number of cars with horsepower greater than 150"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT  COUNT(*)  FROM cars_data  WHERE Horsepower > 150
index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
The SQL query for the question "What is the average weight of cars each year?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT  AVG(Weight), Year  FROM cars_data  GROUP BY Year
index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
The SQL query for the question "What is the average weight and year for each year?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year
SELECT  Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year
index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
The SQL query for the question "Which countries in Europe have at least 3 car manufacturers?" needs these tables = [countries,continents,car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.CountryName FROM countries AS T1,car_makers AS T2,continents AS T3 WHERE T1.Continent = T3.ContId AND T2.Country = T1.CountryId GROUP BY T1.CountryName HAVING COUNT(*) >= 3
SELECT  T1.CountryName  FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN continents AS T3 ON T1.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T1.CountryName  HAVING COUNT(T2.Id) >= 3
index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
The SQL query for the question "What are the names of all European countries with at least 3 manufacturers?" needs these tables = [countries,car_makers], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName HAVING COUNT(Id) >= 3
SELECT  CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY CountryName  HAVING COUNT(car_makers.Id) >= 3
index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
The SQL query for the question "What is the maximum horsepower and the make of the car models with 3 cylinders?" needs these tables = [cars_data,car_makers], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["maximum horsepower", "make of car models"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT max(Horsepower), Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders = 3
SELECT  max(Horsepower), car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
The SQL query for the question "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?" requires the tables [cars_data, car_makers], so we need JOIN.
It also doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the largest amount of horsepower for the models with 3 cylinders?" "What make is it?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT max(Horsepower), Maker FROM cars_data
JOIN car_names ON cars_data.Id = car_names.MakeId
JOIN model_list ON car_names.Model = model_list.Model
JOIN car_makers ON model_list.Maker = car_makers.Id
WHERE Cylinders = 3
SELECT  max(Horsepower), Maker  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders = 3 GROUP BY Maker
index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
The SQL query for the question "Which model saves the most gasoline? That is to say, have the maximum miles per gallon." needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT  car_names.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
The SQL query for the question "What is the car model with the highest mpg?" needs these tables = [cars_data, model_list], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY MPG DESC LIMIT 1
SELECT model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1
index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
The SQL query for the question "What is the average horsepower of the cars before 1980?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT  AVG(Horsepower)  FROM cars_data  WHERE Year < 1980
index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
 The SQL query for the question "What is the average horsepower for all cars produced before 1980?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Average horsepower"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT  AVG(Horsepower)  FROM cars_data WHERE Year < 1980
index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
The SQL query for the question "What is the average edispl of the cars of model volvo?" needs these tables = [cars_data, model_list], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average edispl of the cars of model volvo"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(Edispl) FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE model_list.Model = 'volvo'
SELECT  avg(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Model = 'volvo'
index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
The SQL query for the question "What is the average edispl for all volvos?" needs these tables = [cars_data, model_list, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average edispl"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'Volvo'
SELECT  AVG(Edispl)  FROM cars_data  JOIN car_names ON cars_data.MakeId = car_names.Id  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo'
index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
 The SQL query for the question "What is the maximum acceleration for different numbers of cylinders?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT  Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders
index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
The SQL query for the question "What is the maximum accelerate for all the different cylinders?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders
SELECT  MAX(Accelerate) as Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders
index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
The SQL query for the question "Which model has the most versions (make) of cars?" needs these tables = [model_list, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(Make) DESC LIMIT 1
SELECT  Model FROM model_list  JOIN car_names ON model_list.Model = car_names.Model GROUP BY Model  ORDER BY COUNT(DISTINCT car_names.Make) DESC  LIMIT 1
index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
The SQL query for the question "What model has the most different versions?" needs these tables = [model_list, car_names, cars_data], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which model has the most different versions?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Model , COUNT(DISTINCT T3.Id) AS num_versions FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY num_versions DESC LIMIT 1
SELECT  T1.Model , COUNT(DISTINCT T2.MakeId) AS num_versions FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY num_versions DESC LIMIT 1
index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
 The SQL query for the question "How many cars have more than 4 cylinders?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 4
index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
The SQL query for the question "What is the number of cars with more than 4 cylinders?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 4
index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
The SQL query for the question "How many cars were produced in 1980?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["How many cars were produced in 1980?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT  COUNT(Id)  FROM cars_data  WHERE Year = 1980
index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
The SQL query for the question "In 1980, how many cars were made?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many cars were made in 1980?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Id) FROM cars_data WHERE Year = 1980
SELECT  COUNT(Id) FROM cars_data WHERE Year = 1980
index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
 The SQL query for the question "How many car models were produced by the maker with full name American Motor Company?" needs these tables = [car_names,car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'
SELECT  count(DISTINCT Model)  FROM car_names  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'American Motors Corporation'
index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
The SQL query for the question "What is the number of car models created by the car maker American Motor Company?" needs these tables = [car_names, car_makers], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [number of car models].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT Model) FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
SELECT  count(DISTINCT Model)  FROM car_names  WHERE MakeId IN  (SELECT Id  FROM car_makers  WHERE Maker = 'American Motor Company')
index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
The SQL query for the question "Which makers designed more than 3 car models? List full name and the id." needs these tables = [car_makers, car_names], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Full name and Id of car makers"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FullName ,  Id FROM car_makers JOIN car_names ON Id = MakeId GROUP BY Id HAVING count(Model) > 3
SELECT  FullName, Id  FROM car_makers  JOIN car_names ON Id = MakeId  GROUP BY FullName, Id  HAVING count(Model) > 3
index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
The SQL query for the question "What are the names and ids of all makers with more than 3 models?" needs these tables = [car_makers, model_list], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and ids of all makers with more than 3 models"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Maker, Id FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Id, Maker HAVING COUNT(Model) > 3
SELECT  c.Maker, c.Id  FROM car_makers c  INNER JOIN model_list m ON c.Id = m.Maker  GROUP BY c.Id  HAVING COUNT(m.Model) > 3
index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
The SQL query for the question "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?" requires tables = [model_list,cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN car_makers AS T3 ON T1.Maker  =  T3.Id WHERE T2.Weight > 3500 OR T3.Fullname = "General Motors"
SELECT  DISTINCT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.MakeId  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  JOIN car_makers AS T4 ON T1.Maker = T4.Id  WHERE T3.Weight > 3500 OR T4.FullName = "General Motors"
index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
The SQL query for the question "What are the different models created by either the car maker General Motors or weighed more than 3500?" needs these tables = [model_list,car_makers,cars_data], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the different models created by General Motors?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Model FROM model_list WHERE Maker  =  'General Motors' OR Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500))
SELECT Model  FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'General Motors')     OR Model IN          (SELECT Model           FROM car_names           WHERE MakeId IN              (SELECT Id               FROM cars_data               WHERE Weight > 3500))
index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
The SQL query for the question "In which years cars were produced weighing no less than 3000 and no more than 4000?" needs the table [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000
SELECT  DISTINCT Year  FROM cars_data  WHERE Weight BETWEEN 3000 AND 4000
index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
 The SQL query for the question "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighed more than 3000?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which years had cars produced that weighed less than 4000?", "Which years had cars produced that weighed more than 3000?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT Year FROM cars_data WHERE Weight > 3000
SELECT  Year  FROM cars_data  WHERE Weight < 4000  OR Weight > 3000
index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
The SQL query for the question "What is the horsepower of the car with the largest accelerate?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
SELECT  Horsepower  FROM cars_data  ORDER BY Accelerate DESC  LIMIT 1
index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
The SQL query for the question "What is the horsepower of the car with the greatest accelerate?" needs the table [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
SELECT  Horsepower  FROM cars_data  ORDER BY Accelerate DESC  LIMIT 1
index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
 The SQL query for the question "For model volvo, how many cylinders does the car with the least accelerate have?" needs these tables = [car_names, car_makers, cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T3.Cylinders FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId JOIN cars_data AS T3 ON T2.Model = T3.Maker WHERE T2.Maker = 'volvo' ORDER BY T3.Accelerate ASC LIMIT 1
SELECT T3.Cylinders  FROM car_names AS T1  JOIN model_list AS T2 ON T1.MakeId = T2.ModelId  JOIN cars_data AS T3 ON T1.MakeId = T3.Id  WHERE T2.Maker = 'volvo'  ORDER BY T3.Accelerate ASC  LIMIT 1
index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
The SQL query for the question "For a Volvo model, how many cylinders does the version with the least acceleration have?" needs these tables = [car_makers, model_list, cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT min(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = "volvo")
SELECT  min(Cylinders)  FROM cars_data  WHERE Id = (SELECT MakeId              FROM car_names              INNER JOIN model_list ON car_names.Model = model_list.Model             WHERE model_list.Maker = (SELECT Id                                        FROM car_makers                                        WHERE Maker = "volvo"))
index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
The SQL query for the question "How many cars have a larger accelerate than the car with the largest horsepower?" needs the table = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT  COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
The SQL query for the question "What is the number of cars with a greater accelerate than the one with the most horsepower?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT  COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
The SQL query for the question "How many countries has more than 2 car makers?" needs these tables = [countries, car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [COUNT(countries.CountryName)].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.Id) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING COUNT(DISTINCT T1.Id) > 2
SELECT  COUNT(DISTINCT T1.Country) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING COUNT(DISTINCT T1.Id) > 2
index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
The SQL query for the question "What is the number of countries with more than 2 car makers?" needs these tables = [countries, car_makers], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count( DISTINCT T1.CountryName) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Id HAVING COUNT(T2.Id) > 2
SELECT  COUNT(DISTINCT T1.CountryName)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING COUNT(T2.Id) > 2
index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
 The SQL query for the question "How many cars has over 6 cylinders?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 6
index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
The SQL query for the question "What is the number of cars with over 6 cylinders?" needs the table [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT  COUNT(*) FROM cars_data WHERE Cylinders > 6
index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
The SQL query for the question "For the cars with 4 cylinders, which model has the largest horsepower?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1
SELECT  model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1
index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
 The SQL query for the question "For all of the 4 cylinder cars, which model has the most horsepower?" needs these tables = [cars_data], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which model has the most horsepower among 4 cylinder cars?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1
SELECT  model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY cars_data.Horsepower DESC LIMIT 1
index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
The SQL query for the question "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name." needs these tables = [cars_data,car_makers], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cars have more than lowest horsepower and less than or equal to 3 cylinders?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE Horsepower > (SELECT min(Horsepower) FROM cars_data) AND Cylinders <= 3)
SELECT  car_makers.Id, car_makers.Maker  FROM car_makers  JOIN cars_data ON car_makers.Id = cars_data.Id  WHERE Horsepower > (SELECT min(Horsepower) FROM cars_data) AND Cylinders <= 3
index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
The SQL query for the question "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?" needs these tables = [car_makers, cars_data], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Make ids and names of cars with less than 4 cylinders"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 , cars_data AS T2 WHERE T2.Horsepower  >  (SELECT min(T3.Horsepower) FROM cars_data AS T3) AND T2.Cylinders  <  4
SELECT T1.Id, T1.Maker  FROM car_makers AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T3.Cylinders < 4
index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
The SQL query for the question "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?" needs the table = [cars_data], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
The SQL query for the question "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?" needs the table = [cars_data], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the maximum mpg of the cars that had 8 cylinders" and "Find the maximum mpg of the cars that were produced before 1980"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year < 1980
SELECT  MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
The SQL query for the question "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?" needs these tables = [cars_data,car_makers], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T4.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker != 'Ford Motor Company'
SELECT  DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker != 'Ford Motor Company'
index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
The SQL query for the question "What are the different models that are lighter than 3500 but were not built by the Ford Motor Company?" needs these tables = [model_list,cars_data,car_makers], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which models were built by Ford Motor Company?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.MakeId WHERE Weight < 3500 AND Maker != (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company')
SELECT  model_list.Model  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.MakeId  JOIN car_names ON car_names.Model = model_list.Model  JOIN car_makers ON car_makers.Id = car_names.MakeId  WHERE cars_data.Weight < 3500  AND car_makers.Maker != 'Ford Motor Company'
index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
 The SQL query for the question "What are the name of the countries where there is not a single car maker?" needs these tables = [countries,car_makers], so we need JOIN.
Plus, it requires nested queries with (IS NULL), and we need the answer to the questions = ["Which countries have no car makers?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT  CountryName  FROM countries  LEFT JOIN car_makers ON car_makers.Country = countries.CountryId WHERE car_makers.Id IS NULL
index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
 The SQL query for the question "What are the names of the countries with no car makers?" needs these tables = [countries,car_makers], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have car makers?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM car_makers)
SELECT  CountryName  FROM countries  WHERE CountryId NOT IN (SELECT Country FROM car_makers)
index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
 The SQL query for the question "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker." needs these tables = [car_makers, model_list], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List car makers that produce at least 2 models"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Id, Maker FROM car_makers GROUP BY Id, Maker HAVING COUNT(Id) >= 2
SELECT  Id, Maker  FROM car_makers  GROUP BY Maker  HAVING COUNT(Id) >= 2
index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
 The SQL query for the question "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?" needs tables [car_makers, model_list, cars_data], so we need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [car_makers.Id, car_makers.Maker].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Id,  T1.Maker FROM car_makers AS T1 JOIN (SELECT T3.Id, T2.Maker FROM cars_data AS T3 JOIN model_list AS T2 ON T3.Id = T2.MakeId GROUP BY Maker HAVING COUNT(DISTINCT T2.Model) > 1 AND SUM(DISTINCT T3.Id) > 3) AS T4 ON T1.Maker = T4.Maker
SELECT  T1.Id,  T1.Maker FROM car_makers AS T1  JOIN  (SELECT T1.Id, T1.Maker  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN car_names AS T3 ON T2.Model = T3.ModelId  GROUP BY T1.Id, T1.Maker  HAVING COUNT(DISTINCT T2.Model) > 1 AND SUM(T3.Id) > 3) AS T4  ON T1.Id = T4.Id
index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
The SQL query for the question "What are the id and names of the countries which have more than 3 car makers or produce the 'Fiat' model?" needs these tables = [countries, car_makers, car_names], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have more than 3 car makers?", "Which countries produce the Fiat model?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE count(DISTINCT car_makers.Id) > 3 UNION SELECT CountryId, CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'Fiat'
SELECT  CountryId, CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY CountryId, CountryName  HAVING COUNT(DISTINCT car_makers.Id) > 3 
index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
The SQL query for the question "What are the ids and names of all countries that either have more than 3 car makers or produce Fiat model?" needs these tables = [countries, car_makers, model_list], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have more than 3 car makers?" and "Which countries produce Fiat models?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 3) OR CountryId IN (SELECT Country FROM car_makers WHERE Id IN (SELECT Id FROM model_list WHERE Maker = 'Fiat'))
SELECT  CountryId, CountryName  FROM countries  WHERE CountryId IN      (SELECT Id       FROM car_makers       GROUP BY Country       HAVING COUNT(DISTINCT Id) > 3)  OR CountryId IN      (SELECT c.CountryId       FROM car_makers cm      JOIN model_list ml ON cm.Id = ml.Maker      JOIN car_names cn ON ml.Model = cn.Model      JOIN countries c ON cm.Country = c.CountryId      WHERE cm.Maker = 'Fiat')
index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
The SQL query for the question "Which country does Airline 'JetBlue Airways' belong to?" needs these tables = [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Country of JetBlue Airways"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT  airlines.Country  FROM airlines  WHERE Airline = 'JetBlue Airways'
index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
The SQL query for the question "What country is Jetblue Airways affiliated with?" needs these tables = [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT  airlines.Country FROM airlines WHERE Airline = 'Jetblue Airways'
index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
The SQL query for the question "What is the abbreviation of Airline 'JetBlue Airways'?" needs the tables [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [abbreviation].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT  Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
The SQL query for the question "Which abbreviation corresponds to Jetblue Airways?" needs these tables = [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT  Abbreviation  FROM airlines  WHERE Airline = 'Jetblue Airways'
index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
 The SQL query for the question "List all airline names and their abbreviations in "USA"." needs these tables = [airlines, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List all airline names and their abbreviations in "USA""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Airline, Abbreviation FROM airlines JOIN airports ON airlines.Country = airports.Country WHERE airports.Country = 'USA'
SELECT  airlines.Airline, airlines.Abbreviation  FROM airlines  JOIN airports ON airlines.Country = airports.Country  WHERE airports.Country = 'USA'
index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
 The SQL query for the question "What are the airline names and abbreviations for airlines in the USA?" needs these tables = [airlines, airports], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Airline, Abbreviation FROM airlines JOIN airports ON airlines.uid = airports.uid WHERE airports.Country = 'USA'
SELECT  airlines.Airline, airlines.Abbreviation  FROM airlines  JOIN airports ON airlines.uid = airports.uid  WHERE airports.Country = 'USA'
index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
The SQL query for the question "List the airport code and name in the city of Anthony." needs the table [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT  AirportCode, AirportName  FROM airports  WHERE City = 'Anthony'
index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
The SQL query for the question "Give the airport code and airport name corresponding to the city Anthony." needs the tables [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT  AirportCode, AirportName FROM airports WHERE City = 'Anthony'
index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
The SQL query for the question "How many airlines do we have?" needs the table = [airlines]. It doesn't require JOIN with other tables, and it doesn't need nested queries. We simply need to count the distinct values in the Airline column. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Airline) FROM airlines
SELECT  COUNT(DISTINCT Airline) FROM airlines
index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
The SQL query for the question "What is the total number of airlines?" only needs the table [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["total number of airlines"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM airlines
SELECT  COUNT(DISTINCT uid) FROM airlines
index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
 The SQL query for the question "How many airports do we have?" needs the table = [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(AirportCode) FROM airports
SELECT COUNT(DISTINCT AirportCode) FROM airports
index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
The SQL query for the question "Return the number of airports." doesn't need JOIN as it only involves one table = [airports]. 
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [number of airports]. 
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM airports
SELECT  COUNT(DISTINCT AirportCode) FROM airports
index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
The SQL query for the question "How many flights do we have?" needs the table = [flights], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM flights
SELECT  COUNT(*) FROM flights
index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
The SQL query for the question "Return the number of flights" needs the table [flights], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of flights"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM flights
SELECT  COUNT(*) FROM flights
index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
The SQL query for the question "Which airline has abbreviation 'UAL'?" needs the table [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Which airline has abbreviation 'UAL'?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
The SQL query for the question "Give the airline with abbreviation 'UAL'." needs the table [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT  Airline  FROM airlines  WHERE Abbreviation = 'UAL'
index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
The SQL query for the question "How many airlines are from USA?" needs the table [airlines], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many airlines are from USA?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT  COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'
index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
The SQL query for the question "Return the number of airlines in the USA." needs the tables = [airlines], so we don't need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of airlines in the USA"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'
index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
The SQL query for the question "Which city and country is the Alton airport at?" needs the tables [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Alton"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
 The SQL query for the question "Give the city and country for the Alton airport." needs these tables = [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT  City, Country FROM airports WHERE AirportName = 'Alton'
index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
 The SQL query for the question "What is the airport name for airport 'AKO'?" needs the table [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT  AirportName FROM airports WHERE AirportCode = 'AKO'
index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
The SQL query for the question "Return the name of the airport with code 'AKO'." needs the table = [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of the airport with code 'AKO'."].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT  AirportName FROM airports WHERE AirportCode = 'AKO'
index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
The SQL query for the question "What are airport names at City 'Aberdeen'?" needs the table = [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT  AirportName FROM airports WHERE City = 'Aberdeen'
index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
The SQL query for the question "What are the names of airports in Aberdeen?" needs the tables [airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer as the names of airports.
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT  AirportName FROM airports WHERE City = 'Aberdeen'
index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
The SQL query for the question "How many flights depart from 'APG'?" needs the tables = [flights], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many flights depart from 'APG'?"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'APG'
index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
The SQL query for the question "Count the number of flights departing from 'APG'." needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG'
SELECT  count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG'
index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
The SQL query for the question "How many flights have destination ATO?" needs the tables [flights, airports], so we need JOIN. 
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question on the number of flights, not any other additional information. 
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = "ATO"
SELECT  count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = "ATO"
index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
The SQL query for the question "Count the number of flights into ATO" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'ATO'
SELECT  count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'ATO'
index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
 The SQL query for the question "How many flights depart from City Aberdeen?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT  count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' GROUP BY airports.City
index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
The SQL query for the question "Return the number of flights departing from Aberdeen." needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of flights"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT  count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' GROUP BY flights.SourceAirport
index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
The SQL query for the question "How many flights arriving in Aberdeen city?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many flights arriving in Aberdeen city?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT  count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
The SQL query for the question "Return the number of flights arriving in Aberdeen." needs these tables = [flights, airports], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
 The SQL query for the question "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many flights depart from Aberdeen and arrive at Ashley?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' AND flights.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT  count(FlightNo)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND flights.SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')
index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
The SQL query for the question "How many flights fly from Aberdeen to Ashley?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT count(*)  FROM flights  WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
The SQL query for the question "How many flights does airline 'JetBlue Airways' have?" needs these tables = [flights], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of flights"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*)  FROM flights  WHERE Airline = 'JetBlue Airways'
index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
The SQL query for the question "Give the number of Jetblue Airways flights." needs these tables = [flights, airlines], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of flights"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE airlines.Airline = 'Jetblue Airways'
SELECT  COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'Jetblue Airways'
index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
 The SQL query for the question "How many 'United Airlines' flights go to Airport 'ASY'?" needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.Airline AND airlines.Airline = 'United Airlines' JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.DestAirport = 'ASY'
SELECT  count(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'
index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
The SQL query for the question "Count the number of United Airlines flights arriving in ASY Airport." needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
SELECT  COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
The SQL query for the question "How many 'United Airlines' flights depart from Airport 'AHD'?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many flights depart from Airport 'AHD' on 'United Airlines'?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
The SQL query for the question "Return the number of United Airlines flights leaving from AHD Airport." needs these tables = [flights,airlines,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of flights"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE flights.SourceAirport = 'AHD' AND airlines.Airline = 'United Airlines'
SELECT  COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE flights.SourceAirport = 'AHD' AND airlines.Airline = 'United Airlines'
index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
The SQL query for the question "How many United Airlines flights go to City 'Aberdeen'?" needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT  count(*)  FROM flights  WHERE Airline = 'United Airlines'  AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
 The SQL query for the question "Count the number of United Airlines flights that arrive in Aberdeen." needs the tables = [flights, airlines, airports], so we need JOIN.
Plus, it doesn't require nested queries and we need the answer to the question = ["number of United Airlines flights that arrive in Aberdeen"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(FlightNo) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT  COUNT(FlightNo) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'
index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
The SQL query for the question "Which city has the most number of arriving flights?" needs these tables = [airports,flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which city has the most number of arriving flights?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT City , COUNT(FlightNo) AS num_arriving_flights FROM airports JOIN flights ON AirportCode  =  DestAirport GROUP BY City ORDER BY num_arriving_flights DESC LIMIT 1
SELECT  airports.City, COUNT(flights.FlightNo) AS num_arriving_flights  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY num_arriving_flights DESC  LIMIT 1
index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
The SQL query for the question "Which city has the most frequent destination airport?" needs these tables = [airports, flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which city has the most frequent destination airport?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT City, COUNT(DestAirport) AS dest_count FROM airports JOIN flights ON AirportCode = DestAirport GROUP BY City ORDER BY dest_count DESC LIMIT 1
SELECT City, COUNT(DestAirport) AS dest_count  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY City  ORDER BY dest_count DESC  LIMIT 1
index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
The SQL query for the question "Which city has the most number of departing flights?" needs these tables = [airports,flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which city has the most number of departing flights?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT A.city , COUNT(F.FlightNo) AS flights_count FROM airports AS A JOIN flights AS F ON A.AirportCode =  F.SourceAirport GROUP BY A.city ORDER BY flights_count DESC LIMIT 1
SELECT  A.City, COUNT(F.FlightNo) AS flights_count  FROM airports AS A  JOIN flights AS F ON A.AirportCode = F.SourceAirport  GROUP BY A.City  ORDER BY flights_count DESC  LIMIT 1
index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
The SQL query for the question "Which city is the most frequent source airport?" needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT A.City, COUNT(F.SourceAirport) AS freq FROM flights AS F INNER JOIN airports AS A ON F.SourceAirport = A.AirportCode GROUP BY A.City ORDER BY freq DESC LIMIT 1
SELECT  A.City, COUNT(F.SourceAirport) AS freq  FROM flights AS F  INNER JOIN airports AS A ON F.SourceAirport = A.AirportCode  GROUP BY A.City  ORDER BY freq DESC  LIMIT 1
index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
The SQL query for the question "What is the code of the airport that has the highest number of flights?" needs these tables = [airports, flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT airports.AirportCode, COUNT(flights.FlightNo) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1
SELECT  airports.AirportCode, COUNT(flights.FlightNo) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1
index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
The SQL query for the question "What is the airport code of the airport with the most flights?" needs these tables = [airports, flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT SourceAirport as AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
SELECT SourceAirport as AirportCode  FROM flights  GROUP BY SourceAirport  ORDER BY COUNT(*) DESC  LIMIT 1
index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
The SQL query for the question "What is the code of airport that has fewest number of flights?" needs these tables = [airports, flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AirportCode, COUNT(FlightNo) as FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY FlightCount ASC LIMIT 1
SELECT  AirportCode, COUNT(FlightNo) as FlightCount  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  GROUP BY AirportCode  ORDER BY FlightCount ASC  LIMIT 1
index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
The SQL query for the question "Give the code of the airport with the least flights." needs these tables = [airports, flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY COUNT(FlightNo) ASC LIMIT 1
SELECT  AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY COUNT(FlightNo) ASC LIMIT 1
index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
The SQL query for the question "Which airline has the most number of flights?" needs these tables = [airlines, flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT airports.Airline, count(flights.*) AS flight_count FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.Airline ORDER BY flight_count DESC LIMIT 1
SELECT  airlines.Airline, count(flights.FlightNo) AS flight_count  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  ORDER BY flight_count DESC LIMIT 1
index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
 The SQL query for the question "What airline serves the most flights?" needs the tables [flights], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["What airline serves the most flights?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: EASY
questions not found in classification, setting SQL to SELECT
index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
The SQL query for the question "Find the abbreviation and country of the airline that has the fewest number of flights?" needs these tables = [airlines, flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the abbreviation and country of the airline?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Abbreviation ,  Country FROM airlines JOIN flights ON flights.Airline  =  airlines.uid GROUP BY airlines.uid ORDER BY COUNT(FlightNo) ASC LIMIT 1
SELECT Abbreviation, Country  FROM airlines  JOIN flights ON flights.Airline = airlines.uid  GROUP BY airlines.uid  ORDER BY COUNT(FlightNo) ASC  LIMIT 1
index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
The SQL query for the question "What is the abbreviation of the airline that has the fewest flights and what country is it in?" needs these tables = [airlines, flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Abbreviation, Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1
SELECT Abbreviation, Country  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.uid, Abbreviation, Country  ORDER BY COUNT(*) ASC  LIMIT 1
index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
 The SQL query for the question "What are airlines that have some flight departing from airport 'AHD'?" needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the airlines?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT  Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
The SQL query for the question "Which airlines have a flight with source airport AHD?" needs these tables = [airlines, flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airlines have flights with source airport AHD?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.uid WHERE T2.SourceAirport  =  'AHD'
SELECT  T1.Airline  FROM airlines AS T1  INNER JOIN flights AS T2 ON T1.uid = T2.Airline  WHERE T2.SourceAirport = 'AHD'
index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
The SQL query for the question "What are airlines that have flights arriving at airport 'AHD'?" needs these tables = [airlines,flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are airlines that have flights arriving at airport 'AHD'?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT  DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'
index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
The SQL query for the question "Which airlines have a flight with destination airport AHD?" needs these tables = [airlines,flights,airports], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.uid INNER JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = 'AHD'
SELECT  airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  INNER JOIN airports ON airports.AirportCode = flights.DestAirport  WHERE airports.AirportCode = 'AHD'
index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
The SQL query for the question "Find all airlines that have flights from both airports 'APG' and 'CVO'." needs these tables = [flights], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find all airlines that have flights from APG"] and ["Find all airlines that have flights from CVO"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT DISTINCT Airline FROM flights WHERE SourceAirport  =  'CVO'
SELECT  Airline FROM flights WHERE SourceAirport = 'APG' OR SourceAirport = 'CVO' GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2
index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
The SQL query for the question "Which airlines have departing flights from both APG and CVO airports?" needs these tables = [flights, airports], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airlines have departing flights from APG airport?"], ["Which airlines have departing flights from CVO airport?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2
SELECT  Airline  FROM flights  WHERE SourceAirport IN ('APG', 'CVO')  GROUP BY Airline  HAVING COUNT(DISTINCT SourceAirport) = 2
index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
 The SQL query for the question "Find all airlines that have flights from airport 'CVO' but not from 'APG'" needs these tables = [flights,airports], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find all airlines that have flights from airport 'CVO'"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT Airline FROM flights WHERE SourceAirport  =  'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport  =  'APG')
SELECT  DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')
index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
The SQL query for the question "Which airlines have departures from CVO but not from APG airports?" needs these tables = [flights, airports], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airlines have departures from APG airports?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT distinct Airline FROM flights WHERE SourceAirport  =  'CVO' AND Airline NOT IN (SELECT distinct Airline FROM flights WHERE SourceAirport  =  'APG')
SELECT Airline  FROM flights  WHERE SourceAirport = 'CVO'  AND Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO'                 EXCEPT                 SELECT Airline FROM flights WHERE SourceAirport = 'APG')
index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
The SQL query for the question "Find all airlines that have at least 10 flights." needs these tables = [airlines,flights], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) >= 10
SELECT  A.Airline  FROM airlines AS A  JOIN flights AS F ON A.uid = F.Airline  GROUP BY A.Airline  HAVING COUNT(*) >= 10
index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
The SQL query for the question "Which airlines have at least 10 flights?" needs these tables = [airlines,flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airlines have at least 10 flights"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10
SELECT  airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING COUNT(*) >= 10
index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
 The SQL query for the question "Find all airlines that have fewer than 200 flights." needs these tables = [airlines,flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) < 200
SELECT  T1.Airline  FROM airlines AS T1  JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.Airline  HAVING COUNT(T2.FlightNo) < 200
index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
 The SQL query for the question "Which airlines have less than 200 flights?" needs these tables = [airlines,flights], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) < 200
SELECT  T1.Airline  FROM airlines AS T1  INNER JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.Airline  HAVING COUNT(*) < 200
index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
The SQL query for the question "What are flight numbers of Airline 'United Airlines'?" needs these tables = [flights, airlines], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Flight numbers of Airline 'United Airlines'"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE airlines.Airline = 'United Airlines'
SELECT  flights.FlightNo  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'United Airlines'
index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
The SQL query for the question "Which flight numbers correspond to United Airlines flights?" needs these tables = [flights, airlines], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["United Airlines flight numbers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT  FlightNo   FROM flights   JOIN airlines ON flights.Airline = airlines.Abbreviation   WHERE airlines.Airline = 'United Airlines'
index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
The SQL query for the question "What are flight numbers of flights departing from Airport "APG"?" needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Flight numbers of flights departing from Airport "APG"".
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = "APG"
SELECT  flights.FlightNo FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = "APG"
index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
The SQL query for the question "Give the flight numbers of flights leaving from APG." needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT  FlightNo FROM flights WHERE SourceAirport = 'APG'
index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
 The SQL query for the question "What are flight numbers of flights arriving at Airport "APG"?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights WHERE DestAirport  =  'APG'
SELECT  FlightNo  FROM flights  WHERE DestAirport = 'APG'
index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
The SQL query for the question "Give the flight numbers of flights landing at APG." needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE AirportName = 'APG';
SELECT  flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
The SQL query for the question "What are flight numbers of flights departing from City "Aberdeen"?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT  flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
 The SQL query for the question "Give the flight numbers of flights leaving from Aberdeen." needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT  flights.FlightNo FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
The SQL query for the question "What are flight numbers of flights arriving at City "Aberdeen"?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the flight numbers of the flights arriving at Aberdeen?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT  flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
 The SQL query for the question "Give the flight numbers of flights arriving in Aberdeen." needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'
SELECT  flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
The SQL query for the question "Find the number of flights landing in the city of Aberdeen or Abilene." needs these tables = [flights,airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of flights landing in Aberdeen or Abilene."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT  COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
The SQL query for the question "How many flights land in Aberdeen or Abilene?" needs these tables = [flights, airports], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many flights land in Aberdeen or Abilene?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene'
SELECT  COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene'
index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
The SQL query for the question "Find the name of airports which do not have any flight in and out." needs these tables = [airports, flights], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airports have flights in and out?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED". 
Label: "NESTED"
NESTED
SELECT AirportName FROM airports WHERE AirportName NOT IN (SELECT DISTINCT AirportName FROM airports JOIN flights ON airports.AirportCode  =  flights.SourceAirport OR airports.AirportCode  =  flights.DestAirport)
SELECT  AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
 The SQL query for the question "Which airports do not have departing or arriving flights?" needs tables = [airports, flights], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which airports have departing or arriving flights?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
SELECT AirportCode FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
index is 259
SELECT count(*) FROM employee
How many employees are there?
The SQL query for the question "How many employees are there?" needs the table = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM employee
SELECT  COUNT(*) FROM employee
index is 260
SELECT count(*) FROM employee
Count the number of employees
The SQL query for the question "Count the number of employees" needs only the table [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of employees"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Employee_ID) FROM employee
SELECT  COUNT(Employee_ID) FROM employee
index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
The SQL query for the question "Sort employee names by their age in ascending order." needs the table [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Sort employee names by their age in ascending order."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM employee ORDER BY Age ASC
SELECT  Name FROM employee ORDER BY Age ASC
index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
The SQL query for the question "List the names of employees and sort in ascending order of age." needs the table = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM employee ORDER BY Age ASC
SELECT  Name FROM employee ORDER BY Age ASC
index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
The SQL query for the question "What is the number of employees from each city?" needs these tables = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of employees from each city"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT  City, COUNT(Employee_ID)  FROM employee  GROUP BY City
index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
 The SQL query for the question "Count the number of employees for each city" needs the table = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of employees for each city"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT  City, COUNT(Employee_ID)  FROM employee  GROUP BY City
index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
 The SQL query for the question "Which cities do more than one employee under age 30 come from?" needs these tables = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1
SELECT  City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1
index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
 The SQL query for the question "Find the cities that have more than one employee under age 30." needs these tables = [employee], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT  City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
The SQL query for the question "Find the number of shops in each location." needs the table = [shop], so we don't need JOIN.
Plus, it requires an aggregate function (COUNT) but doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location
SELECT Location, COUNT(DISTINCT Shop_ID)  FROM shop  GROUP BY Location
index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
The SQL query for the question "How many shops are there in each location?" needs the table = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Location, COUNT(*) AS num_shops FROM shop GROUP BY Location
SELECT Location, COUNT(Shop_ID) AS num_shops FROM shop GROUP BY Location
index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
The SQL query for the question "Find the manager name and district of the shop whose number of products is the largest." needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1
SELECT  Manager_name, District  FROM shop  ORDER BY Number_products DESC  LIMIT 1
index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
 The SQL query for the question "What are the manager name and district of the shop that sells the largest number of products?" needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1
SELECT  Manager_name, District  FROM shop  WHERE Shop_ID = (SELECT Shop_ID FROM shop ORDER BY Number_products DESC LIMIT 1)
index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
The SQL query for the question "find the minimum and maximum number of products of all stores." needs these tables = [shop], so we don't need JOIN. Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["minimum number of products", "maximum number of products"]. So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY". Label: "EASY"
EASY
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT  MIN(Number_products), MAX(Number_products) FROM shop
index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
The SQL query for the question "What are the minimum and maximum number of products across all the shops?" needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["minimum number of products", "maximum number of products"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT  MIN(Number_products), MAX(Number_products) FROM shop
index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
The SQL query for the question "Return the name, location and district of all shops in descending order of number of products." needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT  Name, Location, District FROM shop ORDER BY Number_products DESC
index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
The SQL query for the question "Sort all the shops by number products in descending order, and return the name, location and district of each shop." needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name, location, district of each shop"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, location, district FROM shop ORDER BY Number_products DESC
SELECT  name, location, district FROM shop ORDER BY Number_products DESC
index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
The SQL query for the question "Find the names of stores whose number of products is more than the average number of products." needs these tables = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM shop WHERE Number_products  >  (SELECT AVG(Number_products) FROM shop)
SELECT  Name FROM shop GROUP BY Name HAVING Number_products > (SELECT AVG(Number_products) FROM shop)
index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
The SQL query for the question "Which shops' number products is above the average? Give me the shop names." needs these tables = [shop], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Calculate the average number of products in shops"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
The SQL query for the question "find the name of employee who was awarded the most times in the evaluation." needs these tables = [employee, evaluation], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count(*) DESC LIMIT 1
SELECT  T1.Name  FROM employee AS T1  JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY COUNT(T2.Employee_ID) DESC  LIMIT 1
index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
The SQL query for the question "Which employee received the most awards in evaluations? Give me the employee name." needs these tables = [evaluation,employee], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["employee name"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY Year_awarded DESC LIMIT 1
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Name  ORDER BY COUNT(*) DESC  LIMIT 1
index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
 The SQL query for the question "Find the name of the employee who got the highest one time bonus." needs these tables = [employee,evaluation], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name 
FROM employee 
INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID 
ORDER BY Bonus DESC LIMIT 1
SELECT  employee.Name FROM employee  INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  ORDER BY evaluation.Bonus DESC LIMIT 1
index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
The SQL query for the question "Which employee received the biggest bonus? Give me the employee name." needs these tables = [employee,evaluation], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which employee received the biggest bonus?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT employee.Name FROM evaluation, employee WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation) AND evaluation.Employee_ID = employee.Employee_ID
SELECT  employee.Name  FROM evaluation  JOIN employee ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
The SQL query for the question "Find the names of employees who never won any award in the evaluation." needs these tables = [employee, evaluation], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which employees won awards in evaluation?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT  employee.Name  FROM employee  LEFT JOIN evaluation  ON employee.Employee_ID = evaluation.Employee_ID  WHERE evaluation.Employee_ID IS NULL
index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
The SQL query for the question "What are the names of the employees who never received any evaluation?" needs these tables = [employee,evaluation], so we should use JOIN.
Furthermore, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN) to find employees who never received any evaluation, and we need the answer to the questions = ["What are the names of the employees"].
Therefore, we need JOIN and need nested queries, which classifies this SQL query as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT  Name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
The SQL query for the question "What is the name of the shop that is hiring the largest number of employees?" needs these tables = [shop, hiring], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name ORDER BY count(Employee_ID) DESC LIMIT 1
SELECT  T1.Name  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name  ORDER BY COUNT(T2.Employee_ID) DESC  LIMIT 1
index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
The SQL query for the question "Which shop has the most employees? Give me the shop name." needs these tables = [shop,employee], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which shop has the most employees?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name, COUNT(Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Name ORDER BY COUNT(Employee_ID) DESC LIMIT 1
SELECT  Name, COUNT(employee.Employee_ID)  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Shop_ID  ORDER BY COUNT(employee.Employee_ID) DESC  LIMIT 1
index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
The SQL query for the question "Find the name of the shops that do not hire any employee." needs these tables = [shop, hiring], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which shops hire employees?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT  Name  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
The SQL query for the question "Which shops run with no employees? Find the shop names" needs these tables = [shop,hiring], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the shop names"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT  s.Name  FROM shop s  LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID  WHERE h.Employee_ID IS NULL
index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
The SQL query for the question "Find the number of employees hired in each shop; show the shop name as well." needs these tables = [hiring,shop], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(T2.Employee_ID) ,  T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Name
SELECT  COUNT(T2.Employee_ID) ,  T1.Name  FROM shop AS T1  LEFT JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID  GROUP BY T1.Shop_ID, T1.Name
index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
The SQL query for the question "For each shop, return the number of employees working there and the name of the shop." needs these tables = [employee, hiring, shop], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of employees working at each shop and the name of the shop"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(Employee_ID) AS num_employees, Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY Name
SELECT  COUNT(employee.Employee_ID) AS num_employees, shop.Name  FROM employee  JOIN hiring ON employee.Employee_ID = hiring.Employee_ID  JOIN shop ON hiring.Shop_ID = shop.Shop_ID  GROUP BY shop.Name
index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
The SQL query for the question "What is the total bonus given in all evaluations?" needs these tables = [evaluation], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
The SQL query for the question "Find the total amount of bonus given in all the evaluations." needs these tables = [evaluation], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Bonus) FROM evaluation
SELECT  SUM(Bonus) FROM evaluation
index is 291
SELECT * FROM hiring
Give me all the information about hiring.
The SQL query for the question "Give me all the information about hiring." needs the table = [hiring], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM hiring
SELECT  * FROM hiring
index is 292
SELECT * FROM hiring
What is all the information about hiring?
The SQL query for the question "What is all the information about hiring?" needs these tables = [hiring], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM hiring
SELECT  *  FROM hiring
index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
 The SQL query for the question "Which district has both stores with less than 3000 products and stores with more than 10000 products?" needs these tables = [shop], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the districts with stores that have more than 10000 products"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT District FROM shop WHERE Number_products < 3000  INTERSECT SELECT District FROM shop WHERE Number_products > 10000
SELECT  District FROM shop GROUP BY District HAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000
index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
The SQL query for the question "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products." needs these tables = [shop], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the districts with shops selling less than 3000 products"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT District FROM shop WHERE Number_products < 3000 AND District IN (SELECT District FROM shop WHERE Number_products > 10000)
SELECT  District  FROM shop  GROUP BY District  HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0
index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
The SQL query for the question "How many different store locations are there?" needs the table = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["number of different store locations"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Location) FROM shop
SELECT  COUNT(DISTINCT Location) FROM shop
index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
 The SQL query for the question "Count the number of distinct store locations." needs the table = [shop], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Location) FROM shop
SELECT  COUNT(DISTINCT Location) FROM shop
index is 297
SELECT count(*) FROM Documents
How many documents do we have?
The SQL query for the question "How many documents do we have?" needs only the table [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["number of documents"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Document_ID) FROM Documents
SELECT  COUNT(DISTINCT Document_ID) FROM Documents
index is 298
SELECT count(*) FROM Documents
Count the number of documents.
Slicing error for the schema_linking module
The SQL query for the question "Count the number of documents." needs the table = [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Documents
SELECT  COUNT(DISTINCT Document_ID) FROM Documents
index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
 The SQL query for the question "List document IDs, document names, and document descriptions for all documents." needs the table = [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List document IDs, document names, and document descriptions for all documents."].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT  Document_ID, Document_Name, Document_Description  FROM Documents
index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
The SQL query for the question "What are the ids, names, and descriptions for all documents?" needs the table "Documents", so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [Document_ID, Document_Name, Document_Description].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT  Document_ID, Document_Name, Document_Description  FROM Documents
index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
The SQL query for the question "What is the document name and template id for document with description with the letter 'w' in it?" needs these tables = [Documents], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the document descriptions with the letter 'w' in it."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT  Document_Name, Template_ID  FROM Documents  WHERE Document_Description LIKE '%w%'
index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
 The SQL query for the question "Return the names and template ids for documents that contain the letter w in their description." needs these tables = [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Names and template ids for documents that contain the letter w in their description."].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT  Document_Name, Template_ID  FROM Documents  WHERE Document_Description LIKE '%w%'
index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
 The SQL query for the question "What is the document id, template id and description for document named "Robbin CV"?" needs these tables = [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV"
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = "Robbin CV"
index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
The SQL query for the question "Return the document id, template id, and description for the document with the name Robbin CV." needs these tables = [Documents, Templates, Ref_Template_Types], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [Document ID, Template ID, Description].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Robbin CV'
SELECT  Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.Template_Type_Description  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Documents.Document_Name = 'Robbin CV'
index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
 The SQL query for the question "How many different templates do all documents use?" needs these tables = [Documents, Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different templates do all documents use?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT T2.Template_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID
SELECT  count(DISTINCT T2.Template_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID
index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
The SQL query for the question "Count the number of different templates used for documents." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of different templates used for documents"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT Template_ID) FROM Templates
SELECT  count(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
The SQL query for the question "How many documents are using the template with type code 'PPT'?" needs these tables = [Documents,Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many documents are using the template with type code 'PPT'?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
SELECT  COUNT(DISTINCT T1.Document_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
The SQL query for the question "Count the number of documents that use the PPT template type." needs these tables = [Documents, Ref_Template_Types], so we need to JOIN them.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Documents JOIN Ref_Template_Types ON Documents.Template_ID = Ref_Template_Types.Template_ID WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT  count(*)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
The SQL query for the question "Show all template ids and number of documents using each template." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Template ID", "Number of Documents"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_ID , count(T2.Document_ID) FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID
SELECT  T1.Template_ID, COUNT(DISTINCT T2.Document_ID)  FROM Templates AS T1  LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID
index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
The SQL query for the question "What are all different template ids used for documents, and how many times were each of them used?" needs these tables = [Documents], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_ID, COUNT(Template_ID) FROM Documents GROUP BY Template_ID
SELECT  Template_ID, COUNT(Template_ID)  FROM Documents  GROUP BY Template_ID
index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
The SQL query for the question "What is the id and type code for the template used by the most documents?" needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_ID , Template_Type_Code FROM Templates GROUP BY Template_ID , Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_ID, Template_Type_Code  FROM Templates  GROUP BY Template_ID, Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1
index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
 The SQL query for the question "Return the id and type code of the template that is used for the greatest number of documents." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY count(Documents.Template_ID) DESC LIMIT 1
SELECT  Templates.Template_ID, Templates.Template_Type_Code  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
The SQL query for the question "Show ids for all templates that are used by more than one document." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show ids for all templates."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(DISTINCT T2.Document_ID) > 1
SELECT  T1.Template_ID  FROM Templates AS T1  JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID  HAVING COUNT(DISTINCT T2.Document_ID) > 1
index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
 The SQL query for the question "What are the template ids of any templates used in more than a single document?" needs these tables = [Templates,Documents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which template ids are used in more than a single document?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT Templates.Template_ID FROM Documents WHERE Templates.Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Template_ID) > 1)
SELECT  DISTINCT Documents.Template_ID  FROM Documents  GROUP BY Documents.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1
index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
The SQL query for the question "Show ids for all templates not used by any document." needs these tables = [Templates,Documents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show ids for all templates used by documents"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Templates.Template_ID FROM Templates WHERE NOT EXISTS (SELECT Documents.Template_ID FROM Documents WHERE Templates.Template_ID = Documents.Template_ID)
SELECT Templates.Template_ID  FROM Templates  WHERE NOT EXISTS  (SELECT Documents.Template_ID  FROM Documents  WHERE Templates.Template_ID = Documents.Template_ID)
index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
The SQL query for the question "What are the ids for templates that are not used in any documents?" needs these tables = [Templates, Documents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which templates are used in documents?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT  Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
index is 317
SELECT count(*) FROM Templates
How many templates do we have?
The SQL query for the question "How many templates do we have?" needs the "Templates" table, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Template_ID) FROM Templates
SELECT COUNT(DISTINCT Template_ID) FROM Templates
index is 318
SELECT count(*) FROM Templates
Count the number of templates.
The SQL query for the question "Count the number of templates" needs the table [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Number of templates"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Template_ID) FROM Templates
SELECT  COUNT(DISTINCT Template_ID) FROM Templates
index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
 The SQL query for the question "Show template ids, version numbers, and template type codes for all templates." needs these tables = [Templates, Ref_Template_Types], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT  Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
 The SQL query for the question "What are the ids, version numbers, and type codes for each template?" needs these tables = [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
 The SQL query for the question "Show all distinct template type codes for all templates." needs these tables = [Ref_Template_Types,Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show all distinct template type codes"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code
SELECT  DISTINCT T1.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code
index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
The SQL query for the question "What are the different template type codes?" needs these tables = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Template_Type_Code FROM Ref_Template_Types
index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
The SQL query for the question "What are the ids of templates with template type code PP or PPT?" needs these tables = [Templates,Ref_Template_Types], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["ids of templates with template type code PP", "ids of templates with template type code PPT"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
SELECT  Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT')
index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
 The SQL query for the question "Return the ids of templates that have the code PP or PPT." needs these tables = [Templates], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which templates have the code PP or PPT?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT  DISTINCT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT')
index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
 The SQL query for the question "How many templates have template type code CV?" needs these tables = [Templates, Ref_Template_Types], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many templates have template type code CV?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(DISTINCT Templates.Template_ID)  FROM Templates  WHERE Templates.Template_Type_Code = 'CV'
index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
 The SQL query for the question "Count the number of templates of the type CV." needs these tables = [Templates,Ref_Template_Types], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count the number of templates"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "CV"
SELECT  COUNT(Templates.Template_ID) FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = "CV"
index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
 The SQL query for the question "What is the version number and template type code for the template with version number later than 5?" needs these tables = [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT  Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5
index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
The SQL query for the question "Return the version numbers and template type codes of templates with a version number greater than 5." needs these tables = [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Version numbers and template type codes of templates with a version number greater than 5."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT  Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5
index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
 The SQL query for the question "Show all template type codes and number of templates for each." needs these tables = [Ref_Template_Types,Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_Type_Code, count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code, count(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
The SQL query for the question "What are the different template type codes, and how many templates correspond to each?" needs these tables = [Ref_Template_Types,Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Different template type codes and the count of templates for each type"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
 The SQL query for the question "Which template type code has the most number of templates?" needs these tables = [Ref_Template_Types,Templates], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which template type code has the most number of templates?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_Type_Code ,COUNT(T1.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Template_ID) DESC LIMIT 1
SELECT  Template_Type_Code ,COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  ORDER BY COUNT(T2.Template_ID) DESC  LIMIT 1
index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
The SQL query for the question "Return the type code of the template type that the most templates belong to." needs these tables = [Ref_Template_Types, Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT  T1.Template_Type_Code  FROM Ref_Template_Types AS T1  INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  ORDER BY COUNT(T2.Template_ID) DESC LIMIT 1
index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
The SQL query for the question "Show all template type codes with less than three templates." needs these tables = [Ref_Template_Types,Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show all template type codes"]. 
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID)  <  3
SELECT  T1.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  HAVING COUNT(DISTINCT T2.Template_ID) < 3
index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
The SQL query for the question "What are the codes of template types that have fewer than 3 templates?" needs these tables = [Ref_Template_Types, Templates], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Codes of template types with fewer than 3 templates"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3
SELECT  Template_Type_Code  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  HAVING COUNT(Templates.Template_ID) < 3
index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
 The SQL query for the question "What the smallest version number and its template type code?" needs these tables = [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Version_Number, Template_Type_Code FROM Templates ORDER BY Version_Number ASC LIMIT 1
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code  FROM Templates  GROUP BY Template_Type_Code ORDER BY Smallest_Version_Number ASC LIMIT 1
index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
The SQL query for the question "Return the lowest version number, along with its corresponding template type code." needs these tables = [Templates], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Version_Number, Template_Type_Code FROM Templates ORDER BY Version_Number ASC LIMIT 1
SELECT  Version_Number, Template_Type_Code  FROM Templates  ORDER BY Version_Number ASC  LIMIT 1
index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
 The SQL query for the question "What is the template type code of the template used by document with the name "Data base"?" needs these tables = [Templates,Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["template type code of the template used by document with the name "Data base""]. So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT  Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = "Data base"
index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
The SQL query for the question "Return the template type code of the template that is used by a document named Data base." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT  Templates.Template_Type_Code  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Document_Name = "Data base"
index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
The SQL query for the question "Show all document names using templates with template type code BK." needs these tables = [Documents, Templates, Ref_Template_Types], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["All document names using template type code BK."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Template_Type_Code = 'BK'
SELECT  Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
The SQL query for the question "What are the names of documents that use templates with the code BK?" needs these tables = [Documents, Templates], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Document_Name FROM Documents JOIN Templates ON Document_ID  =  Templates.Document_ID WHERE Template_Type_Code  =  'BK'
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
 The SQL query for the question "Show all template type codes and the number of documents using each type" needs these tables = [Ref_Template_Types, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["template type codes and the number of documents using each type"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Template_Type_Code , count(T3.Document_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T3.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code
SELECT  T1.Template_Type_Code , count(T3.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code
index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
The SQL query for the question "What are the different template type codes, and how many documents use each type?" needs these tables = [Ref_Template_Types,Documents], so we need JOIN.
Plus, it requires nested queries with COUNT, and we need the answer to the questions = ["What are the different template type codes?", "How many documents use each type?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Distinct Documents.Document_ID) FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID)  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Ref_Template_Types.Template_Type_Code
index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
 The SQL query for the question "Which template type code is used by most number of documents?" needs these tables = [Ref_Template_Types,Documents,Templates], so we need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which template type code is used by the most number of documents?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Document_ID) DESC LIMIT 1
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1
index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
The SQL query for the question "Return the code of the template type that is most commonly used in documents." needs these tables = [Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Templates.Template_Type_Code FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1
index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
The SQL query for the question "Show all template type codes that are not used by any document." needs these tables = [Ref_Template_Types, Templates, Documents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What template type codes are used by documents?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN (SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID)
SELECT  T1.Template_Type_Code  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID  WHERE T3.Template_ID IS NULL
index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
 The SQL query for the question "What are the codes of template types that are not used for any document?" needs these tables = [Ref_Template_Types, Documents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which template types are used for documents?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
 The SQL query for the question "Show all template type codes and descriptions." needs these tables = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT  Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types
index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
The SQL query for the question "What are the type codes and descriptions for all template types?" needs the table = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
The SQL query for the question "What is the template type descriptions for template type code "AD"?" needs the tables [Ref_Template_Types], so we don't need JOIN.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question ["Template Type Descriptions"].
Therefore, we don't need JOIN and don't need nested queries, making the SQL query classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"
SELECT  Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"
index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
The SQL query for the question "Return the template type description of the template type with the code AD." needs these tables = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Template type description of the template type with the code AD."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT  Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
The SQL query for the question "What is the template type code for template type description 'Book'." needs the tables = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
The SQL query for the question "Return the type code of the template type with the description 'Book'." needs the table = [Ref_Template_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description  =  'Book'
SELECT  Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
The SQL query for the question "What are the distinct template type descriptions for the templates ever used by any document?" needs these tables = [Ref_Template_Types, Templates, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
SELECT  DISTINCT T1.Template_Type_Description  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
The SQL query for the question "Return the different descriptions for templates that have been used in a document." needs these tables = [Ref_Template_Types, Documents], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T3.Template_ID = T2.Template_ID
SELECT  DISTINCT T1.Template_Type_Description  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
The SQL query for the question "What are the template ids with template type description "Presentation"." needs these tables = [Templates,Ref_Template_Types], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Template IDs with template type description 'Presentation'"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code  =  Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description  =  "Presentation"
SELECT  Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = "Presentation"
index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
The SQL query for the question "Return the ids corresponding to templates with the description 'Presentation'" needs these tables = [Templates, Ref_Template_Types]. So, we don't need JOIN for this query.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Template_IDs"].
Therefore, we don't need JOIN and don't need nested queries, so the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Template_ID FROM Templates
JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
WHERE Template_Type_Description = 'Presentation'
SELECT  Templates.Template_ID  FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = 'Presentation'
index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
The SQL query for the question "How many paragraphs in total?" only requires the table [Paragraphs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Total number of paragraphs"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT  COUNT(DISTINCT Paragraph_ID) FROM Paragraphs
index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
The SQL query for the question "Count the number of paragraphs." needs these tables = [Paragraphs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Paragraphs
SELECT  COUNT(Paragraph_ID) FROM Paragraphs
index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
The SQL query for the question "How many paragraphs for the document with name 'Summer Show'?" needs these tables = [Paragraphs,Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many paragraphs for the document with name 'Summer Show'?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT  count(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
The SQL query for the question "Count the number of paragraphs in the document named 'Summer Show'." needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many paragraphs are there in the document named 'Summer Show'?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT  COUNT(Paragraph_ID)  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
The SQL query for the question "Show paragraph details for paragraph with text 'Korea'." requires the table "Paragraphs", so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT  * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
The SQL query for the question "What are the details for the paragraph that includes the text 'Korea'?" needs the table [Paragraphs], so we don't need JOIN.
Plus, it requires nested queries with the LIKE operator to search for the text 'Korea', and we need the answer to the questions = ["What are the details for the paragraph?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT  * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
 The SQL query for the question "Show all paragraph ids and texts for the document with name 'Welcome to NY'." needs these tables = [Paragraphs, Documents], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Paragraph IDs and texts for the document with name 'Welcome to NY'."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Paragraph_ID ,  Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY'
SELECT  Paragraph_ID, Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Document_Name = 'Welcome to NY'
index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
 The SQL query for the question "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?" needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Paragraph_ID, Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Document_Name = 'Welcome to NY'
SELECT  Paragraph_ID, Paragraph_Text  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Document_Name = 'Welcome to NY'
index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
The SQL query for the question "Show all paragraph texts for the document 'Customer reviews'" needs these tables = [Paragraphs, Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["All paragraph texts for the document 'Customer reviews'."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
 The SQL query for the question "What are the paragraph texts for the document with the name 'Customer reviews'?" needs these tables = [Paragraphs,Documents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Paragraph texts for the document 'Customer reviews'"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT  Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
The SQL query for the question "Show all document ids and the number of paragraphs in each document. Order by document id" needs these tables = [Documents, Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Document IDs and number of paragraphs"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT  T1.Document_ID, COUNT(T2.Paragraph_ID)  FROM Documents AS T1  LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY T1.Document_ID
index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
 The SQL query for the question "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id." needs these tables = [Documents, Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT  T1.Document_ID, COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT  T1.Document_ID, COUNT(T2.Paragraph_ID)  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY T1.Document_ID
index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
The SQL query for the question "Show all document ids, names and the number of paragraphs in each document." needs these tables = [Documents, Paragraphs], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Document IDs, Names, Number of Paragraphs"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID
SELECT  Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
The SQL query for the question "What are the ids and names of each document, as well as the number of paragraphs in each?" needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["ids, names of each document and number of paragraphs in each"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Document_ID ,  T1.Document_Name ,  count(T2.Document_ID) as num_paragraphs FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID
SELECT  T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) as num_paragraphs  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID, T1.Document_Name
index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
 The SQL query for the question "List all document ids with at least two paragraphs." needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of document IDs with at least two paragraphs"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
SELECT  Document_ID  FROM Paragraphs  GROUP BY Document_ID  HAVING COUNT(Paragraph_ID) >= 2
index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
The SQL query for the question "What are the ids of documents that have 2 or more paragraphs?" needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which documents have more than 2 paragraphs?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2
SELECT  Document_ID  FROM Paragraphs  GROUP BY Document_ID  HAVING COUNT(*) >= 2
index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
The SQL query for the question "What is the document id and name with greatest number of paragraphs?" involves counting the number of paragraphs for each document, so it requires a nested query to calculate the count. However, it does not involve any JOIN operation. Therefore, the SQL query can be classified as "NESTED."
Label: "NESTED"
questions not found in classification, setting SQL to SELECT
index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
 The SQL query for the question "Return the id and name of the document with the most paragraphs." needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1) AS max_paragraphs ON T1.Document_ID = max_paragraphs.Document_ID
SELECT  T1.Document_ID ,  T1.Document_Name  FROM Documents AS T1  JOIN (SELECT Document_ID        FROM Paragraphs        GROUP BY Document_ID        ORDER BY COUNT(Paragraph_ID) DESC        LIMIT 1) AS max_paragraphs  ON T1.Document_ID = max_paragraphs.Document_ID  GROUP BY T1.Document_ID, T1.Document_Name
index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
The SQL query for the question "What is the document id with the least number of paragraphs?" needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Document_ID, COUNT(Paragraph_ID) AS paragraph_count FROM Paragraphs GROUP BY Document_ID ORDER BY paragraph_count ASC LIMIT 1
SELECT  Document_ID, COUNT(Paragraph_ID) AS paragraph_count  FROM Paragraphs  GROUP BY Document_ID  ORDER BY paragraph_count ASC  LIMIT 1
index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
The SQL query for the question "Return the id of the document with the fewest paragraphs." needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Document_ID FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(T2.Paragraph_ID) ASC LIMIT 1
SELECT  T1.Document_ID  FROM Documents AS T1  LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY COUNT(T2.Paragraph_ID) ASC  LIMIT 1
index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
 The SQL query for the question "What is the document id with 1 to 2 paragraphs?" needs these tables = [Documents, Paragraphs], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the documents with 1 paragraph", "Find the documents with 2 paragraphs"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
(SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) = 1) UNION (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) = 2)
SELECT  Document_ID  FROM Paragraphs  GROUP BY Document_ID  HAVING COUNT(*) BETWEEN 1 AND 2
index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
The SQL query for the question "Give the ids of documents that have between one and two paragraphs." needs these tables = [Documents,Paragraphs], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2
SELECT  Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2
index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
 The SQL query for the question "Show the document id with paragraph text 'Brazil' and 'Ireland'." needs these tables = [Documents,Paragraphs], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the document id with paragraph text 'Brazil'", "Show the document id with paragraph text 'Ireland'"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%')
SELECT  Document_ID  FROM Paragraphs  WHERE Paragraph_Text = 'Brazil'  AND Document_ID IN      (SELECT Document_ID       FROM Paragraphs       WHERE Paragraph_Text = 'Ireland')
index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
The SQL query for the question "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?" needs these tables = [Documents,Paragraphs], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the ids of documents that contain the paragraph text 'Brazil'"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
(SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text  =  'Brazil') INTERSECT (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text  =  'Ireland')
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland')
index is 381
SELECT count(*) FROM teacher
How many teachers are there?
The SQL query for the question "How many teachers are there?" only needs the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many teachers are there?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM teacher
SELECT  COUNT(DISTINCT Teacher_ID) FROM teacher
index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
The SQL query for the question "What is the total count of teachers?" needs the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Total count of teachers"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Teacher_ID) FROM teacher
SELECT  COUNT(DISTINCT Teacher_ID) FROM teacher
index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
The SQL query for the question "List the names of teachers in ascending order of age." needs the table = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
The SQL query for the question "What are the names of the teachers ordered by ascending age?" needs these tables = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM teacher ORDER BY Age ASC
SELECT  Name FROM teacher ORDER BY Age ASC
index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
The SQL query for the question "What are the age and hometown of teachers?" needs the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Age, Hometown FROM teacher
SELECT  Age, Hometown FROM teacher
index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
The SQL query for the question "What is the age and hometown of every teacher?" needs these tables = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Age, Hometown FROM teacher
SELECT  Age, Hometown  FROM teacher
index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
 The SQL query for the question "List the name of teachers whose hometown is not `Little Lever Urban District'." needs these tables = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of teachers' names"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT  Name  FROM teacher  WHERE Hometown <> 'Little Lever Urban District'
index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
The SQL query for the question "What are the names of the teachers whose hometown is not 'Little Lever Urban District'?" needs the table = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT  Name  FROM teacher  WHERE Hometown <> 'Little Lever Urban District'
index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
The SQL query for the question "Show the name of teachers aged either 32 or 33?" needs these tables = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM teacher WHERE Age IN (32, 33)
SELECT DISTINCT Name  FROM teacher  WHERE Age IN (32, 33)
index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
 The SQL query for the question "What are the names of the teachers who are aged either 32 or 33?" needs these tables = [teacher], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which teachers are aged 32 and 33?"].
So, we don't need JOIN and we need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM teacher WHERE Age IN (32,33)
SELECT  Name  FROM teacher  WHERE Age IN (32,33)
index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
The SQL query for the question "What is the hometown of the youngest teacher?" needs these tables = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1
SELECT  Hometown FROM teacher ORDER BY Age ASC LIMIT 1
index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
The SQL query for the question "Where is the youngest teacher from?" needs the table = [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT  Hometown  FROM teacher  WHERE Age = (SELECT MIN(Age) FROM teacher)
index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
The SQL query for the question "Show different hometowns of teachers and the number of teachers from each hometown." needs the table [teacher], so we don't need JOIN.
Plus, it requires aggregation with COUNT, and we need to display different hometowns, and the number of teachers from each hometown, so we need the answer to the questions = ["Show different hometowns of teachers and the count of teachers from each hometown."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT  Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown
index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
The SQL query for the question "For each hometown, how many teachers are there?" needs the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many teachers are there in each hometown?"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown, COUNT(*) as num_teachers FROM teacher GROUP BY Hometown
SELECT  Hometown, COUNT(DISTINCT Teacher_ID) as num_teachers FROM teacher GROUP BY Hometown
index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
The SQL query for the question "List the most common hometown of teachers." needs only the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
The SQL query for the question "What is the most common hometowns for teachers?" needs the table [teacher], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Hometown, COUNT(*) as count 
FROM teacher 
GROUP BY Hometown 
ORDER BY count DESC 
LIMIT 1
SELECT  Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1
index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
The SQL query for the question "Show the hometowns shared by at least two teachers." needs these tables = [teacher], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the hometowns shared by at least two teachers."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Hometown from teacher GROUP BY Hometown HAVING count(*) > 1
SELECT  Hometown  FROM teacher  GROUP BY Hometown  HAVING COUNT(DISTINCT Teacher_ID) > 1
index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
The SQL query for the question "What are the towns from which at least two teachers come from?" needs the table [teacher], so we don't need JOIN.
Plus, it requires nested queries with the condition of at least two teachers coming from the same town, and we need the answer to the question = [""].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
questions not found in classification, setting SQL to SELECT
index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
The SQL query for the question "Show names of teachers and the courses they are arranged to teach." needs these tables = [teacher, course_arrange, course], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT  T1.Name, T3.Course  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
The SQL query for the question "What is the name of each teacher and what course they teach?" needs these tables = [teacher, course_arrange], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of each teacher and course they teach"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT  T1.Name, T3.Course  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
The SQL query for the question "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name." needs these tables = [teacher,course_arrange,course], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT  T1.Name, T3.Course  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID  ORDER BY T1.Name ASC
index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
The SQL query for the question "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?" needs these tables = [teacher,course_arrange,course], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name ,  T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID  =  T3.Course_ID ORDER BY T1.Name asc
SELECT  T1.Name, T3.Course  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID  ORDER BY T1.Name ASC
index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
The SQL query for the question "Show the name of the teacher for the math course." needs these tables = [teacher, course], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT teacher.Name FROM teacher, course_arrange WHERE course_arrange.Teacher_ID=teacher.Teacher_ID AND course_arrange.Course="math"
SELECT  teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = "math"
index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
The SQL query for the question "What are the names of the people who teach math courses?" needs these tables = [teacher,course], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.Course_ID WHERE course.Course  =  'math'
SELECT  teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
The SQL query for the question "Show names of teachers and the number of courses they teach" needs these tables = [teacher, course_arrange], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of teachers and the number of courses they teach"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT  T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
The SQL query for the question "What are the names of the teachers and how many courses do they teach?" needs these tables = [teacher,course_arrange], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["teacher.Name","COUNT(course_arrange.Course_ID)"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT  T1.Name, COUNT(DISTINCT T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
The SQL query for the question "Show names of teachers that teach at least two courses." needs these tables = [teacher, course_arrange], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM teacher GROUP BY Name HAVING COUNT(Course_ID) >= 2
SELECT  Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
The SQL query for the question "What are the names of the teachers who teach at least two courses?" needs these tables = [teacher, course_arrange], so we need JOIN. Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Teachers who teach at least two courses"]. So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED". Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(T2.Course_ID) >= 2
SELECT  T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Teacher_ID, T1.Name  HAVING COUNT(DISTINCT T2.Course_ID) >= 2
index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
 The SQL query for the question "List the names of teachers who have not been arranged to teach courses." needs these tables = [teacher,course_arrange], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which teachers have been arranged to teach courses?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
SELECT  Name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
 The SQL query for the question "What are the names of the teachers whose courses have not been arranged?" needs these tables = [teacher, course_arrange], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which teachers have courses arranged?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
SELECT  Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
The SQL query for the question "How many visitors below age 30 are there?" needs the tables [visitor], so we don't need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
Therefore, we don't need JOIN and don't need nested queries, so the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT  COUNT(*) FROM visitor WHERE Age < 30
index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
 The SQL query for the question "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low." needs these tables = [visitor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT  visitor.Name  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Level_of_membership DESC
index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
 The SQL query for the question "What is the average age of the visitors whose membership level is not higher than 4?" needs these tables = [visitor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average age of visitors"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT  AVG(Age)  FROM visitor  WHERE Level_of_membership <= 4
index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
The SQL query for the question "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young." needs these tables = [visitor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age DESC
index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
The SQL query for the question "Find the id and name of the museum that has the most staff members?" needs these tables = [museum], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT  Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
 The SQL query for the question "Find the average number of staff working for the museums that were open before 2009." needs these tables = [museum], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT  AVG(Num_of_Staff)  FROM museum  WHERE Open_Year < 2009
index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
The SQL query for the question "What are the opening year and staff number of the museum named Plaza Museum?" needs the tables [museum], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Plaza Museum's opening year and staff number"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT  Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
The SQL query for the question "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010." needs these tables = [museum], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which museums opened after 2010 have the minimum staff number?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT  Name FROM museum  WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff)                       FROM museum                       WHERE Open_Year > 2010)
index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
 The SQL query for the question "find the id, name and age for visitors who visited some museums more than once." needs these tables = [visitor,visit], so we need to JOIN them.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which visitors visited some museums more than once?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT visitor.ID , visitor.Name , visitor.Age FROM visitor WHERE visitor.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING count(*) > 1)
SELECT  visitor.ID , visitor.Name , visitor.Age FROM visitor WHERE visitor.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING count(*) > 1)
index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
 The SQL query for the question "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?" needs these tables = [visitor,visit], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.ID ,  T1.Name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID ORDER BY T2.Total_spent DESC LIMIT 1
SELECT  T1.ID, T1.Name, T1.Level_of_membership  FROM visitor AS T1  JOIN visit AS T2 ON T1.ID = T2.visitor_ID  ORDER BY T2.Total_spent DESC  LIMIT 1
index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
The SQL query for the question "What are the id and name of the museum visited most times?" needs these tables = [museum, visit], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY SUM(Num_of_Ticket) DESC LIMIT 1
SELECT  museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY SUM(Num_of_Ticket) DESC  LIMIT 1
index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
 The SQL query for the question "What is the name of the museum that had no visitor yet?" needs these tables = [museum, visit], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which museums had visitors?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT  Name  FROM museum  LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID  WHERE visitor_ID IS NULL
index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
 The SQL query for the question "Find the name and age of the visitor who bought the most tickets at once." needs these tables = [visitor, visit], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.Name , T2.Age
FROM visit AS T1
INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID
ORDER BY T1.Num_of_Ticket DESC LIMIT 1
SELECT  T2.Name, T2.Age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T2.Name, T2.Age ORDER BY T1.Num_of_Ticket DESC LIMIT 1
index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
 The SQL query for the question "What are the average and maximum number of tickets bought in all visits?" needs these tables = [visit], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average number of tickets bought", "maximum number of tickets bought"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT  AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
 The SQL query for the question "What is the total ticket expense of the visitors whose membership level is 1?" needs these tables = [visit,visitor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1
SELECT SUM(Total_spent)  FROM visit  JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1
index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
 The SQL query for the question "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?" needs these tables = [visitor, museum], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the name of the visitor?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM visitor WHERE ID IN
(SELECT visitor_ID FROM visit WHERE Museum_ID IN
(SELECT Museum_ID FROM museum WHERE Open_Year < 2009 OR Open_Year > 2011) GROUP BY visitor_ID HAVING COUNT(DISTINCT Museum_ID) = 2)
SELECT  visitor.Name  FROM visitor  WHERE ID IN      (SELECT visitor_ID       FROM visit       WHERE Museum_ID IN           (SELECT Museum_ID            FROM museum            WHERE Open_Year < 2009 OR Open_Year > 2011)       GROUP BY visitor_ID       HAVING COUNT(DISTINCT Museum_ID) = 2)
index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
 The SQL query for the question "Find the number of visitors who did not visit any museum opened after 2010." needs these tables = [visit, museum], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of visitors"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(visitor_ID) FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 GROUP BY visitor_ID
SELECT count(visitor_ID)  FROM visit  JOIN museum ON visit.Museum_ID = museum.Museum_ID  WHERE museum.Open_Year <= 2010  GROUP BY visit.visitor_ID
index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
The SQL query for the question "How many museums were opened after 2013 or before 2008?" needs these tables = [museum], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT count(DISTINCT(Museum_ID)) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
index is 429
SELECT count(*) FROM players
Find the total number of players.
The SQL query for the question "Find the total number of players." needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Total number of players"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM players
SELECT  COUNT(*) FROM players
index is 430
SELECT count(*) FROM players
How many players are there?
The SQL query for the question "How many players are there?" only needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of players"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM players
SELECT  COUNT(player_id) FROM players
index is 431
SELECT count(*) FROM matches
Find the total number of matches.
The SQL query for the question "Find the total number of matches." needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM matches
SELECT  COUNT(*) FROM matches
index is 432
SELECT count(*) FROM matches
Count the number of matches.
 The SQL query for the question "Count the number of matches" needs these tables = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM matches
SELECT  COUNT(*) FROM matches
index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
The SQL query for the question "List the first name and birth date of all players from the country with code USA." needs the tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["first name and birth date of players from USA"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT  first_name, birth_date  FROM players  WHERE country_code = 'USA'
index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
 The SQL query for the question "What are the first names and birth dates of players from the USA?" needs these tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["first names and birth dates of players from the USA."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT  first_name, birth_date FROM players WHERE country_code = 'USA'
index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
 The SQL query for the question "Find the average age of losers and winners of all matches." needs these tables = [matches, players], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average age of losers and winners"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG( DATEDIFF(NOW() , players.birth_date) ) FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id
SELECT  AVG( JULIANDAY() - JULIANDAY(players.birth_date) )  FROM matches  JOIN players ON matches.winner_id = players.player_id  OR matches.loser_id = players.player_id
index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
The SQL query for the question "What are the average ages of losers and winners across matches?" needs these tables = [matches, players], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average ages of losers and winners across matches"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG(T3.birth_date) , AVG(T4.birth_date) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id JOIN players AS T3 ON T1.loser_id  =  T3.player_id
SELECT  AVG((2022 - T3.birth_date)) as avg_loser_age, AVG((2022 - T2.birth_date)) as avg_winner_age FROM matches AS T1  JOIN players AS T2 ON T1.winner_id = T2.player_id  JOIN players AS T3 ON T1.loser_id = T3.player_id
index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
The SQL query for the question "Find the average rank of winners in all matches." needs these tables = [matches, rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG(ranking) FROM rankings JOIN matches ON rankings.player_id = matches.winner_id
SELECT  AVG(ranking)  FROM rankings  JOIN matches ON rankings.player_id = matches.winner_id GROUP BY rankings.player_id
index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
 The SQL query for the question "What is the average rank for winners in all matches?" needs these tables = [rankings,matches,players], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average rank of winners in matches"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id WHERE players.player_id IN (SELECT winner_id FROM matches)
SELECT  AVG(ranking)  FROM rankings  JOIN players ON rankings.player_id = players.player_id  JOIN matches ON rankings.player_id = matches.winner_id
index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
 The SQL query for the question "Find the highest rank of losers in all matches." needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(loser_rank) FROM matches
SELECT  MAX(loser_rank)  FROM matches
index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
 The SQL query for the question "What is the best rank of losers across all matches?" needs the tables [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank)  FROM matches GROUP BY loser_rank
index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
The SQL query for the question "find the number of distinct country codes of all players" needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT country_code) FROM players
SELECT  COUNT(DISTINCT country_code)  FROM players
index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
The SQL query for the question "How many distinct countries do players come from?" needs these tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT country_code) FROM players
SELECT  COUNT(DISTINCT country_code)  FROM players
index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
The SQL query for the question "Find the number of distinct names of losers." needs these tables = [players, matches], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of distinct names of losers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.last_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id
SELECT  COUNT(DISTINCT T1.last_name)  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.loser_id
index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
 The SQL query for the question "How many different loser names are there?" needs these tables = [matches, players], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different loser names are there?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT last_name) FROM players
SELECT  count(DISTINCT last_name) FROM players
index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
The SQL query for the question "Find the name of tourney that has more than 10 matches." needs the [matches] table, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num)  >  10
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING count(match_num)  >  10
index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
The SQL query for the question "What are the names of tournaments that have more than 10 matches?" needs the tables = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10
SELECT  tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(match_num) > 10
index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
The SQL query for the question "List the names of all winners who played in both 2013 and 2016." needs these tables = [players,matches], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 AND T1.player_id IN (SELECT winner_id FROM matches WHERE year  =  2016)
SELECT  T1.first_name ,  T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id  =  T2.winner_id  WHERE T2.year  =  2013  AND T1.player_id IN (SELECT winner_id FROM matches WHERE year  =  2016) GROUP BY T1.player_id
index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
The SQL query for the question "What are the names of players who won in both 2013 and 2016?" needs these tables = [players, matches], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which players won in 2013 and 2016?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2016)
SELECT  players.first_name, players.last_name  FROM players  JOIN matches ON players.player_id = matches.winner_id WHERE matches.year IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT matches.year) = 2
index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
The SQL query for the question "List the number of all matches who played in years of 2013 or 2016." needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of matches played in 2013 or 2016"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016) GROUP BY year
index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
The SQL query for the question "How many matches were played in 2013 or 2016?" needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT  COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
The SQL query for the question "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?" needs these tables = [players, matches], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the players who won in Australian Open"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT country_code ,  first_name FROM players WHERE player_id IN (SELECT player_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT player_id FROM matches WHERE tourney_name = 'WTA Championships')
SELECT  country_code, first_name  FROM players  WHERE player_id IN      (SELECT winner_id       FROM matches       WHERE tourney_name = 'Australian Open')  AND player_id IN      (SELECT winner_id       FROM matches       WHERE tourney_name = 'WTA Championships')
index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
The SQL query for the question "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?" needs these tables = [players,matches], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which players won the WTA Championships?", "Which players won the Australian Open?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT players.first_name , players.country_code from players  where ( players.player_id in ( select player_id from matches where ( matches.tourney_name = 'WTA Championships' and matches.score = 'W' ) ) and players.player_id in ( select player_id from matches where ( matches.tourney_name = 'Australian Open' and matches.score = 'W' ) ) )
SELECT  players.first_name, players.country_code FROM players WHERE players.player_id IN (     SELECT m1.player_id     FROM matches m1     JOIN matches m2 ON m1.player_id = m2.player_id     WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'     AND m1.score = 'W' AND m2.score = 'W' )
index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
The SQL query for the question "Find the first name and country code of the oldest player." needs these tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT  first_name, country_code  FROM players  ORDER BY birth_date DESC  LIMIT 1
index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
The SQL query for the question "What is the first name and country code of the oldest player?" needs the table = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT  first_name, country_code  FROM players  ORDER BY birth_date DESC  LIMIT 1
index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
The SQL query for the question "List the first and last name of all players in the order of birth date." needs these tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First name", "Last name"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT  first_name, last_name  FROM players  ORDER BY birth_date
index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
 The SQL query for the question "What are the full names of all players, sorted by birth date?" needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date
SELECT  first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date
index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
The SQL query for the question "List the first and last name of all players who are left hand in the order of birth date" needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["first name", "last name"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date
index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
The SQL query for the question "What are the full names of all left handed players, in order of birth date?" needs the table [players], so we don't need JOIN. 
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, last_name 
FROM players 
WHERE hand = 'left'
ORDER BY birth_date
SELECT  first_name, last_name  FROM players  WHERE hand = 'L' ORDER BY birth_date
index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
The SQL query for the question "Find the first name and country code of the player who did the most number of tours." needs these tables = [players,rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1
SELECT  T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.player_id  ORDER BY SUM(T2.tours) DESC  LIMIT 1
index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
 The SQL query for the question "What is the first name and country code of the player with the most tours?" needs these tables = [players, rankings], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY tours DESC LIMIT 1
SELECT  T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.player_id ORDER BY SUM(tours) DESC  LIMIT 1
index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
The SQL query for the question "Find the year that has the most number of matches." requires only the "matches" table, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
SELECT  year, COUNT(*) as num_matches  FROM matches  GROUP BY year  ORDER BY num_matches DESC  LIMIT 1
index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
The SQL query for the question "Which year had the most matches?" needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT year, COUNT(match_num) AS num_matches
FROM matches
GROUP BY year
ORDER BY num_matches DESC
LIMIT 1
SELECT  year, COUNT(match_num) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC
index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
The SQL query for the question "Find the name and rank points of the winner who won the most times." needs these tables = [players, rankings, matches], so we need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name and rank points of the winner who won the most times."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.last_name ,  T2.ranking_points, T2.player_id FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T1.player_id IN (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY count(*) DESC LIMIT 1)
SELECT  T1.first_name ,  T1.last_name ,  T2.ranking_points, T2.player_id  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id  =  T2.player_id  WHERE T1.player_id IN  (SELECT winner_id  FROM matches  GROUP BY winner_id  ORDER BY COUNT(*) DESC  LIMIT 1)
index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
The SQL query for the question "What is the name of the winner who has won the most matches, and how many rank points does this player have?" needs these tables = [players,matches,rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.last_name , T3.ranking_points FROM players AS T1 JOIN (SELECT winner_id ,  COUNT(*) AS cnt FROM matches GROUP BY winner_id ORDER BY cnt DESC LIMIT 1) AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id
SELECT  T1.first_name, T1.last_name, T3.ranking_points  FROM players AS T1  JOIN (     SELECT winner_id, COUNT(*) AS cnt      FROM matches      GROUP BY winner_id      ORDER BY cnt DESC      LIMIT 1 ) AS T2 ON T1.player_id = T2.winner_id  JOIN rankings AS T3 ON T1.player_id = T3.player_id
index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
The SQL query for the question "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney" needs these tables = [players, rankings, matches], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id WHERE T3.ranking_points = (SELECT MAX(ranking_points) FROM rankings) AND T2.tourney_name  =  'Australian Open'
SELECT  T1.first_name ,  T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id  =  T2.winner_id  JOIN rankings AS T3 ON T1.player_id  =  T3.player_id  WHERE T2.tourney_name  =  'Australian Open' GROUP BY T1.first_name, T1.last_name ORDER BY T3.ranking_points DESC LIMIT 1
index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
The SQL query for the question "What is the name of the winner with the most rank points who participated in the Australian Open tournament?" needs these tables = [players, rankings, matches], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T1.player_id  =  T3.player_id WHERE tourney_name  =  'Australian Open' ORDER BY ranking_points DESC LIMIT 1
SELECT  T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  JOIN rankings AS T3 ON T1.player_id = T3.player_id  WHERE T2.tourney_name = 'Australian Open'  GROUP BY T1.first_name, T1.last_name  ORDER BY T3.ranking_points DESC  LIMIT 1
index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
The SQL query for the question "find the names of loser and winner who played in the match with the greatest number of minutes." needs these tables = [players, matches], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of loser and winner"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.first_name ,  T2.last_name ,  T3.first_name ,  T3.last_name FROM matches JOIN players AS T2 ON matches.winner_id = T2.player_id JOIN players AS T3 ON matches.loser_id = T3.player_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)
SELECT  T2.first_name, T2.last_name, T3.first_name, T3.last_name  FROM matches  JOIN players AS T2 ON matches.winner_id = T2.player_id  JOIN players AS T3 ON matches.loser_id = T3.player_id  WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
The SQL query for the question "What are the names of the winner and loser who played in the longest match?" needs these tables = [players, matches], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["winner and loser names who played in the longest match"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.first_name, T2.last_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id OR T1.loser_id = T2.player_id WHERE minutes = (SELECT max(minutes) FROM matches)
SELECT  T2.first_name, T2.last_name  FROM matches AS T1  JOIN players AS T2 ON T1.winner_id = T2.player_id OR T1.loser_id = T2.player_id  WHERE minutes = (SELECT max(minutes) FROM matches) ORDER BY minutes DESC LIMIT 1
index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
The SQL query for the question "Find the average ranking for each player and their first name." needs these tables = [rankings,players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking
FROM players
JOIN rankings ON players.player_id = rankings.player_id
GROUP BY players.first_name
SELECT  players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
The SQL query for the question "What are the first names of all players, and their average rankings?" needs these tables = [players, rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First names of all players"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name , avg(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT  T1.first_name , avg(T2.ranking)  FROM players AS T1  INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.first_name
index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
The SQL query for the question "Find the total ranking points for each player and their first name." needs these tables = [rankings, players], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT sum(ranking_points), first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY first_name
SELECT  sum(ranking_points), first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id, first_name
index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
The SQL query for the question "What are the first names of all players, and their total ranking points?" needs these tables = [players, rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Player first name and their ranking points"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name , sum(ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT  T1.first_name, SUM(T2.ranking_points)  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.first_name
index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
The SQL query for the question "find the number of players for each country." needs the tables [players] and requires using the COUNT function. Since we don't need to join any tables and we don't need nested queries, this query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
SELECT  country_code, COUNT(player_id) FROM players GROUP BY country_code
index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
The SQL query for the question "How many players are from each country?" needs the tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT  country_code, COUNT(player_id) FROM players GROUP BY country_code
index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
 The SQL query for the question "find the code of the country where has the greatest number of players." needs the table = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT  country_code, COUNT(*) as num_players  FROM players  GROUP BY country_code  ORDER BY num_players DESC  LIMIT 1
index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
 The SQL query for the question "What is the code of the country with the most players?" needs the table = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT  country_code, COUNT(player_id) as player_count  FROM players  GROUP BY country_code  ORDER BY player_count DESC  LIMIT 1
index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
The SQL query for the question "Find the codes of countries that have more than 50 players." needs the table = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT  country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50
index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
The SQL query for the question "What are the codes of countries with more than 50 players?" needs the table [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50
SELECT  country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
 The SQL query for the question "Find the total number of tours for each ranking date." needs these tables = [rankings], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date
SELECT  ranking_date, SUM(tours)  FROM rankings  GROUP BY ranking_date
index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
The SQL query for the question "How many total tours were there for each ranking date?" needs the table [rankings], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions as ["number of tours for each ranking date"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
The SQL query for the question "Find the number of matches happened in each year." needs the table = [matches], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT year, COUNT(match_num) FROM matches GROUP BY year
SELECT  year, COUNT(match_num)  FROM matches  GROUP BY year
index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
The SQL query for the question "How many matches were played in each year?" needs the tables [matches], so we don't need JOIN.
Since it requires aggregate function (COUNT) to count the number of matches played in each year, but no nested queries are needed, we can classify this as "EASY".
Label: "EASY"
EASY
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year
SELECT  year, COUNT(*) AS num_matches FROM matches GROUP BY year
index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
 The SQL query for the question "Find the name and rank of the 3 youngest winners across all matches." needs these tables = [players, rankings, matches], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the youngest winners across all matches"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT players.first_name, players.last_name, rankings.ranking
FROM players
JOIN rankings ON players.player_id = rankings.player_id
ORDER BY players.birth_date DESC
LIMIT 3
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3
index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
 The SQL query for the question "What are the names and ranks of the three youngest winners across all matches?" needs these tables = [players, rankings, matches], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and ranks of the three youngest winners across all matches"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.last_name,  T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id  WHERE T1.player_id IN (SELECT winner_id FROM matches ORDER BY winner_age ASC LIMIT 3)
SELECT  T1.first_name, T1.last_name, T2.ranking FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id IN      (SELECT winner_id       FROM matches       ORDER BY winner_age ASC       LIMIT 3)
index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
The SQL query for the question "How many different winners both participated in the WTA Championships and were left-handed?" needs these tables = [players, matches], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different winners participated in the WTA Championships and were left-handed?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.player_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'left'
SELECT  COUNT(DISTINCT T1.player_id)  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'L'
index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
The SQL query for the question "Find the number of left-handed winners who participated in the WTA Championships." needs these tables = [players,matches], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships'
SELECT  count(*)  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships'
index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
 The SQL query for the question "Find the first name, country code and birth date of the winner who has the highest rank points in all matches." needs these tables = [players, rankings], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 WHERE T1.player_id IN (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)
SELECT  T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  WHERE T1.player_id IN  (SELECT player_id   FROM rankings   ORDER BY ranking_points DESC   LIMIT 1)
index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
The SQL query for the question "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?" needs these tables = [players, rankings, matches], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id ORDER BY T2.ranking_points DESC LIMIT 1
SELECT  T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  JOIN matches AS T3 ON T1.player_id = T3.winner_id  ORDER BY T2.ranking_points DESC  LIMIT 1
index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
The SQL query for the question "Find the number of players for each hand type." needs the table = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand
SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand
index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
The SQL query for the question "How many players are there for each hand type?" needs these tables = [players], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT hand, COUNT(player_id) FROM players GROUP BY hand
SELECT  hand, COUNT(player_id) FROM players GROUP BY hand
index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
The SQL query for the question "How many ships ended up being 'Captured'?" needs these tables = [ship], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many ships ended up being 'Captured'?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT  COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
 The SQL query for the question "List the name and tonnage ordered by in descending alphabetical order for the names." needs these tables = [ship], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT  name, tonnage FROM ship ORDER BY name ASC
index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
The SQL query for the question "List the name, date and result of each battle." needs the table = [battle], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name, date, result of each battle."].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, date, result FROM battle
SELECT  name, date, result FROM battle
index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
 The SQL query for the question "What is maximum and minimum death toll caused each time?" needs these tables = [death], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll  FROM death GROUP BY caused_by_ship_id
index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
The SQL query for the question "What is the average number of injuries caused each time?" needs the table [death], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["average number of injuries"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(injured) FROM death
SELECT  AVG(injured) FROM death
index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
The SQL query for the question "What are the death and injury situations caused by the ship with tonnage 't'?" needs these tables = [death, ship], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')
SELECT  * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')
index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
The SQL query for the question "What are the name and results of the battles when the bulgarian commander is not 'Boril'?" needs these tables = [battle], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name and results of the battles"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT  name, result FROM battle WHERE bulgarian_commander <> 'Boril'
index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
 The SQL query for the question "What are the different ids and names of the battles that lost any 'Brig' type ships?" needs these tables = [battle, ship], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Different ids and names of battles that lost 'Brig' type ships"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T2.lost_in_battle = T1.id WHERE T2.ship_type = 'Brig'
SELECT  T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T2.lost_in_battle = T1.id  WHERE T2.ship_type = 'Brig'  GROUP BY T1.id, T1.name
index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
 The SQL query for the question "What are the ids and names of the battles that led to more than 10 people killed in total." needs these tables = [battle,death], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [battle.id,battle.name].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.id , T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id , T1.name HAVING sum(T2.killed) > 10
SELECT  T1.id , T1.name  FROM battle AS T1  JOIN ship AS T3 ON T1.id = T3.lost_in_battle  JOIN death AS T2 ON T3.id = T2.caused_by_ship_id  GROUP BY T1.id , T1.name  HAVING sum(T2.killed) > 10
index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
 The SQL query for the question "What is the ship id and name that caused most total injuries?" needs these tables = [ship,death], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT caused_by_ship_id, name FROM death JOIN ship ON caused_by_ship_id = id GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC LIMIT 1
SELECT caused_by_ship_id, ship.name  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  GROUP BY caused_by_ship_id  ORDER BY SUM(injured) DESC  LIMIT 1
index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
 The SQL query for the question "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?" needs the table = [battle], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT  DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
 The SQL query for the question "How many different results are there for the battles?" needs these tables = [battle], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different results are there for the battles?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT result) FROM battle
SELECT  COUNT(DISTINCT result) FROM battle
index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
 The SQL query for the question "How many battles did not lose any ship with tonnage '225'?" needs these tables = [battle,ship], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM battle WHERE NOT EXISTS (SELECT * FROM ship WHERE battle.id = ship.lost_in_battle AND ship.tonnage = '225')
SELECT  count(DISTINCT battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage <> '225' OR ship.tonnage IS NULL
index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
 The SQL query for the question "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'" needs these tables = [battle, ship], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name and date of the battle"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT  battle.name, battle.date  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
 The SQL query for the question "Show names, results and Bulgarian commanders of the battles with no ships lost in the 'English Channel'." needs these tables = [battle,ship], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT  name, result, bulgarian_commander  FROM battle  WHERE id NOT IN  (SELECT lost_in_battle  FROM ship  WHERE location = 'English Channel')
index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
The SQL query for the question "What are the notes of the death events which has substring 'East'?" needs the table [death], so we don't need JOIN.
Plus, it requires nested queries with the LIKE clause to find the substring 'East', and we need the answer to the questions = ["What are the notes of the death events?"].
So, we don't need JOIN but need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT note FROM death WHERE note LIKE '%East%'
SELECT  note FROM death WHERE note LIKE '%East%'
index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
 The SQL query for the question "what are all the addresses including line 1 and line 2?" needs the table = [Addresses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT address_id, line_1, line_2 FROM Addresses
SELECT  address_id, line_1, line_2 FROM Addresses
index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
The SQL query for the question "What is the first and second line for all addresses?" needs these tables = [Addresses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2  FROM Addresses
index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
The SQL query for the question "How many courses in total are listed?" needs these tables = [Courses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Courses
SELECT COUNT(DISTINCT course_id) FROM Courses
index is 510
SELECT count(*) FROM Courses
How many courses are there?
Slicing error for the schema_linking module
The SQL query for the question "How many courses are there?" doesn't require any tables or JOIN, as it simply requires a count of the number of courses in the database. 
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM course
SELECT COUNT(*) FROM Courses
index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
 The SQL query for the question "How is the math course described?" needs these tables = [Courses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT course_description FROM Courses WHERE course_id = 'Math'
SELECT  course_description  FROM Courses  WHERE course_name = 'Math'
index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
 The SQL query for the question "What are the descriptions for all the math courses?" needs the tables = [Courses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY."
Label: "EASY"
EASY
SELECT course_description FROM Courses WHERE course_name LIKE '%Math%'
SELECT  course_description  FROM Courses  WHERE course_name LIKE '%Math%'
index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
The SQL query for the question "What is the zip code of the address in the city Port Chelsea?" needs the table [Addresses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT  zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea'
index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
The SQL query for the question "What is the zip code for Port Chelsea?" needs the table [Addresses], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT  zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea'
index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
The SQL query for the question "Which department offers the most number of degrees? List department name and id." needs these tables = [Departments, Degree_Programs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List department name and id"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT department_name, department_id
FROM Departments
JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id
GROUP BY department_id
ORDER BY COUNT(degree_program_id) DESC
LIMIT 1
SELECT  department_name, Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
The SQL query for the question "What is the name and id of the department with the most number of degrees ?" needs these tables = [Departments, Degree_Programs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["department_name and department_id with the most number of degrees"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.department_name ,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_name ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1
SELECT  T1.department_name, T1.department_id  FROM Departments AS T1  JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id  GROUP BY T1.department_name, T1.department_id  ORDER BY COUNT(T2.degree_program_id) DESC  LIMIT 1
index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
 The SQL query for the question "How many departments offer any degree?" needs these tables = [Degree_Programs,Departments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many departments offer any degree?"]. So, we don't need nested queries.
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT  COUNT(DISTINCT department_id) FROM Degree_Programs
index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
The SQL query for the question "How many different departments offer degrees?" needs these tables = [Departments], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT department_name) FROM Departments
SELECT  COUNT(DISTINCT department_id) FROM Departments
index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
The SQL query for the question "How many different degree names are offered?" doesn't require any JOIN operation as it only needs the Degree_Programs table.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN).
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT  COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
The SQL query for the question "How many different degrees are offered?" needs these tables = [Degree_Programs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
SELECT  COUNT(DISTINCT degree_program_id) FROM Degree_Programs
index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
The SQL query for the question "How many degrees does the engineering department offer?" needs these tables = [Degree_Programs, Departments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many degree programs does the engineering department offer?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering')
SELECT  COUNT(degree_program_id)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
 The SQL query for the question "How many degrees does the engineering department have?" needs these tables = [Degree_Programs,Departments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many degrees?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id  =  Departments.department_id WHERE Departments.department_name  =  'engineering'
SELECT  count(degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering' GROUP BY Departments.department_name
index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
The SQL query for the question "What are the names and descriptions of all the sections?" needs the table [Sections], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and descriptions of all the sections"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT section_name, section_description FROM Sections
SELECT  Sections.section_name, Sections.section_description  FROM Sections
index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
 The SQL query for the question "What are the names and descriptions for all the sections?" needs these tables = [Sections], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description  FROM Sections
index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
The SQL query for the question "What are the names and id of courses having at most 2 sections?" needs these tables = [Courses, Sections], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT course_id ,  course_name FROM Courses GROUP BY course_id HAVING COUNT(*) <= 2
SELECT  course_id, course_name  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) <= 2
index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
The SQL query for the question "What are the names and ids of every course with less than 2 sections?" needs tables = [Courses, Sections], so we need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["names and ids of courses with less than 2 sections"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 WHERE T1.course_id NOT IN (SELECT T2.course_id FROM Sections AS T2 GROUP BY T2.course_id HAVING COUNT(T2.course_id) >= 2)
SELECT  T1.course_name ,  T1.course_id  FROM Courses AS T1  LEFT JOIN Sections AS T2 ON T1.course_id = T2.course_id  GROUP BY T1.course_id  HAVING COUNT(T2.section_id) < 2
index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
The SQL query for the question "List the section_name in reversed lexicographical order." needs the table [Sections], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT  section_name FROM Sections ORDER BY section_name DESC
index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
The SQL query for the question "What are the names of the sections in reverse alphabetical order?" needs these tables = [Sections], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT  section_name FROM Sections ORDER BY section_name DESC
index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
The SQL query for the question "What is the semester which most students registered in? Show both the name and the id." needs these tables = [Semesters, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the semester name and id with the most student registration."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT semester_name, semester_id FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
SELECT  semester_name, semester_id  FROM Semesters  LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
The SQL query for the question "For each semester, what is the name and id of the one with the most students registered?" needs these tables = [Semesters, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["For each semester, what is the name and id of the one with the most students registered?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.semester_name, T1.semester_id FROM Semesters T1 JOIN (SELECT semester_id, count(DISTINCT student_id) AS num_students FROM Student_Enrolment GROUP BY semester_id ORDER BY num_students DESC LIMIT 1) T2 ON T1.semester_id = T2.semester_id
SELECT  T1.semester_name, T1.semester_id  FROM Semesters T1  JOIN  (SELECT semester_id, count(DISTINCT student_id) AS num_students  FROM Student_Enrolment  GROUP BY semester_id  ORDER BY num_students DESC LIMIT 1) T2  ON T1.semester_id = T2.semester_id
index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
The SQL query for the question "What is the description of the department whose name has the substring 'computer'?" needs these tables = [Departments], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%'
index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
The SQL query for the question "What is the department description for the one whose name has the word computer?" needs these tables = [Departments], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT  department_description  FROM Departments  WHERE department_name LIKE '%computer%'
index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
The SQL query for the question "Who are enrolled in 2 degree programs in one semester? List the first name, middle name, last name and id." needs these tables = [Students, Student_Enrolment], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the names and id of students enrolled in 2 degree programs in one semester."].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT first_name, middle_name, last_name, student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE semester_id = 1 GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2
SELECT  first_name, middle_name, last_name, student_id  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE semester_id = 1  GROUP BY first_name, middle_name, last_name, student_id  HAVING COUNT(DISTINCT degree_program_id) = 2
index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
The SQL query for the question "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?" needs these tables = [Students, Student_Enrolment], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT student_id, first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
SELECT  student_id, first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY student_id, first_name, middle_name, last_name  HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
The SQL query for the question "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name." needs these tables = [Students,Degree_Programs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the first name, middle name, last name."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name , middle_name , last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
The SQL query for the question "What are the first, middle, and last names for everybody enrolled in a Bachelors program?" needs these tables = [Students, Degree_Programs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name, middle_name, last_name FROM Students 
JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id
JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT  first_name, middle_name, last_name FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
The SQL query for the question "Find the kind of program which most number of students are enrolled in?" needs these tables = [Degree_Programs, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT degree_program_id, COUNT(student_id) FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1
SELECT  degree_program_id, COUNT(student_id)  FROM Student_Enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1
index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
 The SQL query for the question "What is the degree summary name that has the most number of students enrolled?" needs these tables = [Degree_Programs, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT dp.degree_summary_name, COUNT(se.student_id) AS student_count
FROM Degree_Programs AS dp
JOIN Student_Enrolment AS se ON dp.degree_program_id = se.degree_program_id
GROUP BY dp.degree_summary_name
ORDER BY student_count DESC
LIMIT 1
SELECT  dp.degree_summary_name, COUNT(se.student_id) AS student_count FROM Degree_Programs AS dp JOIN Student_Enrolment AS se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1
index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
 The SQL query for the question "Find the program which most number of students are enrolled in. List both the id and the summary." needs these tables = [Degree_Programs, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
 The SQL query for the question "What is the program id and the summary of the degree that has the most students enrolled?" needs these tables = [degree_program, student_enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT degree_program_id , degree_summary_description FROM degree_program WHERE student_enrolment_id = (SELECT MAX(student_enrolment_id) FROM student_enrolment)
SELECT  degree_program_id, degree_summary_description  FROM Degree_Programs  WHERE degree_program_id = (     SELECT degree_program_id      FROM Student_Enrolment      GROUP BY degree_program_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 )
index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
The SQL query for the question "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id." needs these tables = [Students, Student_Enrolment], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1
SELECT  T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) as num_enrollments  FROM Students AS T1  JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name  ORDER BY num_enrollments DESC  LIMIT 1
index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
The SQL query for the question "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?" requires the tables [Students, Student_Enrolment], so we need JOIN.
Since we are looking for the student who has enrolled the most, it involves counting the number of enrollments, which can be achieved with an aggregate function.
Thus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name, middle_name, last_name, student_id, COUNT(student_enrolment_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1
SELECT  first_name, middle_name, last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id)  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
The SQL query for the question "Which semesters do not have any student enrolled? List the semester name." needs these tables = [Semesters, Student_Enrolment], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the semester names"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
```
SELECT  semester_name  FROM Semesters  LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
 The SQL query for the question "What is the name of the semester with no students enrolled?" needs these tables = [Semesters, Student_Enrolment], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT semester_name FROM Semesters WHERE NOT EXISTS (SELECT * FROM Student_Enrolment WHERE Student_Enrolment.semester_id = Semesters.semester_id)
SELECT  semester_name  FROM Semesters  WHERE semester_id NOT IN      (SELECT semester_id       FROM Student_Enrolment)
index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
The SQL query for the question "What are all the course names of the courses which ever have students enrolled in?" needs these tables = [Courses, Student_Enrolment_Courses], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT  DISTINCT T1.course_name  FROM Courses AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
The SQL query for the question "What are the names of all courses that have some students enrolled?" needs these tables = [Courses, Student_Enrolment_Courses, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names of courses that have some students enrolled?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T3.student_enrolment_id = T2.student_enrolment_id
SELECT  DISTINCT T1.course_name  FROM Courses AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id  JOIN Student_Enrolment AS T3 ON T3.student_enrolment_id = T2.student_enrolment_id
index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
 The SQL query for the question "What's the name of the course with the most number of enrollments?" needs these tables = [Courses, Student_Enrolment_Courses], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1
index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
Slicing error for the classification module
The SQL query for the question "What is the name of the course with the most students enrolled?" requires JOIN between the tables [Courses, Student_Enrolment]. We need to count the number of students enrolled in each course and find the course with the highest count, so we need to use the AGGREGATE function MAX(COUNT(Student_Enrolment.student_id)). It does not require nested queries.
Therefore, this SQL query can be classified as NON-NESTED.
questions not found in classification, setting SQL to SELECT
index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
The SQL query for the question "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program." needs these tables = [Students, Addresses, Degree_Programs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN(SELECT student_id FROM Student_Enrolment)
SELECT  Students.last_name  FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
The SQL query for the question "What are the last name of the students who live in North Carolina but have not registered in any degree programs?" needs these tables = [Students,Addresses,Student_Enrolment], so we need JOIN.
Plus, it requires nested queries with (IN), and we need the answer to the questions = ["Which students live in North Carolina but have not registered in any degree programs?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND NOT EXISTS (SELECT * FROM Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id)
SELECT  last_name  FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE state_province_county = 'North Carolina'  AND NOT EXISTS  (     SELECT *      FROM Student_Enrolment      WHERE Students.student_id = Student_Enrolment.student_id     AND degree_program_id IS NULL )
index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
The SQL query for the question "Show the date and id of the transcript with at least 2 course results." needs these tables = [Transcripts, Transcript_Contents], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which transcripts have at least 2 course results?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT transcript_id ,  transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(*) >= 2)
SELECT transcript_id, transcript_date  FROM Transcripts  WHERE transcript_id IN      (SELECT transcript_id       FROM Transcript_Contents       GROUP BY transcript_id       HAVING COUNT(*) >= 2)
index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
 The SQL query for the question "What is the date and id of the transcript with at least 2 courses listed?" needs these tables = [Transcripts, Student_Enrolment_Courses], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which transcripts have at least 2 courses listed?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)
SELECT  transcript_id, transcript_date  FROM Transcripts  WHERE transcript_id IN      (SELECT transcript_id       FROM Transcript_Contents       GROUP BY transcript_id       HAVING COUNT(DISTINCT student_course_id) >= 2)
index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
 The SQL query for the question "What is the phone number of the man with the first name Timmothy and the last name Ward?" needs the table [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT  cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'
index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
 The SQL query for the question "What is the mobile phone number of the student named Timmothy Ward?" needs these tables = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT  cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'
index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
The SQL query for the question "Who is the first student to register? List the first name, middle name, and last name." needs the table = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First student to register"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
The SQL query for the question "What is the first, middle, and last name of the first student to register?" needs the table = [Students],  so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First, middle, and last name of the first student to register."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT  first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
 The SQL query for the question "Who is the earliest graduate of the school? List the first name, middle name and last name." needs these tables = [Students, Transcripts], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the first name, middle name and last name of the earliest graduate of the school."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY transcript_date ASC LIMIT 1
SELECT  Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcripts.transcript_id  ORDER BY Transcripts.transcript_date ASC  LIMIT 1
index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
The SQL query for the question "What is the first, middle, and last name of the earliest school graduate?" needs these tables = [Students, Transcripts, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name ,  middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Student_Enrolment WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts))
SELECT  first_name, middle_name, last_name  FROM Students  WHERE student_id = (     SELECT student_id      FROM Transcripts      WHERE transcript_date = (         SELECT MIN(transcript_date)          FROM Transcripts     ) )
index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
The SQL query for the question "Whose permanent address is different from his or her current address? List his or her first name." needs these tables = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List his or her first name"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id
SELECT first_name  FROM Students  WHERE permanent_address_id <> current_address_id
index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
The SQL query for the question "What is the first name of the student whose permanent address is different from his or her current one?" needs these tables = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
SELECT first_name  FROM Students  WHERE permanent_address_id != current_address_id
index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
The SQL query for the question "Which address holds the most number of students currently? List the address id and all lines." needs these tables = [Addresses,Students], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the address id and all lines."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT address_id, line_1, line_2, line_3, COUNT(T2.student_id) as student_count FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY student_count DESC LIMIT 1
SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3, COUNT(T2.student_id) as student_count  FROM Addresses AS T1  JOIN Students AS T2 ON T1.address_id = T2.current_address_id  GROUP BY T1.address_id, T1.line_1, T1.line_2, T1.line_3  ORDER BY student_count DESC  LIMIT 1
index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
The SQL query for the question "What is the id, line 1, and line 2 of the address with the most students?" needs these tables = [Addresses, Student_Enrolment], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Student_Enrolment GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1)  
SELECT  address_id, line_1, line_2  FROM Addresses  WHERE address_id = (     SELECT current_address_id      FROM Students      GROUP BY current_address_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 )
index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
The SQL query for the question "On average, when were the transcripts printed?" needs the table [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(transcript_date) FROM Transcripts
SELECT  AVG(strftime('%Y',transcript_date)) AS avg_print_year FROM Transcripts
index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
 The SQL query for the question "What is the average transcript date?" needs these tables = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(transcript_date) FROM Transcripts
SELECT  AVG(transcript_date) FROM Transcripts
index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
The SQL query for the question "When is the first transcript released? List the date and details." needs these tables = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the date and details of the first transcript released."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT  transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
The SQL query for the question "What is the earliest date of a transcript release, and what details can you tell me?" needs these tables = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

SELECT  transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
The SQL query for the question "How many transcripts are released?" needs the table [transcripts], so we don't need JOIN.
Since it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["How many transcripts are released?"], we don't need nested queries either.
Therefore, the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM transcripts
SELECT  COUNT(DISTINCT transcript_id) FROM Transcripts
index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
The SQL query for the question "How many transcripts are listed?" needs the table = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of transcripts listed"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Transcripts
SELECT  COUNT(*) FROM Transcripts
index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
The SQL query for the question "What is the last transcript release date?" needs the table = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(transcript_date) FROM Transcripts
SELECT  MAX(transcript_date) FROM Transcripts
index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
The SQL query for the question "When was the last transcript released?" needs the table = [Transcripts], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(transcript_date) FROM Transcripts
SELECT  MAX(transcript_date) FROM Transcripts
index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
 The SQL query for the question "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id." needs these tables = [Transcript_Contents, Student_Enrolment_Courses], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["course enrollment id"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT student_course_id, count(student_course_id) as total_occurrences FROM Transcript_Contents GROUP BY student_course_id ORDER BY total_occurrences DESC LIMIT 1
SELECT student_course_id, count(student_course_id) as total_occurrences  FROM Transcript_Contents  GROUP BY student_course_id  ORDER BY total_occurrences DESC  LIMIT 1
index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
 The SQL query for the question "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?" needs these tables = [Transcript_Contents], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the maximum number of times that a course shows up in different transcripts?"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT COUNT(student_course_id), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(student_course_id) DESC LIMIT 1
SELECT  COUNT(student_course_id) AS max_times_enrolled, student_course_id  FROM Transcript_Contents  GROUP BY student_course_id  ORDER BY max_times_enrolled DESC  LIMIT 1
index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
Slicing error for the schema_linking module
The SQL query for the question "Show the date of the transcript which shows the least number of results, also list the id." needs these tables = [Transcripts, Transcript_Contents], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the transcript date with the least number of results, also list the transcript id."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.transcript_date ,  T1.transcript_id FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id, T1.transcript_date  ORDER BY COUNT(*) ASC  LIMIT 1
index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
 The SQL query for the question "What is the date and id of the transcript with the least number of results?" needs these tables = [Transcripts,Transcript_Contents], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT transcript_id ,  transcript_date FROM transcripts GROUP BY transcript_id ORDER BY COUNT(transcript_contents.transcript_id) ASC LIMIT 1
SELECT transcript_id, transcript_date  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  GROUP BY transcript_id  ORDER BY COUNT(Transcript_Contents.transcript_id) ASC  LIMIT 1
index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
The SQL query for the question "Find the semester when both Master students and Bachelor students got enrolled in." needs these tables = [Semesters,Degree_Programs], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the semester when Master students got enrolled","Find the semester when Bachelor students got enrolled"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
select S1.semester_name from Semesters as S1 join Student_Enrolment as S2 on S1.semester_id  =  S2.semester_id join Degree_Programs as D1 on S2.degree_program_id  =  D1.degree_program_id where D1.degree_summary_name  =  'Master' INTERSECT select S1.semester_name from Semesters as S1 join Student_Enrolment as S2 on S1.semester_id  =  S2.semester_id join Degree_Programs as D1 on S2.degree_program_id  =  D1.degree_program_id where D1.degree_summary_name  =  'Bachelor'
SELECT S1.semester_name  FROM Semesters AS S1  JOIN Student_Enrolment AS S2 ON S1.semester_id = S2.semester_id  JOIN Degree_Programs AS D1 ON S2.degree_program_id = D1.degree_program_id  WHERE D1.degree_summary_name = 'Master'  INTERSECT  SELECT S1.semester_name  FROM Semesters AS S1  JOIN Student_Enrolment AS S2 ON S1.semester_id = S2.semester_id  JOIN Degree_Programs AS D1 ON S2.degree_program_id = D1.degree_program_id  WHERE D1.degree_summary_name = 'Bachelor'
index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
The SQL query for the question "What is the id of the semester that had both Masters and Bachelors students enrolled?" needs these tables = [Semesters,Degree_Programs,Student_Enrolment], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which semesters had Masters students enrolled?", "Which semesters had Bachelors students enrolled?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT semester_id FROM Student_Enrolment WHERE semester_id IN (SELECT DISTINCT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT DISTINCT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE degree_summary_name = 'Bachelors')
SELECT  semester_id  FROM Student_Enrolment  WHERE semester_id IN  (     SELECT semester_id      FROM Student_Enrolment      JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id      WHERE degree_summary_name = 'Masters'     GROUP BY semester_id     INTERSECT     SELECT semester_id      FROM Student_Enrolment      JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id      WHERE degree_summary_name = 'Bachelors'     GROUP BY semester_id )
index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
 The SQL query for the question "How many different addresses do the students currently live?" needs these tables = [Addresses, Students], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many different addresses do the students currently live?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT  COUNT(DISTINCT Students.current_address_id) FROM Students
index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
The SQL query for the question "What are the different addresses that have students living there?" needs these tables = [Addresses,Students], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT * FROM Addresses WHERE address_id IN (SELECT permanent_address_id FROM Students UNION SELECT current_address_id FROM Students)
SELECT  * FROM Addresses WHERE address_id IN (SELECT permanent_address_id FROM Students UNION SELECT current_address_id FROM Students)
index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
The SQL query for the question "List all the student details in reversed lexicographical order." needs these tables = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC
SELECT  * FROM Students ORDER BY last_name DESC, first_name DESC, student_id DESC
index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
The SQL query for the question "What other details can you tell me about students in reverse alphabetical order?" needs the table = [Students], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM Students ORDER BY last_name DESC
SELECT  * FROM Students ORDER BY last_name DESC
index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
The SQL query for the question "Describe the section h." needs the table [Sections], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT * FROM Sections WHERE section_name = 'h'
SELECT  * FROM Sections WHERE section_name = 'h'
index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
Slicing error for the schema_linking module
The given question "What is the description for the section named h?" requires information from the Sections table, but it is missing the specific column to link the data. Without the proper schema links, it is not possible to determine if JOIN or nested queries are needed. Therefore, the classification of this query is ambiguous. 
Label: "Ambiguous"
questions not found in classification, setting SQL to SELECT
index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
 The SQL query for the question "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582." needs these tables = [Students, Addresses], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name FROM Students WHERE permanent_address_id  IN  (SELECT address_id FROM Addresses WHERE country  =  'Haiti') OR cell_mobile_number  =  '09700166582'
SELECT  s.first_name  FROM Students s  JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582'
index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
The SQL query for the question "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?" needs these tables = [Students,Addresses], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First names of the students"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'
SELECT  first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'
index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
The SQL query for the question "List the title of all cartoons in alphabetical order." needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT  Title FROM Cartoon ORDER BY Title ASC
index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
The SQL query for the question "What are the titles of the cartoons sorted alphabetically?" needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT  Title  FROM Cartoon  ORDER BY Title ASC
index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
The SQL query for the question "List all cartoon directed by "Ben Jones"." needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT  Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones'
index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
 The SQL query for the question "What are the names of all cartoons directed by Ben Jones?" needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'
index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
 The SQL query for the question "How many cartoons were written by Joseph Kuhr?" needs the tables [Cartoon], so we don't need JOIN.
It also doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer in the form of a number.
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT  COUNT(DISTINCT Cartoon.id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
The SQL query for the question "What is the number of cartoons written by Joseph Kuhr?" needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT  COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
The SQL query for the question "list all cartoon titles and their directors ordered by their air date" needs the tables [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT  Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date
index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
The SQL query for the question "What is the name and directors of all the cartoons that are ordered by air date?" needs the tables [Cartoon], so we don't need JOIN. 
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name", "directors"]. 
So, we don't need JOIN and don't need nested queries, the SQL query can be classified as "EASY". 
Label: "EASY"
EASY
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT  Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  ORDER BY Cartoon.Original_air_date
index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
The SQL query for the question "List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'" needs the tables [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT  Title  FROM Cartoon  WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
The SQL query for the question "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?" needs the tables [Cartoon], so we don't need JOIN.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question ["titles of cartoons directed by Ben Jones or Brandon Vietti"].
Therefore, we don't need JOIN and don't need nested queries, so the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
The SQL query for the question "Which country has the most TV Channels? List the country and number of TV Channels it has." needs the table TV_Channel, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Country with the most TV Channels and the number of TV Channels it has."].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country, COUNT(id) 
FROM TV_Channel 
GROUP BY Country 
ORDER BY COUNT(id) DESC 
LIMIT 1
SELECT  Country, COUNT(id)  FROM TV_Channel  GROUP BY Country  ORDER BY COUNT(id) DESC  LIMIT 1
index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
The SQL query for the question "What is the country with the most number of TV Channels and how many does it have?" needs the tables [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["country with the most number of TV Channels and the count of channels in that country"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Country, COUNT(id) AS num_channels
FROM TV_Channel
GROUP BY Country
ORDER BY num_channels DESC
LIMIT 1
SELECT  Country, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1
index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
The SQL query for the question "List the number of different series names and contents in the TV Channel table." needs the tables [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Number of different series names and contents"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT content) AS num_contents FROM TV_Channel
SELECT  COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel
index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
The SQL query for the question "How many different series and contents are listed in the TV Channel table?" needs the TV_Channel table, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of different series and contents in TV Channel table"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT series_name, Content) FROM TV_Channel
SELECT  COUNT(DISTINCT series_name) FROM TV_Channel
index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
The SQL query for the question "What is the content of TV Channel with serial name 'Sky Radio'?" needs the tables TV_Channel, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT  Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'
index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
 The SQL query for the question "What is the content of the series Sky Radio?" needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT  Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'
index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
The SQL query for the question "What is the Package Option of TV Channel with serial name 'Sky Radio'?" needs the tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Package Option of TV Channel with serial name 'Sky Radio'"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT  Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
The SQL query for the question "What are the Package Options of the TV Channels whose series names are Sky Radio?" needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Package Options of TV Channels"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT  Package_Option  FROM TV_Channel  WHERE id IN (     SELECT Channel      FROM TV_series      WHERE id = (         SELECT Channel          FROM Cartoon          WHERE id = 2     ) )
index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
The SQL query for the question "How many TV Channels are using the language English?" needs the table = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["number of TV Channels using English language"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT  COUNT(DISTINCT TV_Channel.id) FROM TV_Channel WHERE Language = 'English'
index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
The SQL query for the question "How many TV Channels use the English language?" needs the tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT  COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
The SQL query for the question "List the language used least number of TV Channel. List language and number of TV Channel." needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List language and number of TV Channel"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language, COUNT(id) AS num_channels
FROM TV_Channel
GROUP BY Language
ORDER BY num_channels
LIMIT 1
SELECT  Language, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1
index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
The SQL query for the question "What are the languages used by the least number of TV Channels and how many channels use it?" needs the table TV_Channel, so we don't need JOIN.
Plus, it requires nested queries with COUNT() and GROUP BY to find the least number of channels using a specific language, and we need the answer to the questions = ["Languages used by the least number of channels", "Number of channels using each language"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM TV_Channel GROUP BY Language) AS temp)
SELECT  Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(*) = (SELECT MIN(cnt)                     FROM (SELECT COUNT(*) AS cnt                           FROM TV_Channel                           GROUP BY Language) AS temp)
index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
The SQL query for the question "List each language and the number of TV Channels using it." needs the tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language
SELECT  Language, COUNT(*) FROM TV_Channel GROUP BY Language
index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
The SQL query for the question "For each language, list the number of TV Channels that use it." needs the TV_Channel table, so we don't need JOIN.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["List the number of TV Channels that use each language."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language
SELECT  Language, COUNT(DISTINCT TV_Channel.id) AS Num_Channels FROM TV_Channel  INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel GROUP BY Language
index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
The SQL query for the question "What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name." needs these tables = [TV_Channel, Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'"] and ["List the TV Channel's series name."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT TV_Channel.series_name 
FROM TV_Channel
JOIN Cartoon ON TV_Channel.id = Cartoon.Channel
WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SELECT  TV_Channel.series_name  FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
The SQL query for the question "What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""], except that for "The Rise of the Blue Beetle".
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = "The Rise of the Blue Beetle"
SELECT  T2.series_name  FROM Cartoon AS T1  JOIN TV_Channel AS T2 ON T1.Channel = T2.id  WHERE T1.Title = "The Rise of the Blue Beetle"
index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
The SQL query for the question "List the title of all Cartoons showed on TV Channel with series name 'Sky Radio'." needs these tables = [Cartoon, TV_Channel], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Title of Cartoons showed on TV Channel with series name 'Sky Radio'."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT  Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
The SQL query for the question "What is the title of all the cartoons that are on the TV Channel with the series name "Sky Radio"?" needs these tables = [Cartoon, TV_Channel], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Cartoon titles on TV Channel with series name 'Sky Radio'"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT  Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = "Sky Radio"
index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
The SQL query for the question "List the Episode of all TV series sorted by rating." needs these tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT  TV_series.Episode  FROM TV_series  ORDER BY Rating DESC
index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
The SQL query for the question "What are all of the episodes ordered by ratings?" needs the tables [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question as a list of all episodes ordered by ratings.
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Episode FROM TV_series ORDER BY Rating
SELECT  TV_series.Episode  FROM TV_series  ORDER BY Rating DESC
index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
The SQL query for the question "List top 3 highest Rating TV series. List the TV series's Episode and Rating." needs these tables = [TV_series, TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Top 3 highest Rating TV series and their Episode details"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Episode, Rating
FROM TV_series
ORDER BY Rating DESC
LIMIT 3
SELECT  Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
The SQL query for the question "What are 3 most highly rated episodes in the TV series table and what were those ratings?" needs the tables [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["3 most highly rated episodes and their ratings"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Episode, Rating 
FROM TV_series 
ORDER BY Rating DESC 
LIMIT 3
SELECT  Episode, Rating  FROM TV_series  GROUP BY Episode ORDER BY Rating DESC  LIMIT 3
index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
The SQL query for the question "What is the minimum and maximum share of TV series?" needs the tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["minimum share","maximum share"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT  MIN(Share), MAX(Share) FROM TV_series
index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
The SQL query for the question "What is the maximum and minimum share for the TV series?" needs the table [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["maximum share", "minimum share"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT  MAX(Share), MIN(Share) FROM TV_series GROUP BY Share
index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
The SQL query for the question "What is the air date of TV series with Episode "A Love of a Lifetime"?" needs these tables = [TV_series, Cartoon], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT TV_series.Air_Date FROM TV_series JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = "A Love of a Lifetime"
SELECT  TV_series.Air_Date  FROM TV_series  JOIN Cartoon ON TV_series.Channel = Cartoon.Channel  WHERE Cartoon.Title = "A Love of a Lifetime"
index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
 The SQL query for the question "When did the episode 'A Love of a Lifetime' air?" needs these tables = [TV_series, Cartoon], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["Air Date of episode 'A Love of a Lifetime'"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT TV_series.Air_Date FROM TV_series JOIN Cartoon ON Cartoon.id = TV_series.Channel WHERE Cartoon.Title = 'A Love of a Lifetime'
SELECT  TV_series.Air_Date  FROM TV_series  JOIN Cartoon ON Cartoon.Channel = TV_series.Channel  WHERE Cartoon.Title = 'A Love of a Lifetime'
index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
The SQL query for the question "What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?" needs these tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT  Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
The SQL query for the question "What is the weekly rank for the episode "A Love of a Lifetime"?" needs the tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT  Weekly_Rank  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
The SQL query for the question "What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name." needs these tables = [TV_Channel,TV_series], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["TV Channel's series name"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Episode  =  'A Love of a Lifetime'
SELECT  T2.series_name  FROM TV_series AS T1  JOIN TV_Channel AS T2 ON T1.Channel = T2.id  WHERE T1.Episode = 'A Love of a Lifetime'
index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
The SQL query for the question "What is the name of the series that has the episode 'A Love of a Lifetime'?" needs these tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT  series_name  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
The SQL query for the question "List the Episode of all TV series showed on TV Channel with series name 'Sky Radio'." needs these tables = [TV_series,TV_Channel], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the Episodes of TV series that are showed on TV Channel with series name 'Sky Radio'."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT  TV_series.Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
The SQL query for the question "What is the episode for the TV series named 'Sky Radio'?" needs these tables = [TV_series], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio'
SELECT  TV_series.Episode  FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
The SQL query for the question "Find the number of cartoons directed by each of the listed directors." needs the tables [Cartoon], so we don't need JOIN.
It doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer as the number of cartoons directed by each director.
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Directed_by, COUNT(id) FROM Cartoon WHERE Directed_by IN (list_of_directors) GROUP BY Directed_by
SELECT  Directed_by, COUNT(id) FROM Cartoon WHERE Directed_by IN ('Director1', 'Director2', 'Director3') GROUP BY Directed_by
index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
The SQL query for the question "How many cartoons did each director create?" needs the tables [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Directed_by, COUNT(*) AS num_cartoons
FROM Cartoon
GROUP BY Directed_by
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by
index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
The SQL query for the question "Find the production code and channel of the most recently aired cartoon." needs these tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Production_code, Channel
FROM Cartoon
WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT  Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
The SQL query for the question "What is the production code and channel of the most recent cartoon?" needs the tables = [Cartoon], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT  Production_code, Channel  FROM Cartoon  ORDER BY Original_air_date DESC  LIMIT 1
index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
The SQL query for the question "Find the package choice and series name of the TV channel that has high definition TV." needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 'Yes'
SELECT  Package_Option, series_name  FROM TV_Channel  WHERE Hight_definition_TV = 'Yes'
index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
The SQL query for the question "What are the package options and the name of the series for the TV Channel that supports high definition TV?" needs these tables = [TV_Channel, TV_series], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Package options and series name"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Package_Option , series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
SELECT  Package_Option , series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
The SQL query for the question "which countries' tv channels are playing some cartoon written by Todd Casey?" needs these tables = [TV_Channel,Cartoon], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
SELECT  T1.Country  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T1.id = T2.Channel  WHERE T2.Written_by = 'Todd Casey'
index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
The SQL query for the question "What are the countries that have cartoons on TV that were written by Todd Casey?" needs these tables = [Cartoon,TV_Channel], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'
SELECT  DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'
index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
The SQL query for the question "Which countries' TV channels are not playing any cartoon written by Todd Casey?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cartoons are written by Todd Casey?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT Country FROM TV_Channel WHERE Country NOT IN (SELECT Country FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT  DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Written_by = 'Todd Casey')
index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
 The SQL query for the question "What are the countries that are not playing cartoons written by Todd Casey?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by != 'Todd Casey'
SELECT  DISTINCT T1.Country  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T1.id = T2.Channel  WHERE T2.Written_by != 'Todd Casey'
index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
The SQL query for the question "Find the series name and country of the TV channel that is playing some cartoons directed by Ben Jones and Michael Chang." needs these tables = [TV_Channel,Cartoon], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the series name and country of TV channel playing cartoons directed by Ben Jones and Michael Chang"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'
SELECT  T1.series_name, T1.Country  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T1.id = T2.Channel  WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'
index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
The SQL query for the question "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the TV channels playing cartoons directed by Ben Jones" and "Find the TV channels playing cartoons directed by Michael Chang"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT series_name, Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Directed_by = 'Ben Jones' UNION SELECT series_name, Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Directed_by = 'Michael Chang'
SELECT  series_name, Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang'
index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
The SQL query for the question "find the pixel aspect ratio and nation of the tv channels that do not use English." needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT  Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
The SQL query for the question "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?" needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the pixel aspect ratio and country of origin for TV channels that do not use English?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT  Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
The SQL query for the question "find id of the tv channels that from the countries where have more than two tv channels." needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT id FROM TV_Channel GROUP BY Country HAVING count(*) > 2
SELECT  id  FROM TV_Channel  GROUP BY Country  HAVING COUNT(*) > 2
index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
The SQL query for the question "What are the ids of all tv channels that have more than 2 TV channels?" needs these tables = [TV_Channel], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT id FROM TV_Channel GROUP BY id HAVING count(series_name) > 2
SELECT  id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2
index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
The SQL query for the question "find the id of tv channels that do not play any cartoon directed by Ben Jones." needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cartoons are directed by Ben Jones?"]. 
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT  TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN      (SELECT Cartoon.Channel       FROM Cartoon       WHERE Directed_by = 'Ben Jones')
index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
The SQL query for the question "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["ids of TV channels that have cartoons directed by Ben Jones"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by  = 'Ben Jones')
SELECT  TV_Channel.id  FROM TV_Channel  LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IS NULL OR Cartoon.Directed_by != 'Ben Jones'
index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
The SQL query for the question "find the package option of the tv channel that do not have any cartoon directed by Ben Jones." needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cartoons are directed by Ben Jones?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT  Package_Option  FROM TV_Channel  WHERE id NOT IN      (SELECT Channel       FROM Cartoon       WHERE Directed_by = 'Ben Jones')
index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
The SQL query for the question "What are the package options of all TV channels that are not playing any cartoons directed by Ben Jones?" needs these tables = [TV_Channel, Cartoon], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cartoons are directed by Ben Jones?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT  Package_Option  FROM TV_Channel  WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
The SQL query for the question "How many poker players are there?" needs the table = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of poker players"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM poker_player
SELECT  COUNT(*) FROM poker_player
index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
The SQL query for the question "Count the number of poker players." needs the table = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [number of poker players].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM poker_player
SELECT  COUNT(DISTINCT People_ID) FROM poker_player
index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
 The SQL query for the question "List the earnings of poker players in descending order." needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT  Earnings FROM poker_player ORDER BY Earnings DESC
index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
The SQL query for the question "What are the earnings of poker players, ordered descending by value?" needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT  poker_player.Earnings FROM poker_player ORDER BY Earnings DESC
index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
The SQL query for the question "List the final tables made and the best finishes of poker players." needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT  Final_Table_Made, Best_Finish FROM poker_player
index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
The SQL query for the question "What are the final tables made and best finishes for all poker players?" needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player
index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
The SQL query for the question "What is the average earnings of poker players?" needs the table = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["average earnings"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Earnings) FROM poker_player
SELECT  AVG(Earnings) FROM poker_player
index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
The SQL query for the question "Return the average earnings across all poker players." needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average earnings"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Earnings) FROM poker_player
SELECT  AVG(Earnings) FROM poker_player
index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
The SQL query for the question "What is the money rank of the poker player with the highest earnings?" needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT  Money_Rank  FROM poker_player  ORDER BY Earnings DESC  LIMIT 1
index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
The SQL query for the question "Return the money rank of the player with the greatest earnings." needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT  Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
The SQL query for the question "What is the maximum number of final tables made among poker players with earnings less than 200000?" needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["maximum number of final tables made"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT  MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 GROUP BY Poker_Player_ID
index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
The SQL query for the question "Return the maximum final tables made across all poker players who have earnings below 200000." needs these tables = [poker_player], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["maximum final tables made"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT  MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000
index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
 The SQL query for the question "What are the names of poker players?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["poker player names"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people JOIN poker_player ON People_ID = poker_player.People_ID
SELECT  Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID
index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
The SQL query for the question "Return the names of all the poker players." needs the tables [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["names of poker players"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people
SELECT people.Name FROM people
index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
The SQL query for the question "What are the names of poker players whose earnings is higher than 300000?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of poker players whose earnings is higher than 300000"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000
SELECT  Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  WHERE Earnings > 300000
index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
The SQL query for the question "Give the names of poker players who have earnings above 300000." needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Names of poker players"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
SELECT  T1.Name  FROM people AS T1  INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  WHERE T2.Earnings > 300000
index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
 The SQL query for the question "List the names of poker players ordered by the final tables made in ascending order." needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of names of poker players ordered by final tables made"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made asc
SELECT  T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  ORDER BY T2.Final_Table_Made ASC
index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
The SQL query for the question "What are the names of poker players, ordered ascending by the number of final tables they have made?" needs these tables = [people,poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC
SELECT  T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made
index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
The SQL query for the question "What is the birth date of the poker player with the lowest earnings?" needs these tables = [people,poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1
SELECT  Birth_Date  FROM people  JOIN poker_player  ON people.People_ID = poker_player.People_ID  ORDER BY Earnings ASC  LIMIT 1
index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
The SQL query for the question "Return the birth date of the poker player with the lowest earnings." needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Birth_Date FROM people JOIN poker_player ON People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1
SELECT  Birth_Date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY Earnings ASC  LIMIT 1
index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
The SQL query for the question "What is the money rank of the tallest poker player?" needs these tables = [poker_player, people], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1
SELECT  Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Height DESC  LIMIT 1
index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
The SQL query for the question "Return the money rank of the poker player with the greatest height." needs these tables = [poker_player, people], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1
SELECT  Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Height DESC  LIMIT 1
index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
The SQL query for the question "What is the average earnings of poker players with height higher than 200?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average earnings"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT  AVG(Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE Height > 200
index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
The SQL query for the question "Give average earnings of poker players who are taller than 200." needs these tables = [poker_player,people], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average earnings"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT  AVG(Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
The SQL query for the question "What are the names of poker players in descending order of earnings?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Names of poker players in descending order of earnings"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
SELECT  T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  ORDER BY T2.Earnings DESC
index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
The SQL query for the question "Return the names of poker players sorted by their earnings descending." needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Return the names of poker players"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC
SELECT  people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
The SQL query for the question "What are different nationalities of people and the corresponding number of people from each nation?" needs the table [people], so we don't need JOIN.
Plus, it requires nested queries with the COUNT function for grouping, and we need the answer to the questions = ["Different nationalities of people and the corresponding count of people from each nation"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Nationality, count(*) FROM people GROUP BY Nationality
SELECT  Nationality, COUNT(*)  FROM people  GROUP BY Nationality
index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
The SQL query for the question "How many people are there of each nationality?" needs the table = [people], so we don't need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT  Nationality, COUNT(*) FROM people GROUP BY Nationality
index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
The SQL query for the question "What is the most common nationality of people?" needs the table [people], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
 The SQL query for the question "Give the nationality that is most common across all people." needs the table = [people], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Give the nationality that is most common across all people."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
The SQL query for the question "What are the nationalities that are shared by at least two people?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which nationalities are shared by at least two people?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT  Nationality  FROM people  GROUP BY Nationality  HAVING COUNT(*) >= 2
index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
The SQL query for the question "Return the nationalities for which there are two or more people." needs the tables = [people], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Return the nationalities for which there are more than two people."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT  Nationality  FROM people  GROUP BY Nationality  HAVING COUNT(People_ID) >= 2
index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
The SQL query for the question "List the names and birth dates of people in ascending alphabetical order of name." needs these tables = [people], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and birth dates of people"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT  Name, Birth_Date  FROM people  ORDER BY Name ASC
index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
The SQL query for the question "What are the names and birth dates of people, ordered by their names in alphabetical order?" needs the table = [people], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and birth dates of people, ordered by their names in alphabetical order"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT  Name, Birth_Date  FROM people  ORDER BY Name ASC
index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
The SQL query for the question "Show names of people whose nationality is not 'Russia'." needs the table = [people], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["names of people"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM people WHERE Nationality != 'Russia'
SELECT  Name FROM people WHERE Nationality != 'Russia'
index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
The SQL query for the question "What are the names of people who are not from Russia?" needs the table "people", so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of people who are not from Russia"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT  Name FROM people WHERE Nationality <> 'Russia'
index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
The SQL query for the question "List the names of people that are not poker players." needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT  Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
 The SQL query for the question "What are the names of people who do not play poker?" needs these tables = [people, poker_player], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Names of people who do not play poker."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT  Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
The SQL query for the question "How many distinct nationalities are there?" needs the table = [people], so we don't need JOIN.
The question doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of distinct nationalities"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT  COUNT(DISTINCT Nationality) FROM people
index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
The SQL query for the question "Count the number of different nationalities." needs only the table [people], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT  COUNT(DISTINCT Nationality) FROM people
index is 687
SELECT count(*) FROM area_code_state
How many states are there?
The SQL query for the question "How many states are there?" needs just the table [AREA_CODE_STATE], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE
SELECT  COUNT(DISTINCT state) FROM AREA_CODE_STATE
index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
The SQL query for the question "List the contestant numbers and names, ordered by contestant name descending" needs the CONTESTANTS table, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of contestant numbers and names, ordered by name descending"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT  contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
The SQL query for the question "List the vote ids, phone numbers and states of all votes." needs these tables = [VOTES], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT vote_id, phone_number, state FROM VOTES
SELECT  vote_id, phone_number, state  FROM VOTES
index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
The SQL query for the question "What are the maximum and minimum values of area codes?" needs the table = [AREA_CODE_STATE], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
The SQL query for the question "What is the last date created of votes from the state 'CA'?" needs the tables [VOTES, AREA_CODE_STATE], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT  MAX(created) FROM VOTES WHERE state = 'CA'
index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
The SQL query for the question "What are the names of the contestants whose names are not 'Jessie Alloway'" needs the table [CONTESTANTS], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
SELECT  contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
The SQL query for the question "What are the distinct states and create time of all votes?" needs the tables [VOTES], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT DISTINCT state, created FROM VOTES
SELECT  DISTINCT state, created  FROM VOTES
index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
 The SQL query for the question "What are the contestant numbers and names of the contestants who had at least two votes?" needs these tables = [CONTESTANTS,VOTES], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["contestant numbers and names of the contestants"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT CONTESTANTS.contestant_number , CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number , CONTESTANTS.contestant_name HAVING COUNT(VOTES.vote_id) >= 2
SELECT  CONTESTANTS.contestant_number, CONTESTANTS.contestant_name  FROM CONTESTANTS  JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number  GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name  HAVING COUNT(VOTES.vote_id) >= 2
index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
Slicing error for the schema_linking module
 The SQL query for the question "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?" needs these tables = [CONTESTANTS, VOTES], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["contestant number, contestant name"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY count(vote_id) ASC LIMIT 1)
SELECT  contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number = (     SELECT contestant_number      FROM VOTES      GROUP BY contestant_number      ORDER BY count(vote_id) ASC      LIMIT 1 )
index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
 The SQL query for the question "What are the number of votes from state 'NY' or 'CA'?" needs these tables = [VOTES], so we don't need JOIN. Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].

So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*)  FROM VOTES  WHERE state IN ('NY', 'CA')
index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
The SQL query for the question "How many contestants did not get voted?" needs these tables = [CONTESTANTS, VOTES], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which contestants got voted?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM CONTESTANTS - SELECT count(*) FROM VOTES
SELECT  count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
 The SQL query for the question "What is the area code in which the most voters voted?" needs these tables = [AREA_CODE_STATE,VOTES], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AREA_CODE_STATE.area_code, count(VOTES.state) as votes_count FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY votes_count DESC LIMIT 1
SELECT  AREA_CODE_STATE.area_code, count(*) as votes_count  FROM VOTES  JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state  GROUP BY AREA_CODE_STATE.area_code  ORDER BY votes_count DESC  LIMIT 1
index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
The SQL query for the question "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?" needs these tables = [VOTES, CONTESTANTS], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["create dates, states, phone numbers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT  created, state, phone_number  FROM VOTES  JOIN CONTESTANTS  ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
The SQL query for the question "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'." needs these tables = [AREA_CODE_STATE,CONTESTANTS,VOTES], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the area codes where voters voted for both contestants"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT area_code FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') 
INTERSECT 
SELECT area_code FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')
SELECT  area_code  FROM VOTES  WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')  INTERSECT  SELECT area_code  FROM VOTES  WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')
index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
The SQL query for the question "Return the names of the contestants whose names contain the substring 'Al'." needs this table = [CONTESTANTS], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT  contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
The SQL query for the question "What are the names of all the countries that became independent after 1950?" needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country WHERE IndepYear > 1950
SELECT  Name  FROM country  WHERE IndepYear > 1950
index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
The SQL query for the question "Give the names of the nations that were founded after 1950." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country WHERE IndepYear > 1950
SELECT Name  FROM country  WHERE IndepYear > 1950
index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
The SQL query for the question "How many countries have a republic as their form of government?" needs the table [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
The SQL query for the question "How many countries have governments that are republics?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
The SQL query for the question "What is the total surface area of the countries in the Caribbean region?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
The SQL query for the question "How much surface area do the countries in the Caribbean cover together?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT  SUM(SurfaceArea)  FROM country  WHERE Region = 'Caribbean'
index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
The SQL query for the question "Which continent is Anguilla in?" needs the table country, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT  Continent FROM country WHERE Name = 'Anguilla'
index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
The SQL query for the question "What is the continent name which Anguilla belongs to?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT  Continent FROM country WHERE Name = 'Anguilla'
index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
The SQL query for the question "Which region is the city Kabul located in?" needs these tables = [country,city], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'
SELECT T1.Region  FROM country AS T1  JOIN city AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Name = 'Kabul'
index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
The SQL query for the question "What region is Kabul in?" needs these tables = [country, city], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What region is Kabul in?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Region FROM country JOIN city ON country.Code  =  city.CountryCode WHERE city.Name  =  'Kabul'
SELECT  country.Region  FROM country  JOIN city ON country.Code = city.CountryCode  WHERE city.Name = 'Kabul'
index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
The SQL query for the question "Which language is the most popular in Aruba?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1
SELECT  Language  FROM countrylanguage  WHERE CountryCode = 'ABW'  GROUP BY Language  ORDER BY Percentage DESC  LIMIT 1
index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
The SQL query for the question "What language is predominantly spoken in Aruba?" needs these tables = [countrylanguage,city], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.Language FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Name = "Aruba" AND T2.Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE CountryCode = T1.CountryCode)
SELECT  T2.Language  FROM city AS T1  JOIN countrylanguage AS T2  ON T1.CountryCode = T2.CountryCode  WHERE T1.Name = "Aruba"  AND T2.Percentage =  (SELECT MAX(Percentage)  FROM countrylanguage  WHERE CountryCode = T1.CountryCode) GROUP BY T2.Language
index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
The SQL query for the question "What are the population and life expectancies in Brazil?" needs these tables = [city, country], so we would need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["population and life expectancies in Brazil"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Population, LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'Brazil'
SELECT  city.Population, country.LifeExpectancy  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE country.Name = 'Brazil'
index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
The SQL query for the question "Give me Brazil’s population and life expectancies." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Brazil’s population and life expectancies."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT  Population, LifeExpectancy  FROM country  WHERE Name = 'Brazil'
index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
 The SQL query for the question "What are the region and population of Angola?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT  Region, Population FROM country WHERE Name = 'Angola'
index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
The SQL query for the question "What region does Angola belong to and what is its population?" needs the table [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["region of Angola", "population of Angola"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT  Region, Population FROM country WHERE Name = 'Angola'
index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
The SQL query for the question "What is the average expected life expectancy for countries in the region of Central Africa?" needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["average life expectancy"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT  AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
The SQL query for the question "How long is the people’s average life expectancy in Central Africa?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa'
SELECT  AVG(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa'
index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
The SQL query for the question "What is the name of country that has the shortest life expectancy in Asia?" needs the table = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the country with the shortest life expectancy in Asia"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
SELECT  Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy ASC  LIMIT 1
index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
The SQL query for the question "Give the name of the country in Asia with the lowest life expectancy." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
SELECT  Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy DESC  LIMIT 1
index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
The SQL query for the question "What is the total population and maximum GNP in Asia?" needs these tables = [city, country], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Total population and maximum GNP in Asia"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT sum(city.population) ,  max(country.GNP) FROM city JOIN country ON city.CountryCode  =  country.Code WHERE country.Continent  =  'Asia'
SELECT  sum(city.population), max(country.GNP)  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE country.Continent = 'Asia'
index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
The SQL query for the question "How many people live in Asia, and what is the largest GNP among them?" needs the tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of people living in Asia, Largest GNP in Asia"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT  SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
The SQL query for the question "What is the average life expectancy in African countries that are republics?" needs the tables [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT  AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
The SQL query for the question "Give the average life expectancy for countries in Africa which are republics?" needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average life expectancy"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT  AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm = 'Republic' GROUP BY GovernmentForm
index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
 The SQL query for the question "What is the total surface area of the continents Asia and Europe?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT   SUM(SurfaceArea) as Total_Surface_Area  FROM country  WHERE Continent IN ('Asia', 'Europe') GROUP BY Continent
index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
The SQL query for the question "Give the total surface area covered by countries in Asia or Europe." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent = 'Asia' OR Continent = 'Europe'
index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
The SQL query for the question "How many people live in Gelderland district?" needs the tables [city], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT  SUM(Population)  FROM city  WHERE District = 'Gelderland'
index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
The SQL query for the question "What is the total population of Gelderland district?" needs these tables = [city,country], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: NON-NESTED
NESTED
SELECT sum(city.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = 'Gelderland'
SELECT  sum(city.Population) as total_population  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.District = 'Gelderland'
index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
The SQL query for the question "What is the average GNP and total population in all nations whose government is US territory?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average GNP and total population"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'
SELECT  AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US territory'
index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
The SQL query for the question "Give the mean GNP and total population of nations which are considered US territory" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["mean GNP and total population of US territories"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(GNP), SUM(Population) FROM country WHERE Region = 'North America' AND GovernmentForm LIKE '%territory%'
SELECT  AVG(GNP), SUM(Population)  FROM country  WHERE Region = 'North America' AND GovernmentForm LIKE '%territory%'
index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
The SQL query for the question "How many unique languages are spoken in the world?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT  COUNT(DISTINCT Language) FROM countrylanguage
index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
 The SQL query for the question "What is the number of distinct languages used around the world?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of distinct languages used around the world."].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT  COUNT(DISTINCT Language) FROM countrylanguage
index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
The SQL query for the question "How many type of governments are in Africa?" needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT  COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm
index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
 The SQL query for the question "How many different forms of governments are there in Africa?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm
index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
The SQL query for the question "What is the total number of languages used in Aruba?" needs these tables = [countrylanguage,country], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count( DISTINCT language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name  =  'Aruba')
SELECT count(DISTINCT Language)  FROM countrylanguage  WHERE CountryCode = (SELECT Code                       FROM country                       WHERE Name = 'Aruba')
index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
 The SQL query for the question "How many languages are spoken in Aruba?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(Language)  FROM countrylanguage  WHERE CountryCode = 'ABW'
index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
The SQL query for the question "How many official languages does Afghanistan have?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM countrylanguage WHERE Language  IN (SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT code FROM country WHERE Name  =  'Afghanistan' ) AND IsOfficial  =  'T')
SELECT count(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'
index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
The SQL query for the question "How many official languages are spoken in Afghanistan?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT  COUNT(Language)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
 The SQL query for the question "What is name of the country that speaks the largest number of languages?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name ORDER BY COUNT(Language) DESC LIMIT 1
SELECT  country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  ORDER BY COUNT(countrylanguage.Language) DESC  LIMIT 1
index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
The SQL query for the question "Give the name of the nation that uses the greatest amount of languages." needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM country GROUP BY Name ORDER BY COUNT(Language) DESC LIMIT 1
SELECT  country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  ORDER BY COUNT(countrylanguage.Language) DESC  LIMIT 1
index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
The SQL query for the question "Which continent has the most diverse languages?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT continent , COUNT(DISTINCT language) AS num_languages FROM countrylanguage AS C INNER JOIN country AS T ON T.code = C.countrycode GROUP BY T.continent
SELECT  T.Continent, COUNT(DISTINCT C.Language) AS num_languages  FROM countrylanguage AS C  INNER JOIN country AS T ON T.Code = C.CountryCode  GROUP BY T.Continent
index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
The SQL query for the question "Which continent speaks the most languages?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Continent , COUNT(Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY COUNT(Language) DESC LIMIT 1
SELECT  Continent, COUNT(DISTINCT Language) AS NumLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1
index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
The SQL query for the question "How many countries speak both English and Dutch?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries speak English?","Which countries speak Dutch?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T
SELECT  COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T
index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
The SQL query for the question "What is the number of nations that use English and Dutch?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of nations that use English", "Number of nations that use Dutch"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
(SELECT count(*) FROM countrylanguage WHERE language = 'English') INTERSECT (SELECT count(*) FROM countrylanguage WHERE language = 'Dutch')
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language IN ('English', 'Dutch')
index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
 The SQL query for the question "What are the names of nations speak both English and French?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of nations that speak English", "Name of nations that speak French"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'English' AND Country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT  country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  AND country.Code IN      (SELECT CountryCode       FROM countrylanguage       WHERE Language = 'French')
index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
 The SQL query for the question "Give the names of nations that speak both English and French." needs these tables = [country,countrylanguage], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Give the names of nations that speak English"] and ["Give the names of nations that speak French"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT  T1.Name  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'English'  AND T2.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
The SQL query for the question "What are the names of nations where both English and French are official languages?" needs these tables = [country, countrylanguage], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names of nations where English is an official language?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE Code IN 
(SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') 
AND Code IN 
(SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')
SELECT  country.Name FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country ON cl1.CountryCode = country.Code WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T' GROUP BY country.Name
index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
The SQL query for the question "Give the names of countries with English and French as official languages." needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (Language = 'English' AND IsOfficial = 'T') OR (Language = 'French' AND IsOfficial = 'T') GROUP BY country.Code HAVING COUNT(DISTINCT Language) = 2
SELECT  country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (Language = 'English' AND IsOfficial = 'T') OR (Language = 'French' AND IsOfficial = 'T')  GROUP BY country.Name  HAVING COUNT(DISTINCT Language) = 2
index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
The SQL query for the question "What is the number of distinct continents where Chinese is spoken?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count( DISTINCT T1.Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'
SELECT  COUNT(DISTINCT T1.Continent)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Chinese'
index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
 The SQL query for the question "How many continents speak Chinese?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT  COUNT(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' GROUP BY T1.Continent
index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
The SQL query for the question "What are the regions that use English or Dutch?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which regions use English?", "Which regions use Dutch?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')
SELECT  DISTINCT Region FROM country WHERE Code IN      (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' OR Language = 'Dutch')
index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
The SQL query for the question "Which regions speak Dutch or English?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' OR T2.Language  =  'English'
SELECT  T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language IN ('Dutch', 'English')
index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
 The SQL query for the question "What are the countries where either English or Dutch is the official language?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with OR condition, and we need the answer to the questions = ["Which countries have English as official language?", "Which countries have Dutch as official language?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T') OR (countrylanguage.Language = 'Dutch' AND countrylanguage.IsOfficial = 'T')
SELECT  country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')  OR (countrylanguage.Language = 'Dutch' AND countrylanguage.IsOfficial = 'T')
index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
The SQL query for the question "Which countries have either English or Dutch as an official language?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have English as an official language?", "Which countries have Dutch as an official language?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')
SELECT  c.Name  FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'
index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
 The SQL query for the question "Which language is the most popular on the Asian continent?" needs these tables = [countrylanguage, country], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' ORDER BY T1.Percentage DESC LIMIT 1
SELECT  T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.Continent = 'Asia'  GROUP BY T1.Language ORDER BY SUM(T1.Percentage) DESC  LIMIT 1
index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
 The SQL query for the question "What is the language that is used by the largest number of Asian nations?" needs these tables = [countrylanguage,country], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT CL.Language FROM countrylanguage AS CL JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' GROUP BY CL.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT  CL.Language  FROM countrylanguage AS CL  JOIN country AS C ON CL.CountryCode = C.Code  WHERE C.Continent = 'Asia'  GROUP BY CL.Language  ORDER BY COUNT(C.Code) DESC  LIMIT 1
index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
The SQL query for the question "Which languages are spoken by only one country in republic governments?" needs these tables = [countrylanguage, country], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which languages are spoken by only one country?" and "Which countries have republic governments?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT T1.Language FROM countrylanguage AS T1 WHERE (SELECT COUNT(CountryCode) FROM countrylanguage AS T2 WHERE T1.Language  =  T2.Language)  =  1 AND (SELECT GovernmentForm FROM country WHERE country.Code  =  T1.CountryCode)  =  'Republic'
SELECT  T1.Language  FROM countrylanguage AS T1  INNER JOIN country AS C ON T1.CountryCode = C.Code WHERE (SELECT COUNT(CountryCode) FROM countrylanguage AS T2 WHERE T1.Language = T2.Language) = 1  AND C.GovernmentForm = 'Republic'
index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
 The SQL query for the question "What languages are only used by a single country with a republic government?" needs these tables = [countrylanguage, country], so we need JOIN.
It also requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which languages are used by single countries with a republic government?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT cl.Language
FROM countrylanguage AS cl
JOIN country AS c ON cl.CountryCode = c.Code
WHERE c.GovernmentForm = 'Republic'
GROUP BY cl.Language
HAVING COUNT(DISTINCT cl.CountryCode) = 1
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.Language) = 1
index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
The SQL query for the question "Find the city with the largest population that uses English." needs these tables = [city,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cities use English?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY Population DESC LIMIT 1
SELECT  city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1
index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
 The SQL query for the question "What is the most populace city that speaks English?" needs these tables = [city, countrylanguage], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1
SELECT  city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  ORDER BY city.Population DESC  LIMIT 1
index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
The SQL query for the question "Find the name, population and expected life length of asian country with the largest area?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Population, LifeExpectancy 
FROM country 
WHERE Continent = 'Asia' 
ORDER BY SurfaceArea DESC 
LIMIT 1
SELECT  Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1
index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
The SQL query for the question "What are the name, population, and life expectancy of the largest Asian country by land?" needs the tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["name, population, and life expectancy of the largest Asian country by land"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT  Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1
index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
The SQL query for the question "What is the average life expectancy in the countries where English is not the official language?" needs these tables = [country, countrylanguage], so we need JOIN.
It doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["average life expectancy"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT  avg(LifeExpectancy)  FROM country  WHERE Code NOT IN      (SELECT CountryCode       FROM countrylanguage       WHERE Language = 'English'       AND IsOfficial = 'F')
index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
The SQL query for the question "Give the mean life expectancy of countries in which English is not the official language." needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(LifeExpectancy) FROM country WHERE NOT EXISTS (SELECT * FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')
SELECT  avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
The SQL query for the question "What is the total number of people living in the nations that do not use English?" needs these tables = [city,country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which nations use English?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT sum(city.Population) FROM city WHERE countrycode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')
SELECT  sum(city.Population) FROM city  JOIN country ON city.CountryCode = country.Code WHERE country.Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' )
index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
The SQL query for the question "How many people live in countries that do not speak English?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT sum(Population) FROM country WHERE NOT EXISTS (SELECT * FROM countrylanguage WHERE Code = CountryCode AND Language = 'English')
SELECT  sum(Population)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
The SQL query for the question "What is the official language spoken in the country whose head of state is Beatrix?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the official language spoken?"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
SELECT T2.Language  FROM countrylanguage AS T2  JOIN country AS T1 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
The SQL query for the question "What is the official language used in the country the name of whose head of state is Beatrix." needs these tables = [country,countrylanguage], so we need JOIN.

Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].

So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = "Beatrix" AND T2.isofficial = "T"
SELECT  T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = "Beatrix" AND T2.IsOfficial = "T"
index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
 The SQL query for the question "What is the total number of unique official languages spoken in the countries that are founded before 1930?" needs these tables = [countrylanguage, country], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930
SELECT  COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 AND T1.IsOfficial = "T"
index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
The SQL query for the question "For the countries founded before 1930, what is the total number of distinct official languages?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Total number of distinct official languages for countries founded before 1930"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.IndepYear ,  Count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930
SELECT T1.Code, Count( DISTINCT T2.Language )  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.IndepYear < 1930 GROUP BY T1.Code
index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
 The SQL query for the question "What are the countries that have greater surface area than any country in Europe?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which country is in Europe with the largest surface area?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT  Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
The SQL query for the question "Which countries have greater area than that of any country in Europe?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have greater area than any country in Europe?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT  Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea)                       FROM country                       WHERE Continent = 'Europe')
index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
The SQL query for the question "What are the African countries that have a population less than any country in Asia?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have population less than any Asian country?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT Name FROM country WHERE Continent  =  'Africa' AND Population  <  (SELECT min(Population) FROM country WHERE Continent  =  'Asia')
SELECT  Name  FROM      country  WHERE      Continent = 'Africa'      AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')
index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
The SQL query for the question "Which African countries have a smaller population than that of any country in Asia?" needs the tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries have a smaller population than countries in Asia?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT c1.Name FROM country AS c1 WHERE Continent = 'Africa' AND Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE Continent = 'Asia')
SELECT  c1.Name  FROM country AS c1  WHERE Continent = 'Africa'  AND Population < (SELECT MIN(c2.Population)                    FROM country AS c2                    WHERE Continent = 'Asia')
index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
The SQL query for the question "Which Asian countries have a population that is larger than any country in Africa?" needs these tables = [country, city], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries are in Asia?", "Which countries are in Africa?", "What is the population of each country in Asia and Africa?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')
SELECT  Name  FROM country  WHERE Continent = 'Asia'  AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
The SQL query for the question "What are the Asian countries which have a population larger than that of any country in Africa?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries are in Asia?" and "Which countries are in Africa?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SQL slicing error
SELECT
SELECT country.Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
The SQL query for the question "What are the country codes for countries that do not speak English?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Countries that speak English"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English')
SELECT  Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
The SQL query for the question "Return the country codes for countries that do not speak English." needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Return the country codes"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT  code FROM country WHERE code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
 The SQL query for the question "What are the country codes of countries where people use languages other than English?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Code FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'
SELECT  T1.Code FROM country AS T1  LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language != 'English'
index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
The SQL query for the question "Give the country codes for countries in which people speak languages that are not English" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries speak English?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  "English")
SELECT  Code  FROM country  WHERE Code NOT IN  (SELECT CountryCode  FROM countrylanguage  WHERE Language != "English")
index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
The SQL query for the question "What are the codes of the countries that do not speak English and whose government forms are not Republic?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries speak English?", "Which countries have Republic government form?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English' AND IsOfficial  =  'T') AND Code NOT IN (SELECT Code FROM country WHERE GovernmentForm  =  'Republic')
SELECT  Code  FROM country  WHERE Code NOT IN  (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')  AND GovernmentForm <> 'Republic'
index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
The SQL query for the question "Return the codes of countries that do not speak English and do not have Republics for governments." needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries speak English and have Republics for governments?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English') AND GovernmentForm NOT IN ('Republic')
SELECT  Code  FROM country  WHERE Code NOT IN      (SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English')  AND GovernmentForm <> 'Republic'
index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
The SQL query for the question "Which cities are in European countries where English is not the official language?" needs these tables = [city, country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which cities are in European countries where English is the official language?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT city.Name
FROM city
JOIN country ON city.CountryCode = country.Code
JOIN countrylanguage ON country.Code = countrylanguage.CountryCode
WHERE country.Continent = 'Europe' 
AND countrylanguage.Language = 'English' 
AND countrylanguage.IsOfficial = 'F'
SELECT  city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
The SQL query for the question "What are the names of cities in Europe for which English is not the official language?" needs these tables = [city, country, countrylanguage], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT city.Name FROM city JOIN country ON city.CountryCode  =  country.Code JOIN countrylanguage ON city.CountryCode  =  countrylanguage.CountryCode  WHERE country.Continent  =  'Europe' AND countrylanguage.Language  =  'English' AND countrylanguage.IsOfficial <> 'T'
SELECT  city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
 The SQL query for the question "Which unique cities are in Asian countries where Chinese is the official language?" needs these tables = [city,country,countrylanguage], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of unique cities"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = "Asia" AND countrylanguage.Language = "Chinese" AND countrylanguage.IsOfficial = "Yes"
SELECT  city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON countrylanguage.CountryCode = country.Code  WHERE country.Continent = "Asia" AND countrylanguage.Language = "Chinese" AND countrylanguage.IsOfficial = "Yes"  GROUP BY city.Name
index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
The SQL query for the question "Return the different names of cities that are in Asia and for which Chinese is the official language." needs these tables = [city,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Return the names of cities that meet the specified criteria."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.name FROM city AS T1, countrylanguage AS T2 WHERE T1.CountryCode = T2.CountryCode AND T2.Language = 'Chinese' AND (SELECT Continent FROM country WHERE country.Code = T1.CountryCode) = 'Asia'
SELECT  DISTINCT T1.Name  FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode JOIN country AS T3 ON T1.CountryCode = T3.Code WHERE T2.Language = 'Chinese' AND T3.Continent = 'Asia'
index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
The SQL query for the question "What are the name, independence year, and surface area of the country with the smallest population?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
SELECT  Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
The SQL query for the question "Give the name, year of independence, and surface area of the country that has the lowest population." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT  Name, IndepYear, SurfaceArea  FROM country  ORDER BY Population ASC  LIMIT 1
index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
 The SQL query for the question "What are the population, name and leader of the country with the largest area?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT  Population, Name, HeadOfState  FROM country  WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
 The SQL query for the question "Give the name, population, and head of state for the country that has the largest area." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name, Population, HeadOfState  FROM country  ORDER BY SurfaceArea DESC  LIMIT 1
index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
 The SQL query for the question "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it requires nested queries with (COUNT), and we need the answer to the questions = ["Which countries speak at least 3 languages?"]. 
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3
SELECT  country.Name, COUNT(countrylanguage.Language) AS num_languages  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  HAVING COUNT(countrylanguage.Language) >= 3
index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
The SQL query for the question "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""]. So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , COUNT(T2.Language) AS language_count FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Code HAVING COUNT(T2.Language) > 2
SELECT  T1.Name , COUNT(T2.Language) AS language_count  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) > 2
index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
The SQL query for the question "Find the number of cities in each district whose population is greater than the average population of cities?" needs these tables = [city], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT District, COUNT(*) 
FROM city 
WHERE Population > (SELECT AVG(Population) FROM city) 
GROUP BY District
SELECT  District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District
index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
The SQL query for the question "How many cities in each district have a population that is above the average population across all cities?" needs the table [city], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the average population across all cities?"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT district ,  count(name) FROM city WHERE population > (SELECT avg(population) FROM city) GROUP BY district
SELECT  district, COUNT(name)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
 The SQL query for the question "Find the government form name and total population for each government form whose average life expectancy is longer than 72." needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the average life expectancy for each government form"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT GovernmentForm, SUM(Population) as total_population FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
SELECT  GovernmentForm, SUM(Population) as total_population  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72
index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
 The SQL query for the question "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?" needs these tables = [country,city], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which government forms have an average life expectancy greater than 72?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT country.GovernmentForm , SUM(city.Population) FROM country JOIN city ON city.CountryCode  =  country.Code WHERE country.LifeExpectancy  > 72 GROUP BY country.GovernmentForm
SELECT  country.GovernmentForm , SUM(city.Population) FROM country JOIN city ON city.CountryCode  =  country.Code WHERE country.LifeExpectancy  > 72 GROUP BY country.GovernmentForm
index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
The SQL query for the question "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the average life expectancy for each continent"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT country.Continent ,  avg ( LifeExpectancy ) ,  SUM ( population )  FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )  <  72
SELECT  country.Continent, AVG(LifeExpectancy), SUM(country.Population)  FROM country  GROUP BY country.Continent  HAVING AVG(LifeExpectancy) < 72
index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
 The SQL query for the question "What are the different continents and the total population and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the different continents and the total population and average life expectancy for each continent with average life expectancy less than 72?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Continent ,  Sum(Population) ,  AVG(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent
SELECT  Continent, SUM(country.Population), AVG(country.LifeExpectancy)  FROM country  WHERE country.LifeExpectancy < 72  GROUP BY Continent
index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
The SQL query for the question "What are the names and areas of countries with the top 5 largest area?" needs the tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and areas of countries"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, SurfaceArea
FROM country
ORDER BY SurfaceArea DESC
LIMIT 5
SELECT  Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
The SQL query for the question "Return the names and surface areas of the 5 largest countries." needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names and surface areas of countries"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT  Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
 The SQL query for the question "What are names of countries with the top 3 largest population?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT  Name  FROM country  ORDER BY Population DESC  LIMIT 3
index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
 The SQL query for the question "Return the names of the 3 most populated countries." needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT  Name  FROM country  ORDER BY Population DESC  LIMIT 3
index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
The SQL query for the question "What are the names of the nations with the 3 lowest populations?" needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the nations with the lowest populations?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT  Name  FROM country  ORDER BY Population ASC  LIMIT 3
index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
The SQL query for the question "Return the names of the 3 countries with the fewest people." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT  Name  FROM country  ORDER BY Population ASC  LIMIT 3
index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
The SQL query for the question "how many countries are in Asia?" needs the table "country" and does not require any JOIN operation. It also does not require nested queries. The answer to the question is a single numerical value. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT  COUNT(*) FROM country WHERE Continent = 'Asia'
index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
The SQL query for the question "Count the number of countries in Asia." needs the table = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT  COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'
index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
The SQL query for the question "What are the names of the countries that are in the continent of Europe and have a population of 80000?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT  Name  FROM country  WHERE Continent = 'Europe' AND Population = 80000
index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
 The SQL query for the question "Give the names of countries that are in Europe and have a population equal to 80000." needs these tables = [country], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which countries are in Europe?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM country WHERE Population = 80000 AND Continent = 'Europe'
SELECT  Name  FROM country  WHERE Population = 80000 AND Continent = 'Europe'
index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
The SQL query for the question "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?" needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["total population and average area"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT  SUM(Population), AVG(SurfaceArea)  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000  GROUP BY Continent
index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
The SQL query for the question "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000." needs these tables = [country], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["total population and average surface area corresponding to countries in North America"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT  SUM(Population), AVG(SurfaceArea)  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000  GROUP BY Continent
index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
The SQL query for the question "What are the cities whose population is between 160000 and 900000?" needs these tables = [city], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT  city.Name  FROM city  WHERE Population BETWEEN 160000 AND 900000
index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
The SQL query for the question "Return the names of cities that have a population between 160000 and 900000" needs these tables = [city], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["city.Name"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT  city.Name  FROM city  WHERE city.Population BETWEEN 160000 AND 900000
index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
The SQL query for the question "Which language is spoken by the largest number of countries?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language 
FROM countrylanguage 
GROUP BY Language 
ORDER BY COUNT(DISTINCT CountryCode) DESC 
LIMIT 1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
The SQL query for the question "Give the language that is spoken in the most countries." needs the table [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT  Language  FROM countrylanguage  GROUP BY Language  ORDER BY COUNT(DISTINCT CountryCode) DESC  LIMIT 1
index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
The SQL query for the question "What is the language spoken by the largest percentage of people in each country?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), as we need to find the language spoken by the largest percentage, and we need the answer to the questions = ["Which language is spoken by the largest percentage of people in each country?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Language FROM countrylanguage WHERE Percentage IN (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)
SELECT Language  FROM countrylanguage  WHERE (CountryCode, Percentage) IN        (SELECT CountryCode, MAX(Percentage)         FROM countrylanguage         GROUP BY CountryCode)
index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
The SQL query for the question "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?" needs these tables = [country, countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Code, T2.Language FROM countrylanguage AS T2 JOIN country AS T1 ON T1.Code = T2.CountryCode WHERE Percentage = (SELECT max(Percentage) FROM countrylanguage GROUP BY CountryCode)
SELECT  T1.Code, T2.Language  FROM countrylanguage AS T2  JOIN country AS T1 ON T1.Code = T2.CountryCode  WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE T2.CountryCode = CountryCode)
index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
The SQL query for the question "What is the total number of countries where Spanish is spoken by the largest percentage of people?" needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the largest percentage of people speaking Spanish in countries"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT  count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE Language = 'Spanish') GROUP BY CountryCode
index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
The SQL query for the question "Count the number of countries for which Spanish is the predominantly spoken language." needs these tables = [countrylanguage], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT COUNT(DISTINCT cl.CountryCode)  FROM countrylanguage cl  WHERE Language = 'Spanish' AND IsOfficial = 'T'
index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
The SQL query for the question "What are the codes of countries where Spanish is spoken by the largest percentage of people?" needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1
SELECT  countrylanguage.CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  GROUP BY countrylanguage.CountryCode  ORDER BY Percentage DESC  LIMIT 1
index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
 The SQL query for the question "Return the codes of countries for which Spanish is the predominantly spoken language." needs these tables = [country,countrylanguage], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' AND T2.IsOfficial  =  'T'
SELECT T1.Code  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T' GROUP BY T1.Code
index is 822
SELECT count(*) FROM conductor
How many conductors are there?
 The SQL query for the question "How many conductors are there?" only needs the table [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Conductor_ID) FROM conductor
SELECT  COUNT(DISTINCT Conductor_ID) FROM conductor
index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
 The SQL query for the question "Count the number of conductors." needs the table = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [the number of conductors].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM conductor
SELECT  COUNT(DISTINCT Conductor_ID) FROM conductor
index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
The SQL query for the question "List the names of conductors in ascending order of age" needs the table [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of conductor names in ascending order of age"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Age ASC
SELECT  Name  FROM conductor  ORDER BY Age ASC
index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
The SQL query for the question "What are the names of conductors, ordered by age?" needs these tables = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Age
SELECT  Name  FROM conductor  ORDER BY Age
index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
The SQL query for the question "What are the names of conductors whose nationalities are not 'USA'?" needs the table = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names of conductors"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT  Name  FROM conductor  WHERE Nationality != 'USA'
index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
The SQL query for the question "Return the names of conductors that do not have the nationality 'USA'." needs these tables = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT  conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA'
index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
The SQL query for the question "What are the record companies of orchestras in descending order of years in which they were founded?" needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
The SQL query for the question "Return the record companies of orchestras, sorted descending by the years in which they were founded." needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
The SQL query for the question "What is the average attendance of shows?" needs these tables = [show], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Attendance) FROM show
SELECT  AVG(Attendance) FROM show
index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
The SQL query for the question "Return the average attendance across all shows." needs the table = [show], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the average attendance across all shows?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(Attendance) FROM show
SELECT  AVG(Attendance) FROM show
index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
 The SQL query for the question "What are the maximum and minimum share of performances whose type is not "Live final"." needs these tables = [performance], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Maximum share of performances whose type is not Live final", "Minimum share of performances whose type is not Live final"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'
index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
The SQL query for the question "Return the maximum and minimum shares for performances that do not have the type 'Live final'." needs these tables = [performance], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find performances with the type 'Live final'"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'
index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
 The SQL query for the question "How many different nationalities do conductors have?" needs the table = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT   COUNT(DISTINCT Nationality)  FROM conductor
index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
The SQL query for the question "Count the number of different nationalities of conductors" only needs the table [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT  COUNT(DISTINCT Nationality)  FROM conductor
index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
The SQL query for the question "List names of conductors in descending order of years of work." needs these tables = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT  Name FROM conductor ORDER BY Year_of_Work DESC
index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
The SQL query for the question "What are the names of conductors, sorted descending by the number of years they have worked?" needs these tables = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT  Name  FROM conductor  ORDER BY Year_of_Work DESC
index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
The SQL query for the question "List the name of the conductor with the most years of work." needs the table = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT  Name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1
index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
The SQL query for the question "What is the name of the conductor who has worked the greatest number of years?" needs the table = [conductor], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT  conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY COUNT(Year_of_Work) DESC LIMIT 1
index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
The SQL query for the question "Show the names of conductors and the orchestras they have conducted." needs these tables = [conductor, orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of conductors and the orchestras they have conducted"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name, Orchestra
FROM conductor
JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT  conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
The SQL query for the question "What are the names of conductors as well as the corresponding orchestras that they have conducted?" needs these tables = [conductor, orchestra], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Name of conductor and corresponding orchestra"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT  conductor.Name, orchestra.Orchestra  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
The SQL query for the question "Show the names of conductors that have conducted more than one orchestras." needs these tables = [conductor,orchestra], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1
SELECT  Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  HAVING COUNT(DISTINCT Orchestra_ID) > 1
index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
Slicing error for the schema_linking module
 The SQL query for the question "What are the names of conductors who have conducted at more than one orchestra?" needs these tables = [conductor, orchestra], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT  conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
The SQL query for the question "Show the name of the conductor that has conducted the most number of orchestras." needs these tables = [conductor, orchestra], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM conductor JOIN orchestra ON Conductor_ID  =  Conductor_ID GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT  Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY Name  ORDER BY COUNT(Orchestra_ID) DESC  LIMIT 1
index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
 The SQL query for the question "What is the name of the conductor who has conducted the most orchestras?" needs these tables = [conductor, orchestra], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM conductor GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT  conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1
index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
 The SQL query for the question "Please show the name of the conductor that has conducted orchestras founded after 2008." needs these tables = [conductor, orchestra], so we need JOIN.
As it only requires one JOIN and doesn't need nested queries, the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT  conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
The SQL query for the question "What are the names of conductors who have conducted orchestras founded after the year 2008?" needs these tables = [conductor,orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT  Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
 The SQL query for the question "Please show the different record companies and the corresponding number of orchestras." needs these tables = [orchestra], so we don't need JOIN.
Plus, it requires aggregation function COUNT, and we need the answer to the questions = ["Different record companies and the corresponding number of orchestras"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT  Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company
index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
The SQL query for the question "How many orchestras does each record company manage?" needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company, COUNT(Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT  Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
The SQL query for the question "Please show the record formats of orchestras in ascending order of count." needs the table [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC
SELECT  Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count
index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
The SQL query for the question "What are the major record formats of orchestras, sorted by their frequency?" needs the table [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Major_Record_Format, COUNT(*) AS Frequency 
FROM orchestra 
GROUP BY Major_Record_Format 
ORDER BY Frequency DESC
SELECT  Major_Record_Format, COUNT(*) AS Frequency  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY Frequency DESC
index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
 The SQL query for the question "List the record company shared by the most number of orchestras." needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Record_Company  FROM orchestra  GROUP BY Record_Company  ORDER BY COUNT(Orchestra_ID)  DESC LIMIT 1
index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
The SQL query for the question "What is the record company used by the greatest number of orchestras?" needs the table [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT  Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count  FROM orchestra  GROUP BY Record_Company  ORDER BY Orchestra_Count DESC  LIMIT 1
index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
 The SQL query for the question "List the names of orchestras that have no performance." needs these tables = [orchestra, performance], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT  Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
 The SQL query for the question "What are the orchestras that do not have any performances?" needs the tables = [orchestra,performance], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which orchestras have performances?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Orchestra_ID FROM orchestra WHERE NOT EXISTS (SELECT Orchestra_ID FROM performance WHERE orchestra.Orchestra_ID  =  performance.Orchestra_ID)
SELECT  Orchestra_ID  FROM orchestra  WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
The SQL query for the question "Show the record companies shared by orchestras founded before 2003 and after 2003." needs these tables = [orchestra], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the record companies shared by orchestras founded before 2003", "Show the record companies shared by orchestras founded after 2003"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT  DISTINCT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  UNION  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded > 2003
index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
The SQL query for the question "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?" needs these tables = [orchestra], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the record companies used by orchestras founded before 2003","Find the record companies used by orchestras founded after 2003"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT  Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  INTERSECT  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded > 2003
index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
The SQL query for the question "Find the number of orchestras whose record format is "CD" or "DVD"." needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT  COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
The SQL query for the question "Count the number of orchestras that have CD or DVD as their record format." needs these tables = [orchestra], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT  COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
The SQL query for the question "Show the years in which orchestras that have given more than one performance are founded." needs these tables = [orchestra, performance], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the years in which orchestras are founded that have given more than one performance."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)
SELECT  Year_of_Founded  FROM orchestra  WHERE Orchestra_ID IN (     SELECT Orchestra_ID      FROM performance      GROUP BY Orchestra_ID      HAVING COUNT(*) > 1 )
index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
The SQL query for the question "What are years of founding for orchestras that have had more than a single performance?" needs these tables = [orchestra, performance], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Year_of_Founded FROM orchestra WHERE EXISTS (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1)
SELECT  DISTINCT Year_of_Founded  FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID                         FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(Performance_ID) > 1)
index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
The SQL query for the question "How many high schoolers are there?" needs the table [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(ID) FROM Highschooler
SELECT  COUNT(ID) FROM Highschooler
index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
The SQL query for the question "Count the number of high schoolers." needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(DISTINCT ID) FROM Highschooler
index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
The SQL query for the question "Show the names and grades of each high schooler." needs the table [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, grade FROM Highschooler
SELECT  name, grade FROM Highschooler
index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
The SQL query for the question "What are the names and grades for each high schooler?" needs these tables = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, grade FROM Highschooler
SELECT  name, grade FROM Highschooler
index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
The SQL query for the question "Show all the grades of the high schoolers" needs the table Highschooler, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler
SELECT  grade FROM Highschooler
index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
 The SQL query for the question "What is the grade of each high schooler?" needs these tables = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler
SELECT  name, grade FROM Highschooler
index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
 The SQL query for the question "What grade is Kyle in?" needs the table Highschooler, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT  grade  FROM Highschooler  WHERE name = 'Kyle'
index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
 The SQL query for the question "Return the grade for the high schooler named Kyle." needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT  grade FROM Highschooler WHERE name = 'Kyle'
index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
The SQL query for the question "Show the names of all high schoolers in grade 10." needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name FROM Highschooler WHERE grade = 10
SELECT  name  FROM Highschooler  WHERE grade = 10
index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
 The SQL query for the question "What are the names of all high schoolers in grade 10?" needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name FROM Highschooler WHERE grade = 10
SELECT  name FROM Highschooler WHERE grade = 10
index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
The SQL query for the question "Show the ID of the high schooler named Kyle." needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT  ID  FROM Highschooler  WHERE name = 'Kyle'
index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
The SQL query for the question "What is Kyle's id?" needs the table = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Kyle's id"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT  ID FROM Highschooler WHERE name = 'Kyle'
index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
The SQL query for the question "How many high schoolers are there in grade 9 or 10?" needs these tables = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT  COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10)
index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
The SQL query for the question "Count the number of high schoolers in grades 9 or 10." needs the table [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(ID) FROM Highschoolers WHERE grade = 9 OR grade = 10
SELECT  COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10
index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
Slicing error for the schema_linking module
The SQL query for the question "Show the number of high schoolers for each grade." does not explicitly mention any specific tables or JOIN conditions. It simply requires grouping by the 'grade' column from the 'Highschooler' table and counting the number of records for each grade. Therefore, it does not require JOIN or nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN). 
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT  grade, COUNT(ID)  FROM Highschooler  GROUP BY grade
index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
The SQL query for the question "How many high schoolers are in each grade?" needs the table [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT  grade, COUNT(ID) FROM Highschooler GROUP BY grade
index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
The SQL query for the question "Which grade has the most high schoolers?" needs these tables = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT  grade, COUNT(*) as total_highschoolers  FROM Highschooler  GROUP BY grade  ORDER BY total_highschoolers DESC  LIMIT 1
index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
The SQL query for the question "Return the grade that has the greatest number of high schoolers." needs these tables = [Highschooler], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT  grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
The SQL query for the question "Show me all grades that have at least 4 students." needs these tables = [Highschooler, Friend, Likes], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT  grade FROM Highschooler GROUP BY grade HAVING COUNT(student_id) >= 4
index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
The SQL query for the question "Which grades have 4 or more high schoolers?" needs the Highschooler table, it requires a COUNT function, and we need to filter based on the count being greater than or equal to 4. This query does not require JOIN or nested queries.
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT  grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
The SQL query for the question "Show the student IDs and numbers of friends corresponding to each." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Highschooler.ID, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
SELECT  Highschooler.ID, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
The SQL query for the question "How many friends does each student have?" needs these tables = [Friend,Highschooler], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many friends does each student have?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.ID, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT  T1.ID, COUNT(T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID 
index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
The SQL query for the question "Show the names of high school students and their corresponding number of friends." needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.name ,  count(T2.student_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT  T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
Since the SQL query for the question "What are the names of the high schoolers and how many friends does each have?" only needs the tables [Highschooler, Friend] and doesn't require JOIN or nested queries, it can be classified as "EASY". 
Label: "EASY"
EASY
SELECT Highschooler.name, COUNT(Friend.friend_id) 
FROM Highschooler 
LEFT JOIN Friend ON Highschooler.ID = Friend.student_id
GROUP BY Highschooler.name
SELECT  Highschooler.name, COUNT(Friend.friend_id)  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
The SQL query for the question "What is the name of the high schooler who has the greatest number of friends?" needs these tables = [Highschooler,Friend], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name FROM Highschooler ORDER BY (SELECT COUNT(friend_id) FROM Friend WHERE student_id = Highschooler.ID) DESC LIMIT 1
SELECT  Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
 The SQL query for the question "Return the name of the high school student with the most friends." needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [Highschooler.name].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT name FROM Highschooler ORDER BY (SELECT COUNT(friend_id) FROM Friend WHERE student_id = Highschooler.ID) DESC LIMIT 1
SELECT  Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
The SQL query for the question "Show the names of high schoolers who have at least 3 friends." needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_ID GROUP BY Highschooler.ID HAVING COUNT(DISTINCT Friend.friend_id) >= 3
SELECT  Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING COUNT(DISTINCT Friend.friend_id) >= 3
index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
The SQL query for the question "What are the names of high schoolers who have 3 or more friends?" needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(student_id) >= 3)
SELECT  DISTINCT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(student_id) >= 3)
index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
The SQL query for the question "Show the names of all of the high schooler Kyle's friends." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.name FROM Friend JOIN Highschooler AS T1 ON T1.ID = Friend.student_id JOIN Highschooler AS T2 ON T2.ID = Friend.friend_id WHERE T1.name = 'Kyle'
SELECT  T2.name  FROM Friend  JOIN Highschooler AS T1 ON T1.ID = Friend.student_id  JOIN Highschooler AS T2 ON T2.ID = Friend.friend_id  WHERE T1.name = 'Kyle'
index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
 The SQL query for the question "Return the names of friends of the high school student Kyle." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.friend_id WHERE H1.name = 'Kyle'
SELECT  DISTINCT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'
index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
The SQL query for the question "How many friends does the high school student Kyle have?" needs these tables = [Friend,Highschooler], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many friends does Kyle have?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle' 
SELECT  COUNT(*)  FROM Friend  JOIN Highschooler ON Friend.friend_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
The SQL query for the question "Count the number of friends Kyle has." needs these tables = [Friend], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Friend WHERE student_id = 'Kyle'
SELECT COUNT(*)  FROM Friend  WHERE student_id = 'Kyle'
index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
The SQL query for the question "Show ids of all students who do not have any friends." needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have friends?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT friend_id FROM Friend UNION SELECT DISTINCT student_id FROM Friend)
SELECT  ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
The SQL query for the question "What are the ids of high school students who do not have friends?" needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the ids of high school students who have friends"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT  Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
The SQL query for the question "Show names of all high school students who do not have any friends." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which high school students have friends?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT ID FROM Friend UNION SELECT student_id FROM Friend)
SELECT  name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
 The SQL query for the question "What are the names of students who have no friends?" needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have friends?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT  name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend GROUP BY student_id)
index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
The SQL query for the question "Show the ids of high schoolers who have friends and are also liked by someone else." needs these tables = [Friend, Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.student_id = l.student_id
SELECT  DISTINCT f.student_id  FROM Friend f  JOIN Likes l ON f.student_id = l.liked_id
index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
The SQL query for the question "What are the ids of students who both have friends and are liked?" needs these tables = [Friend, Likes], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and we need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
SELECT  Highschooler.ID  FROM Friend  WHERE student_id IN (SELECT student_id FROM Likes)
index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
 The SQL query for the question "Show name of all students who have some friends and also are liked by someone else" needs these tables = [Highschooler, Friend, Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED

SELECT name 
FROM Highschooler 
WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)
SELECT  name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)
index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
 The SQL query for the question "What are the names of high schoolers who both have friends and are liked?" needs these tables = [Highschooler, Friend, Likes], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names of high schoolers who have friends?", "What are the names of high schoolers who are liked?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT DISTINCT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT student_id FROM Likes)
SELECT  DISTINCT h.name  FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id
index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
The SQL query for the question "Count the number of likes for each student id." needs these tables = [Likes, Highschooler], so we need JOIN.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT student_id , COUNT(*) FROM Likes GROUP BY student_id
SELECT  student_id, COUNT(*)  FROM Likes  GROUP BY student_id
index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
 The SQL query for the question "How many likes correspond to each student id?" needs these tables = [Likes], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Likes.student_id, COUNT(*) FROM Likes GROUP BY Likes.student_id
SELECT  Likes.student_id, COUNT(*) FROM Likes GROUP BY Likes.student_id
index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
The SQL query for the question "Show the names of high schoolers who have likes, and numbers of likes for each." needs these tables = [Highschooler,Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Names of high schoolers who have likes and number of likes for each"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.name , COUNT(T2.*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT  T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
The SQL query for the question "What are the names of high schoolers who have likes, and how many likes does each have?" needs these tables = [Highschooler, Likes], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["names of high schoolers who have likes"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.name , COUNT(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT  T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
 The SQL query for the question "What is the name of the high schooler who has the greatest number of likes?" needs these tables = [Highschooler,Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT  H.name  FROM Highschooler AS H  JOIN Likes AS L ON H.ID = L.student_id  GROUP BY H.ID  ORDER BY COUNT(*) DESC  LIMIT 1
index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
The SQL query for the question "Give the name of the student with the most likes." needs these tables = [Highschooler,Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.liked_id) DESC LIMIT 1
SELECT  T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.liked_id) DESC  LIMIT 1
index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
 The SQL query for the question "Show the names of students who have at least 2 likes" needs these tables = [Highschooler, Likes], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.liked_id) >= 2
SELECT  T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(DISTINCT T2.liked_id) >= 2
index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
The SQL query for the question "What are the names of students who have 2 or more likes?" needs these tables = [Highschooler, Likes], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the names of students"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 2
SELECT  T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id  HAVING COUNT(DISTINCT T2.liked_id) >= 2
index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
 The SQL query for the question "Show the names of students who have a grade higher than 5 and have at least 2 friends." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING grade > 5 AND COUNT(Friend.friend_id) >= 2
SELECT  Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING grade > 5  AND COUNT(DISTINCT Friend.friend_id) >= 2
index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
The SQL query for the question "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?" needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't necessitate nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY name HAVING grade > 5 AND COUNT(Friend.friend_id) >= 2
SELECT  Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.name  HAVING Highschooler.grade > 5 AND COUNT(Friend.friend_id) >= 2
index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
 The SQL query for the question "How many likes does Kyle have?" needs these tables = [Likes,Highschooler], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Likes INNER JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT  count(*) FROM Likes INNER JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
The SQL query for the question "Return the number of likes that the high schooler named Kyle has." needs these tables = [Likes, Highschooler], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"
SELECT count(*) FROM Likes JOIN Highschooler ON Likes.liked_id = Highschooler.ID WHERE Highschooler.name = "Kyle"
index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
The SQL query for the question "Find the average grade of all students who have some friends." needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT  AVG(grade)  FROM Highschooler  WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
The SQL query for the question "What is the average grade of students who have friends?" needs these tables = [Highschooler,Friend], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["average grade"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
SELECT  avg(Highschooler.grade)  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id
index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
 The SQL query for the question "Find the minimum grade of students who have no friends." needs these tables = [Highschooler, Friend], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students have friends?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT  MIN(grade) FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
The SQL query for the question "What is the lowest grade of students who do not have any friends?" needs the tables [Highschooler, Friend], so we need JOIN.
It also requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which students do not have any friends?"], so we need nested queries.
Therefore, we need JOIN and nested queries, so the SQL query can be classified as "NESTED". 
Label: "NESTED"
NESTED
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT  min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
The SQL query for the question "Which states have both owners and professionals living there?" needs these tables = [Owners, Professionals], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find states where both owners and professionals live"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT state  FROM Owners  WHERE state IN (SELECT state FROM Professionals)
index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
The SQL query for the question "Find the states where both owners and professionals live." needs these tables = [Owners, Professionals], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which states do owners and professionals live in?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT  state  FROM Owners  WHERE state IN (SELECT state FROM Professionals)
index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
The SQL query for the question "What is the average age of the dogs who have gone through any treatments?" needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT  AVG(age)  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
 The SQL query for the question "Find the average age of the dogs who went through treatments." needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT  AVG(age)  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
The SQL query for the question "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name, and cell phone." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["having done treatment on more than 2 treatments"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) > 2)
SELECT  professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN      (SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(*) > 2)
index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
The SQL query for the question "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments." needs these tables = [Professionals,Treatments], so we need JOIN.
Plus, it requires nested queries with (COUNT) and AND condition, and we need the answer to the questions = [""].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) > 2)
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana'  OR professional_id IN      (SELECT professional_id       FROM Treatments       GROUP BY professional_id       HAVING COUNT(professional_id) > 2)
index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
 The SQL query for the question "Which dogs have not cost their owner more than 1000 for treatment? List the dog names." needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the dog names"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT name FROM Dogs LEFT JOIN Treatments ON Treatments.dog_id  =  Dogs.dog_id WHERE cost_of_treatment < 1000 OR cost_of_treatment IS NULL
SELECT  name  FROM Dogs  LEFT JOIN Treatments ON Treatments.dog_id = Dogs.dog_id  WHERE cost_of_treatment < 1000 OR cost_of_treatment IS NULL
index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
The SQL query for the question "What are the names of the dogs for which the owner has not spent more than 1000 for treatment?" needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which dogs have owners who spent more than 1000 for treatment?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000)
SELECT  name  FROM Dogs  WHERE dog_id NOT IN      (SELECT dog_id       FROM Treatments       GROUP BY dog_id       HAVING SUM(cost_of_treatment) <= 1000)
index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
The SQL query for the question "Which first names are used for professionals or owners but are not used as dog names?" needs these tables = [Owners, Professionals, Dogs], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which first names are used for professionals or owners?", "Which first names are used as dog names?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
(SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) EXCEPT SELECT name FROM Dogs
SELECT first_name  FROM Owners  UNION  SELECT first_name  FROM Professionals  EXCEPT  SELECT name  FROM Dogs
index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
 The SQL query for the question "Find the first names that are used for professionals or owners but are not used as dog names." needs these tables = [Professionals, Owners, Dogs], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which names are used as dog names?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
(SELECT first_name FROM Professionals) UNION (SELECT first_name FROM Owners) EXCEPT (SELECT name FROM Dogs)
SELECT first_name FROM Professionals UNION  SELECT first_name FROM Owners EXCEPT  SELECT name FROM Dogs
index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
The SQL query for the question "Which professional did not operate any treatment on dogs? List the professional's id, role, and email." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of professionals who did not operate any treatment on dogs"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT  professional_id, role_code, email_address  FROM Professionals  WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
 The SQL query for the question "Give me the id, role, and email of the professionals who did not perform any treatment on dogs." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT  professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
The SQL query for the question "Which owner owns the most dogs? List the owner id, first name, and last name." needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the owner id, first name, and last name."].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT owner_id, first_name, last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1
SELECT owner_id, first_name, last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  GROUP BY owners.owner_id  ORDER BY COUNT(Dogs.dog_id) DESC  LIMIT 1
index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
The SQL query for the question "Return the owner id, first name and last name of the owner who has the most dogs." needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["owner id, first name, and last name of the owner"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(owner_id) DESC LIMIT 1)
SELECT  owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)
index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
 The SQL query for the question "Which professionals have done at least two treatments? List the professional's id, role, and first name." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of professionals who have done at least two treatments."].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) >= 2)
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN  (SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING count(*) >= 2)
index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
 The SQL query for the question "What are the id, role, and first name of the professionals who have performed two or more treatments?" needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which professionals have performed two or more treatments?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, role_code, first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(Treatments.professional_id) >= 2
SELECT professional_id, role_code, first_name  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  GROUP BY professional_id  HAVING COUNT(Treatments.professional_id) >= 2
index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
The SQL query for the question "What is the name of the breed with the most dogs?" needs these tables = [Breeds, Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT breed_name  FROM Breeds  JOIN Dogs ON Breeds.breed_code = Dogs.breed_code  GROUP BY breed_name  ORDER BY COUNT(Dogs.dog_id) DESC  LIMIT 1
index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
The SQL query for the question "Which breed do the most dogs have? Give me the breed name." needs these tables = [Breeds,Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY count(dog_id) DESC LIMIT 1)
SELECT  breed_name  FROM breeds  WHERE breed_code = (SELECT breed_code                      FROM dogs                      GROUP BY breed_code                      ORDER BY count(*) DESC                      LIMIT 1)
index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
The SQL query for the question "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name." needs these tables = [Owners,Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["owner id and last name of the owner who paid for the most treatments"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1))
SELECT owner_id, last_name  FROM Owners  WHERE owner_id IN  (     SELECT owner_id      FROM Dogs      WHERE dog_id IN      (         SELECT dog_id          FROM Treatments          GROUP BY dog_id          ORDER BY SUM(cost_of_treatment) DESC          LIMIT 1     ) )
index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
The SQL query for the question "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs." needs these tables = [Owners, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1
SELECT  T1.owner_id, T1.last_name  FROM Owners AS T1  JOIN Dogs AS D ON T1.owner_id = D.owner_id JOIN Treatments AS T2 ON D.dog_id = T2.dog_id GROUP BY T1.owner_id  ORDER BY SUM(T2.cost_of_treatment) DESC  LIMIT 1
index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
 The SQL query for the question "What is the description of the treatment type that costs the least money in total?" needs these tables = [Treatment_Types, Treatments], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 WHERE T1.treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1)
SELECT  T1.treatment_type_description  FROM Treatment_Types AS T1  WHERE T1.treatment_type_code =      (SELECT treatment_type_code       FROM Treatments       GROUP BY treatment_type_code       ORDER BY sum(cost_of_treatment) ASC       LIMIT 1)
index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
The SQL query for the question "Give me the description of the treatment type whose total cost is the lowest." needs these tables = [Treatment_Types, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1
SELECT  T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_code, T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1
index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
The SQL query for the question "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code." needs these tables = [Owners, Charges], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["owner id and zip code of the owner who paid the largest amount"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id GROUP BY owners.owner_id ORDER BY sum(charge_amount) DESC LIMIT 1
SELECT  owners.owner_id, owners.zip_code FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN charges ON dogs.dog_id = charges.dog_id  GROUP BY owners.owner_id, owners.zip_code ORDER BY sum(charge_amount) DESC  LIMIT 1
index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
The SQL query for the question "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs." needs these tables = [Owners, Treatments], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Find the owner id and zip code of the owner"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT O.owner_id, O.zip_code FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1
SELECT  O.owner_id, O.zip_code  FROM Owners O  INNER JOIN Dogs D ON O.owner_id = D.owner_id  INNER JOIN Treatments T ON D.dog_id = T.dog_id  GROUP BY O.owner_id, O.zip_code  ORDER BY SUM(T.cost_of_treatment) DESC  LIMIT 1
index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
 The SQL query for the question "Which professionals have done at least two types of treatments? List the professional id and cell phone." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with count and grouping, and we need the answer to the questions = ["List professional id and cell phone of those who have done at least two types of treatments."].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2
SELECT  professional_id, cell_number  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY professional_id, cell_number  HAVING COUNT(DISTINCT treatment_type_code) >= 2
index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
The SQL query for the question "Find the id and cell phone of the professionals who operate two or more types of treatments." needs these tables = [Professionals, Treatments], so we need JOIN.
It also requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN) to find professionals operating two or more types of treatments, and we need the answer to the questions = [""].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)
SELECT  professional_id, cell_number  FROM Professionals  WHERE professional_id IN  (SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) >= 2)
index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
The SQL query for the question "What are the first name and last name of the professionals who have done treatment with cost below average?" needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["First name and Last name of professionals"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT  T1.first_name , T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.first_name, T1.last_name HAVING T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
The SQL query for the question "Which professionals have operated a treatment that costs less than the average? Give me their first names and last names." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the average cost of treatment?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments)
SELECT  Professionals.first_name, Professionals.last_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id  WHERE Treatments.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments) GROUP BY Professionals.professional_id ORDER BY Professionals.last_name, Professionals.first_name
index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
The SQL query for the question "List the date of each treatment, together with the first name of the professional who operated it." needs these tables = [Treatments,Professionals], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Date of treatment and first name of the professional"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Treatments.date_of_treatment , Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT  Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
 The SQL query for the question "What are the date and the operating professional's first name of each treatment?" needs these tables = [Treatments, Professionals], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [Treatments.date_of_treatment, Professionals.first_name].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT date_of_treatment ,  first_name FROM Treatments JOIN Professionals ON Treatments.professional_id  =  Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
 The SQL query for the question "List the cost of each treatment and the corresponding treatment type description." needs these tables = [Treatments, Treatment_Types], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Cost of treatment and corresponding treatment type description for each treatment."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT  T1.cost_of_treatment, T2.treatment_type_description  FROM Treatments AS T1  JOIN Treatment_Types AS T2  ON T1.treatment_type_code = T2.treatment_type_code
index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
The SQL query for the question "What are the cost and treatment type description of each treatment?" needs these tables = [Treatments, Treatment_Types], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT  Treatments.cost_of_treatment, Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
The SQL query for the question "List each owner's first name, last name, and the size of his or her dog." needs these tables = [Owners, Dogs, Sizes], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Owners' first name, last name, and dog's size"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name , T1.last_name , T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code
SELECT  T1.first_name, T1.last_name, T3.size_description  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  JOIN Sizes AS T3 ON T2.size_code = T3.size_code GROUP BY T1.first_name, T1.last_name, T3.size_description
index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
The SQL query for the question "What are each owner's first name, last name, and the size of their dog?" needs these tables = [Owners, Dogs, Sizes], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code
SELECT  T1.first_name, T1.last_name, T3.size_description  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  JOIN Sizes AS T3 ON T2.size_code = T3.size_code GROUP BY T1.first_name, T1.last_name, T3.size_description
index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
The SQL query for the question "List pairs of the owner's first name and the dog's name." needs these tables = [Owners,Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Owner's first name and Dog's name pairs"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
 The SQL query for the question "What are each owner's first name and their dog's name?" needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
 The SQL query for the question "List the names of the dogs of the rarest breed and the treatment dates of them." needs these tables = [Dogs,Breeds,Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = "rarest breed"
SELECT  Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Breeds  ON Dogs.breed_code = Breeds.breed_code  JOIN Treatments  ON Dogs.dog_id = Treatments.dog_id  WHERE Breeds.breed_name = "rarest breed"
index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
The SQL query for the question "Which dogs are of the rarest breed? Show their names and treatment dates." needs these tables = [Dogs, Breeds, Treatments], so we need JOIN.
Plus, it doesn't requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which dogs are of the rarest breed?", "Show their names and treatment dates."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Dogs.name , Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code  =  Breeds.breed_code JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id ORDER BY Breeds.breed_code DESC LIMIT 1
SELECT  Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN (     SELECT breed_code     FROM Breeds      GROUP BY breed_code      ORDER BY COUNT(*) ASC      LIMIT 1 ) AS RarestBreed  ON Dogs.breed_code = RarestBreed.breed_code  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
 The SQL query for the question "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name." needs these tables = [Dogs,Owners], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["owner's first name", "dog's name"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T2.first_name ,  T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = "Virginia"
SELECT  T2.first_name, T1.name  FROM Dogs AS T1  JOIN Owners AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.state = "Virginia"
index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
The SQL query for the question "Find the first names of owners living in Virginia and the names of dogs they own" needs these tables = [Owners, Dogs], so we need JOIN.
Since it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Owner's first name and dog names"], we don't need nested queries.
Therefore, we need JOIN and don't need nested queries, so the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
SELECT  T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T1.state = 'Virginia'
index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
 The SQL query for the question "What are the arriving date and the departing date of the dogs who have gone through a treatment?" needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Arriving date and departing date of dogs who have gone through treatment"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT date_arrived , date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT  DISTINCT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
The SQL query for the question "Find the arriving date and the departing date of the dogs that received a treatment." needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT date_arrived ,  date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT  date_arrived, date_departed  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
 The SQL query for the question "List the last name of the owner owning the youngest dog." needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List the last name of the owner owning the youngest dog."].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE age = (SELECT min(age) FROM Dogs)
SELECT  last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE age = (SELECT min(age) FROM Dogs) ORDER BY age DESC  LIMIT 1
index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
The SQL query for the question "Who owns the youngest dog? Give me his or her last name." needs these tables = [Owners,Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT last_name FROM Owners 
JOIN Dogs ON Owners.owner_id = Dogs.owner_id 
ORDER BY age ASC LIMIT 1
SELECT  last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  ORDER BY date_of_birth DESC LIMIT 1
index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
 The SQL query for the question "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin." needs these tables = [Professionals], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List of emails of professionals"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
The SQL query for the question "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?" needs these tables = [Professionals], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What are the emails of the professionals living in the state of Hawaii?", "What are the emails of the professionals living in the state of Wisconsin?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT email_address FROM Professionals WHERE state = 'Hawaii'  
UNION  
SELECT email_address FROM Professionals WHERE state = 'Wisconsin'
SELECT  DISTINCT email_address FROM Professionals WHERE state = 'Hawaii'   OR state = 'Wisconsin'
index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
The SQL query for the question "What are the arriving date and the departing date of all the dogs?" needs the tables [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT date_arrived, date_departed FROM Dogs
SELECT  date_arrived, date_departed FROM Dogs
index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
The SQL query for the question "List the arrival date and the departure date for all the dogs" needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
The SQL query for the question "How many dogs went through any treatments?" needs these tables = [Treatments], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT  COUNT(DISTINCT dog_id) FROM Treatments
index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
The SQL query for the question "Count the number of dogs that went through a treatment." needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT  COUNT(DISTINCT T1.dog_id)  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
The SQL query for the question "How many professionals have performed any treatment to dogs?" needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many professionals have performed any treatment to dogs?"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.professional_id) FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT  COUNT(DISTINCT T1.professional_id)  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
 The SQL query for the question "Find the number of professionals who have ever treated dogs." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT  COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id
index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
The SQL query for the question "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state." needs the table = [Professionals], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which professionals live in a city containing 'West'?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT role_code,street,city,state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code,street,city,state  FROM Professionals  WHERE city LIKE '%West%'
index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
The SQL query for the question "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'." needs these tables = [Professionals], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
The SQL query for the question "Which owners live in the state whose name contains the substring 'North'? List his first name, last name, and email." needs these tables = [Owners], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["List owners who live in states containing 'North'"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
The SQL query for the question "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'" needs the table = [Owners], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["first name, last name, email of owners living in a state with 'North'"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT  first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
The SQL query for the question "How many dogs have an age below the average?" needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT  COUNT(dog_id)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
The SQL query for the question "Count the number of dogs of an age below the average" needs the table = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["number of dogs of an age below the average"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT  COUNT(dog_id)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
The SQL query for the question "How much does the most recent treatment cost?" only needs the table [Treatments], so we don't need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT  cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1
index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
 The SQL query for the question "Show me the cost of the most recently performed treatment" needs these tables = [Treatments], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT  cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1
index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
The SQL query for the question "How many dogs have not gone through any treatment?" needs the tables [Dogs, Treatments]. However, this questions doesn't require JOIN as we are specifically looking for dogs that have not gone through any treatment, so we don't need to combine information from Treatments table. Additionally, this question does not require nested queries. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT  COUNT(*) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
 The SQL query for the question "Tell me the number of dogs that have not received any treatment" needs these tables = [Dogs, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which dogs have received treatment?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
 The SQL query for the question "How many owners temporarily do not have any dogs?" needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which owners do not have any dogs currently?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL
SELECT  COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL GROUP BY Owners.owner_id
index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
The SQL query for the question "Find the number of owners who do not own any dogs at this moment." needs these tables = [Owners, Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Number of owners who do not own any dogs"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT count(DISTINCT T1.owner_id) FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.dog_id IS NULL
SELECT  count(DISTINCT T1.owner_id)  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.dog_id IS NULL
index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
The SQL query for the question "How many professionals did not operate any treatment on dogs?" needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which professionals operated treatments on dogs?"].
So, we need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT  COUNT(*)  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
The SQL query for the question "Find the number of professionals who have not treated any dogs." needs these tables = [Professionals, Treatments], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which professionals have treated dogs?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT  count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments GROUP BY professional_id)
index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
The SQL query for the question "List the dog name, age and weight of the dogs who have been abandoned?" needs the table = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
The SQL query for the question "What are the dog name, age, and weight of the dogs that were abandoned?" needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
The SQL query for the question "What is the average age of all the dogs?" needs only the table [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["average age"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(age) FROM Dogs
SELECT  AVG(age) FROM Dogs
index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
 The SQL query for the question "Compute the average age of all the dogs." needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT AVG(age) FROM Dogs
SELECT  AVG(age) FROM Dogs
index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
The SQL query for the question "What is the age of the oldest dog?" needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs
index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
 The SQL query for the question "Tell me the age of the oldest dog." needs these tables = [Dogs], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs
index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
 The SQL query for the question "How much does each charge type cost? List both charge type and amount." needs these tables = [Charges], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, SUM(charge_amount) as total_amount FROM Charges GROUP BY charge_type
index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
 The SQL query for the question "List each charge type and its amount." needs these tables = [Charges], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT charge_type, charge_amount FROM Charges
SELECT  DISTINCT charge_type, charge_amount  FROM Charges
index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
The SQL query for the question "How much does the most expensive charge type cost?" needs these tables = [Charges], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(charge_amount) FROM Charges
SELECT MAX(charge_amount)  FROM Charges
index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
The SQL query for the question "What is the charge amount of the most expensive charge type?" needs these tables = [Charges], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT MAX(charge_amount) FROM Charges
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges
index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
 The SQL query for the question "List the email, cell phone and home phone of all the professionals." needs these tables = [Professionals], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone  FROM Professionals
index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
 The SQL query for the question "What are the email, cell phone and home phone of each professional?" needs these tables = [Professionals], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
The SQL query for the question "What are all the possible breed type and size type combinations?" needs these tables = [Breeds, Sizes], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT breed_name, size_description  FROM Breeds  CROSS JOIN Sizes
index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
The SQL query for the question "Find the distinct breed type and size type combinations for dogs." needs these tables = [Breeds,Sizes,Dogs], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Breeds.breed_name , Sizes.size_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT DISTINCT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Breeds.breed_code = Dogs.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description
index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
The SQL query for the question "List the first name of all the professionals along with the description of the treatment they have done." needs these tables = [Professionals, Treatment_Types], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT p.first_name, tt.treatment_type_description
FROM Professionals p
JOIN Treatments t ON p.professional_id = t.professional_id
JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT  p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code
index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
The SQL query for the question "What are each professional's first name and description of the treatment they have performed?" needs these tables = [Professionals, Treatments, Treatment_Types], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["professional's first name and treatment type description"].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.first_name, T3.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id JOIN treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code
SELECT  T1.first_name, T3.treatment_type_description  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code
index is 1000
SELECT count(*) FROM singer
How many singers are there?
The SQL query for the question "How many singers are there?" only needs the table [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["How many singers are there?"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
index is 1001
SELECT count(*) FROM singer
What is the count of singers?
 The SQL query for the question "What is the count of singers?" needs the table = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Count of singers"].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(Singer_ID) FROM singer
SELECT  COUNT(DISTINCT Singer_ID) FROM singer
index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
The SQL query for the question "List the name of singers in ascending order of net worth." needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT  Name FROM singer ORDER BY Net_Worth_Millions
index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
The SQL query for the question "What are the names of singers ordered by ascending net worth?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT  Name  FROM singer  ORDER BY Net_Worth_Millions ASC
index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
The SQL query for the question "What are the birth year and citizenship of singers?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
 The SQL query for the question "What are the birth years and citizenships of the singers?" needs the table = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship  FROM singer
index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
The SQL query for the question "List the name of singers whose citizenship is not France." needs the table = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer WHERE Citizenship  !=  'France'
SELECT  Name FROM singer WHERE Citizenship  !=  'France'
index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
The SQL query for the question "What are the names of the singers who are not French citizens?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer WHERE Citizenship != 'French'
SELECT  Name  FROM singer  WHERE Citizenship != 'French'
index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
The SQL query for the question "Show the name of singers whose birth year is either 1948 or 1949?" only needs the table singer, so we don't need JOIN.
Additionally, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = ["name of singers"].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT  Name  FROM singer  WHERE Birth_Year IN (1948, 1949)
index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
The SQL query for the question "What are the names of the singers whose birth years are either 1948 or 1949?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT  Name  FROM singer  WHERE Birth_Year IN (1948, 1949)
index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
The SQL query for the question "What is the name of the singer with the largest net worth?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions DESC LIMIT 1
index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
The SQL query for the question "What is the name of the singer who is worth the most?" needs the tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT  Name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1
index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
The SQL query for the question "Show different citizenship of singers and the number of singers of each citizenship." needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT  Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
The SQL query for the question "For each citizenship, how many singers are from that country?" needs these tables = [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
The SQL query for the question "Please show the most common citizenship of singers." needs only the table singer, so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
The SQL query for the question "What is the most common singer citizenship?" requires the table [singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT  Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1
index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
The SQL query for the question "Show different citizenships and the maximum net worth of singers of each citizenship." needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the maximum net worth of singers of each citizenship."].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT  Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship
index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
 The SQL query for the question "For each citizenship, what is the maximum net worth?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["What is the maximum net worth for each citizenship?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT  Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
The SQL query for the question "Show titles of songs and names of singers." needs these tables = [song,singer], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Title ,  Name FROM song JOIN singer ON song.Singer_ID  =  singer.Singer_ID
SELECT Title, Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID
index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
The SQL query for the question "What are the song titles and singer names?" needs these tables = [song,singer], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT Song.Title, singer.Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID
index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
The SQL query for the question "Show distinct names of singers that have songs with sales more than 300000." needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Distinct names of singers"].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000
SELECT  DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000
index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
The SQL query for the question "what are the different names of the singers that have sales more than 300000?" needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
SELECT  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000 GROUP BY T1.Name
index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
The SQL query for the question "Show the names of singers that have more than one song." needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(Song_ID) > 1
SELECT singer.Name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Singer_ID  HAVING COUNT(song.Song_ID) > 1
index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
The SQL query for the question "What are the names of the singers that have more than one songs?" needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT DISTINCT Name FROM singer JOIN (SELECT Singer_ID, COUNT(*) as cnt FROM song GROUP BY Singer_ID) as A ON singer.Singer_ID = A.Singer_ID WHERE cnt > 1
SELECT  Name FROM singer JOIN (SELECT Singer_ID, COUNT(*) as cnt FROM song GROUP BY Singer_ID) as A ON singer.Singer_ID = A.Singer_ID WHERE cnt > 1
index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
The SQL query for the question "Show the names of singers and the total sales of their songs" needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name , SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT  T1.Name , SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
The SQL query for the question "For each singer name, what is the total sales for their songs?" needs these tables = [singer, song], so we need JOIN.
Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT  T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
The SQL query for the question "List the name of singers that do not have any song." needs these tables = [singer, song], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which singers have songs?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT  Name  FROM singer  LEFT JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Singer_ID IS NULL
index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
 The SQL query for the question "What is the sname of every sing that does not have any song?" needs these tables = [singer, song], so we need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which singers have songs?"].
So, we need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT  Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
The SQL query for the question "Show the citizenship shared by singers with birth year before 1945 and after 1955." needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the citizenship shared by singers with birth year before 1945","Show the citizenship shared by singers with birth year after 1955"].
So, we don't need JOIN and need nested queries, then the the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
SELECT  DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945  INTERSECT  SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year > 1955
index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
The SQL query for the question "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?" needs these tables = [singer], so we don't need JOIN.
Plus, it requires nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Which citizenships are shared by singers with birth year before 1945 and after 1955?"].
So, we don't need JOIN and need nested queries, then the SQL query can be classified as "NESTED".
Label: "NESTED"
NESTED
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT  DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
The SQL query for the question "How many available features are there in total?" needs the table = [Other_Available_Features], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the question = [count of available features].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT COUNT(feature_id) FROM Other_Available_Features
SELECT  COUNT(DISTINCT feature_id)  FROM Other_Available_Features
index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
 The SQL query for the question "What is the feature type name of feature AirCon?" needs these tables = [Ref_Feature_Types, Other_Available_Features], so we need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'
SELECT  T1.feature_type_name  FROM Ref_Feature_Types AS T1  JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  WHERE T2.feature_name = 'AirCon'
index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
The SQL query for the question "Show the property type descriptions of properties belonging to that code." needs these tables = [Ref_Property_Types, Properties], so we need JOIN. Plus, it doesn't need nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = ["Show the property type descriptions of properties belonging to that code"]. So, we need JOIN and don't need nested queries, then the SQL query can be classified as "NON-NESTED".
Label: "NON-NESTED"
NON-NESTED
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = @.@
SELECT property_type_description  FROM Ref_Property_Types  WHERE property_type_code = @property_type_code
index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
The SQL query for the question "What are the names of properties that are either houses or apartments with more than 1 room?" needs these tables = [Properties], so we don't need JOIN.
Plus, it doesn't require nested queries with (INTERSECT, UNION, EXCEPT, IN, NOT IN), and we need the answer to the questions = [""].
So, we don't need JOIN and don't need nested queries, then the SQL query can be classified as "EASY".
Label: "EASY"
EASY
SELECT property_name FROM Properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1
SELECT  property_name  FROM Properties  WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1
